{"de.upb.gpa.Checkstyle.578":{"startLine":"69","shortMessage":"Parameter key should be final.","longMessage":"Parameter key should be final."},"de.upb.gpa.Checkstyle.2":{"startLine":"120","shortMessage":"Line is longer than 80 characters (found 88).","longMessage":"Line is longer than 80 characters ."},"de.upb.gpa.findbugs.OBL_UNSATISFIED_OBLIGATION":{"startLine":"44","shortMessage":"Experimental - Method may fail to clean up stream or resource","longMessage":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique."},"de.upb.gpa.Checkstyle.3":{"startLine":"40","shortMessage":"Line has trailing spaces.","longMessage":"Line has trailing spaces."},"de.upb.gpa.Checkstyle.6":{"startLine":"39","shortMessage":"File contains tab characters (this is the first instance).","longMessage":"File contains tab characters ."},"de.upb.gpa.Checkstyle.29":{"startLine":"100","shortMessage":"'}' at column 3 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if\/else-if\/else, do\/while or try\/catch\/finally).","longMessage":"'}' at column 3 should be on the same line as the next part of a multi-block statement ."},"de.upb.gpa.Checkstyle.5":{"startLine":"37","shortMessage":"'{' at column 1 should be on the previous line.","longMessage":"'{' at column 1 should be on the previous line."},"de.upb.gpa.findbugs.DMI_HARDCODED_ABSOLUTE_FILENAME":{"startLine":"111","shortMessage":"Style - Code contains a hard coded reference to an absolute pathname","longMessage":"This code constructs a File object using a hard coded to an absolute pathname(e.g., new File(\"\/home\/dannyc\/workspace\/j2ee\/src\/share\/com\/sun\/enterprise\/deployment\");"},"de.upb.gpa.Checkstyle.9":{"startLine":"109","shortMessage":"Missing a Javadoc comment.","longMessage":"Missing a Javadoc comment."},"de.upb.gpa.Checkstyle.291":{"startLine":"93","shortMessage":"Parameter lesson should be final.","longMessage":"Parameter lesson should be final."},"de.upb.gpa.Checkstyle.12":{"startLine":"110","shortMessage":"'{' at column 2 should be on the previous line.","longMessage":"'{' at column 2 should be on the previous line."},"de.upb.gpa.Checkstyle.13":{"startLine":"116","shortMessage":"'{' at column 3 should be on the previous line.","longMessage":"'{' at column 3 should be on the previous line."},"de.upb.gpa.Checkstyle.26":{"startLine":"87","shortMessage":"'if' construct must use '{}'s.","longMessage":"'if' construct must use '{}'s."},"de.upb.gpa.Checkstyle.1136":{"startLine":"69","shortMessage":"Parameter defaultValue should be final.","longMessage":"Parameter defaultValue should be final."},"de.upb.gpa.findbugs.NP_NULL_ON_SOME_PATH_EXCEPTION":{"startLine":"111","shortMessage":"Correctness - Possible null pointer dereference in method on exception path","longMessage":"A reference value which is null on some exception control path isdereferenced here.&nbsp; This may lead to a NullPointerExceptionwhen the code is executed.&nbsp;Note that because SpotBugs currently does not prune infeasible exception paths,this may be a false warning. Also note that SpotBugs considers the default case of a switch statement tobe an exception path, since the default case is often infeasible."},"de.upb.gpa.Checkstyle.1137":{"startLine":"69","shortMessage":"Class 'WebgoatProperties' looks like designed for extension (can be subclassed), but the method 'getBooleanProperty' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'WebgoatProperties' final or making the method 'getBooleanProperty' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'WebgoatProperties' looks like designed for extension , but the method 'getBooleanProperty' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'WebgoatProperties' final or making the method 'getBooleanProperty' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.1134":{"startLine":"44","shortMessage":"Parameter propertiesFileName should be final.","longMessage":"Parameter propertiesFileName should be final."},"de.upb.gpa.Checkstyle.1135":{"startLine":"56","shortMessage":"Class 'WebgoatProperties' looks like designed for extension (can be subclassed), but the method 'getIntProperty' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'WebgoatProperties' final or making the method 'getIntProperty' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'WebgoatProperties' looks like designed for extension , but the method 'getIntProperty' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'WebgoatProperties' final or making the method 'getIntProperty' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.407":{"startLine":"109","shortMessage":"Parameter args should be final.","longMessage":"Parameter args should be final."}}