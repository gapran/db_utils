{"de.upb.gpa.findbugs.HE_INHERITS_EQUALS_USE_HASHCODE":{"startLine":"45","shortMessage":"Bad practice - Class inherits equals() and uses Object.hashCode()","longMessage":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException."},"de.upb.gpa.Checkstyle.117":{"startLine":"79","shortMessage":"'3' is a magic number.","longMessage":"'3' is a magic number."},"de.upb.gpa.Checkstyle.500":{"startLine":"111","shortMessage":"Class 'HttpBasics' looks like designed for extension (can be subclassed), but the method 'getDefaultRanking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'HttpBasics' final or making the method 'getDefaultRanking' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'HttpBasics' looks like designed for extension , but the method 'getDefaultRanking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'HttpBasics' final or making the method 'getDefaultRanking' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.501":{"startLine":"116","shortMessage":"Class 'HttpBasics' looks like designed for extension (can be subclassed), but the method 'getDefaultCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'HttpBasics' final or making the method 'getDefaultCategory' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'HttpBasics' looks like designed for extension , but the method 'getDefaultCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'HttpBasics' final or making the method 'getDefaultCategory' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.2":{"startLine":"99","shortMessage":"Line is longer than 80 characters (found 86).","longMessage":"Line is longer than 80 characters ."},"de.upb.gpa.Checkstyle.4":{"startLine":"43","shortMessage":"Unknown tag 'created'.","longMessage":"Unknown tag 'created'."},"de.upb.gpa.Checkstyle.3":{"startLine":"123","shortMessage":"Line has trailing spaces.","longMessage":"Line has trailing spaces."},"de.upb.gpa.Checkstyle.6":{"startLine":"47","shortMessage":"File contains tab characters (this is the first instance).","longMessage":"File contains tab characters ."},"de.upb.gpa.Checkstyle.5":{"startLine":"46","shortMessage":"'{' at column 1 should be on the previous line.","longMessage":"'{' at column 1 should be on the previous line."},"de.upb.gpa.Checkstyle.8":{"startLine":"109","shortMessage":"'static' modifier out of order with the JLS suggestions.","longMessage":"'static' modifier out of order with the JLS suggestions."},"de.upb.gpa.Checkstyle.7":{"startLine":"121","shortMessage":"First sentence should end with a period.","longMessage":"First sentence should end with a period."},"de.upb.gpa.Checkstyle.9":{"startLine":"116","shortMessage":"Missing a Javadoc comment.","longMessage":"Missing a Javadoc comment."},"de.upb.gpa.Checkstyle.65":{"startLine":"92","shortMessage":"Expected @param tag for 's'.","longMessage":"Expected @param tag for 's'."},"de.upb.gpa.findbugs.DM_NUMBER_CTOR":{"startLine":"109","shortMessage":"Performance - Method invokes inefficient Number constructor; use static valueOf instead","longMessage":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte."},"de.upb.gpa.Checkstyle.12":{"startLine":"127","shortMessage":"'{' at column 2 should be on the previous line.","longMessage":"'{' at column 2 should be on the previous line."},"de.upb.gpa.Checkstyle.35":{"startLine":"92","shortMessage":"Parameter s should be final.","longMessage":"Parameter s should be final."},"de.upb.gpa.Checkstyle.13":{"startLine":"80","shortMessage":"'{' at column 3 should be on the previous line.","longMessage":"'{' at column 3 should be on the previous line."},"de.upb.gpa.Checkstyle.69":{"startLine":"63","shortMessage":"'+' is not followed by whitespace.","longMessage":"'+' is not followed by whitespace."},"de.upb.gpa.findbugs.NP_NULL_ON_SOME_PATH_EXCEPTION":{"startLine":"58","shortMessage":"Correctness - Possible null pointer dereference in method on exception path","longMessage":"A reference value which is null on some exception control path isdereferenced here.&nbsp; This may lead to a NullPointerExceptionwhen the code is executed.&nbsp;Note that because SpotBugs currently does not prune infeasible exception paths,this may be a false warning. Also note that SpotBugs considers the default case of a switch statement tobe an exception path, since the default case is often infeasible."},"de.upb.gpa.Checkstyle.70":{"startLine":"63","shortMessage":"'+' is not preceded with whitespace.","longMessage":"'+' is not preceded with whitespace."}}