{"de.upb.gpa.Checkstyle.416":{"startLine":"844","shortMessage":"Class 'Encoding' looks like designed for extension (can be subclassed), but the method 'getCredits' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Encoding' final or making the method 'getCredits' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Encoding' looks like designed for extension , but the method 'getCredits' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Encoding' final or making the method 'getCredits' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.117":{"startLine":"518","shortMessage":"'3' is a magic number.","longMessage":"'3' is a magic number."},"de.upb.gpa.Checkstyle.414":{"startLine":"728","shortMessage":"'encoder' hides a field.","longMessage":"'encoder' hides a field."},"de.upb.gpa.Checkstyle.118":{"startLine":"229","shortMessage":"'4' is a magic number.","longMessage":"'4' is a magic number."},"de.upb.gpa.Checkstyle.415":{"startLine":"839","shortMessage":"Parameter userKey should be final.","longMessage":"Parameter userKey should be final."},"de.upb.gpa.Checkstyle.412":{"startLine":"679","shortMessage":"'26' is a magic number.","longMessage":"'26' is a magic number."},"de.upb.gpa.Checkstyle.413":{"startLine":"705","shortMessage":"'decoder' hides a field.","longMessage":"'decoder' hides a field."},"de.upb.gpa.Checkstyle.399":{"startLine":"764","shortMessage":"Parameter str should be final.","longMessage":"Parameter str should be final."},"de.upb.gpa.Checkstyle.410":{"startLine":"635","shortMessage":"Parameter value2 should be final.","longMessage":"Parameter value2 should be final."},"de.upb.gpa.Checkstyle.411":{"startLine":"839","shortMessage":"Parameter input should be final.","longMessage":"Parameter input should be final."},"de.upb.gpa.Checkstyle.111":{"startLine":"86","shortMessage":"'{' is followed by whitespace.","longMessage":"'{' is followed by whitespace."},"de.upb.gpa.findbugs.DM_DEFAULT_ENCODING":{"startLine":"727","shortMessage":"I18n - Reliance on default encoding","longMessage":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly."},"de.upb.gpa.Checkstyle.29":{"startLine":"383","shortMessage":"'}' at column 3 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if\/else-if\/else, do\/while or try\/catch\/finally).","longMessage":"'}' at column 3 should be on the same line as the next part of a multi-block statement ."},"de.upb.gpa.Checkstyle.175":{"startLine":"676","shortMessage":"'13' is a magic number.","longMessage":"'13' is a magic number."},"de.upb.gpa.findbugs.DM_NUMBER_CTOR":{"startLine":"69","shortMessage":"Performance - Method invokes inefficient Number constructor; use static valueOf instead","longMessage":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte."},"de.upb.gpa.Checkstyle.12":{"startLine":"845","shortMessage":"'{' at column 2 should be on the previous line.","longMessage":"'{' at column 2 should be on the previous line."},"de.upb.gpa.Checkstyle.35":{"startLine":"426","shortMessage":"Parameter s should be final.","longMessage":"Parameter s should be final."},"de.upb.gpa.Checkstyle.13":{"startLine":"824","shortMessage":"'{' at column 3 should be on the previous line.","longMessage":"'{' at column 3 should be on the previous line."},"de.upb.gpa.Checkstyle.14":{"startLine":"800","shortMessage":"'{' at column 4 should be on the previous line.","longMessage":"'{' at column 4 should be on the previous line."},"de.upb.gpa.Checkstyle.15":{"startLine":"675","shortMessage":"'{' at column 5 should be on the previous line.","longMessage":"'{' at column 5 should be on the previous line."},"de.upb.gpa.Checkstyle.409":{"startLine":"635","shortMessage":"Parameter value1 should be final.","longMessage":"Parameter value1 should be final."},"de.upb.gpa.Checkstyle.407":{"startLine":"555","shortMessage":"Parameter args should be final.","longMessage":"Parameter args should be final."},"de.upb.gpa.Checkstyle.408":{"startLine":"635","shortMessage":"Parameter description should be final.","longMessage":"Parameter description should be final."},"de.upb.gpa.Checkstyle.405":{"startLine":"511","shortMessage":"'{' at column 39 should have line break after.","longMessage":"'{' at column 39 should have line break after."},"de.upb.gpa.Checkstyle.406":{"startLine":"535","shortMessage":"Parameter asciiString should be final.","longMessage":"Parameter asciiString should be final."},"de.upb.gpa.findbugs.HE_INHERITS_EQUALS_USE_HASHCODE":{"startLine":"67","shortMessage":"Bad practice - Class inherits equals() and uses Object.hashCode()","longMessage":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException."},"de.upb.gpa.Checkstyle.205":{"startLine":"131","shortMessage":"Parameter c should be final.","longMessage":"Parameter c should be final."},"de.upb.gpa.Checkstyle.403":{"startLine":"433","shortMessage":"Class 'Encoding' looks like designed for extension (can be subclassed), but the method 'getDefaultRanking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Encoding' final or making the method 'getDefaultRanking' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Encoding' looks like designed for extension , but the method 'getDefaultRanking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Encoding' final or making the method 'getDefaultRanking' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.404":{"startLine":"507","shortMessage":"Parameter hexString should be final.","longMessage":"Parameter hexString should be final."},"de.upb.gpa.Checkstyle.401":{"startLine":"360","shortMessage":"Parameter pw should be final.","longMessage":"Parameter pw should be final."},"de.upb.gpa.Checkstyle.402":{"startLine":"366","shortMessage":"'20' is a magic number.","longMessage":"'20' is a magic number."},"de.upb.gpa.Checkstyle.2":{"startLine":"839","shortMessage":"Line is longer than 80 characters (found 81).","longMessage":"Line is longer than 80 characters ."},"de.upb.gpa.Checkstyle.400":{"startLine":"161","shortMessage":"Parameter b should be final.","longMessage":"Parameter b should be final."},"de.upb.gpa.Checkstyle.367":{"startLine":"518","shortMessage":"'16' is a magic number.","longMessage":"'16' is a magic number."},"de.upb.gpa.Checkstyle.4":{"startLine":"64","shortMessage":"Unknown tag 'created'.","longMessage":"Unknown tag 'created'."},"de.upb.gpa.Checkstyle.3":{"startLine":"831","shortMessage":"Line has trailing spaces.","longMessage":"Line has trailing spaces."},"de.upb.gpa.Checkstyle.6":{"startLine":"69","shortMessage":"File contains tab characters (this is the first instance).","longMessage":"File contains tab characters ."},"de.upb.gpa.Checkstyle.5":{"startLine":"68","shortMessage":"'{' at column 1 should be on the previous line.","longMessage":"'{' at column 1 should be on the previous line."},"de.upb.gpa.Checkstyle.8":{"startLine":"431","shortMessage":"'static' modifier out of order with the JLS suggestions.","longMessage":"'static' modifier out of order with the JLS suggestions."},"de.upb.gpa.Checkstyle.7":{"startLine":"829","shortMessage":"First sentence should end with a period.","longMessage":"First sentence should end with a period."},"de.upb.gpa.Checkstyle.9":{"startLine":"844","shortMessage":"Missing a Javadoc comment.","longMessage":"Missing a Javadoc comment."},"de.upb.gpa.Checkstyle.65":{"startLine":"426","shortMessage":"Expected @param tag for 's'.","longMessage":"Expected @param tag for 's'."},"de.upb.gpa.findbugs.REC_CATCH_EXCEPTION":{"startLine":"559","shortMessage":"Style - Exception is caught when Exception is not thrown","longMessage":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}"},"de.upb.gpa.findbugs.NP_NULL_ON_SOME_PATH_EXCEPTION":{"startLine":"485","shortMessage":"Correctness - Possible null pointer dereference in method on exception path","longMessage":"A reference value which is null on some exception control path isdereferenced here.&nbsp; This may lead to a NullPointerExceptionwhen the code is executed.&nbsp;Note that because SpotBugs currently does not prune infeasible exception paths,this may be a false warning. Also note that SpotBugs considers the default case of a switch statement tobe an exception path, since the default case is often infeasible."},"de.upb.gpa.Checkstyle.62":{"startLine":"678","shortMessage":"'{' at column 6 should be on the previous line.","longMessage":"'{' at column 6 should be on the previous line."}}