{"de.upb.gpa.Checkstyle.885":{"startLine":"44","shortMessage":"Class 'Authorization' looks like designed for extension (can be subclassed), but the method 'setPermission' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Authorization' final or making the method 'setPermission' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Authorization' looks like designed for extension , but the method 'setPermission' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Authorization' final or making the method 'setPermission' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.886":{"startLine":"49","shortMessage":"Class 'Authorization' looks like designed for extension (can be subclassed), but the method 'isAllowed' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Authorization' final or making the method 'isAllowed' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Authorization' looks like designed for extension , but the method 'isAllowed' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Authorization' final or making the method 'isAllowed' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.2":{"startLine":"30","shortMessage":"Line is longer than 80 characters (found 95).","longMessage":"Line is longer than 80 characters ."},"de.upb.gpa.Checkstyle.1":{"startLine":"1","shortMessage":"Missing package-info.java file.","longMessage":"Missing package-info.java file."},"de.upb.gpa.Checkstyle.884":{"startLine":"38","shortMessage":"Variable 'permissions' must be private and have accessor methods.","longMessage":"Variable 'permissions' must be private and have accessor methods."},"de.upb.gpa.Checkstyle.3":{"startLine":"32","shortMessage":"Line has trailing spaces.","longMessage":"Line has trailing spaces."},"de.upb.gpa.Checkstyle.6":{"startLine":"38","shortMessage":"File contains tab characters (this is the first instance).","longMessage":"File contains tab characters ."},"de.upb.gpa.Checkstyle.5":{"startLine":"36","shortMessage":"'{' at column 1 should be on the previous line.","longMessage":"'{' at column 1 should be on the previous line."},"de.upb.gpa.Checkstyle.297":{"startLine":"49","shortMessage":"Parameter userId should be final.","longMessage":"Parameter userId should be final."},"de.upb.gpa.Checkstyle.9":{"startLine":"49","shortMessage":"Missing a Javadoc comment.","longMessage":"Missing a Javadoc comment."},"de.upb.gpa.findbugs.DM_NUMBER_CTOR":{"startLine":"46","shortMessage":"Performance - Method invokes inefficient Number constructor; use static valueOf instead","longMessage":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte."},"de.upb.gpa.Checkstyle.12":{"startLine":"50","shortMessage":"'{' at column 2 should be on the previous line.","longMessage":"'{' at column 2 should be on the previous line."},"de.upb.gpa.Checkstyle.79":{"startLine":"49","shortMessage":"Parameter functionId should be final.","longMessage":"Parameter functionId should be final."}}