{"de.upb.gpa.Checkstyle.856":{"startLine":"243","shortMessage":"'1001' is a magic number.","longMessage":"'1001' is a magic number."},"de.upb.gpa.Checkstyle.857":{"startLine":"76","shortMessage":"'1002' is a magic number.","longMessage":"'1002' is a magic number."},"de.upb.gpa.Checkstyle.854":{"startLine":"61","shortMessage":"Variable 'rewardsMap' must be private and have accessor methods.","longMessage":"Variable 'rewardsMap' must be private and have accessor methods."},"de.upb.gpa.Checkstyle.855":{"startLine":"70","shortMessage":"'50' is a magic number.","longMessage":"'50' is a magic number."},"de.upb.gpa.Checkstyle.872":{"startLine":"323","shortMessage":"Parameter points should be final.","longMessage":"Parameter points should be final."},"de.upb.gpa.Checkstyle.873":{"startLine":"323","shortMessage":"'points' hides a field.","longMessage":"'points' hides a field."},"de.upb.gpa.Checkstyle.870":{"startLine":"296","shortMessage":"Class 'XMLInjection' looks like designed for extension (can be subclassed), but the method 'getTitle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'getTitle' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'XMLInjection' looks like designed for extension , but the method 'getTitle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'getTitle' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.871":{"startLine":"313","shortMessage":"'name' hides a field.","longMessage":"'name' hides a field."},"de.upb.gpa.findbugs.DM_DEFAULT_ENCODING":{"startLine":"101","shortMessage":"I18n - Reliance on default encoding","longMessage":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly."},"de.upb.gpa.findbugs.DM_NUMBER_CTOR":{"startLine":"57","shortMessage":"Performance - Method invokes inefficient Number constructor; use static valueOf instead","longMessage":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte."},"de.upb.gpa.Checkstyle.12":{"startLine":"302","shortMessage":"'{' at column 2 should be on the previous line.","longMessage":"'{' at column 2 should be on the previous line."},"de.upb.gpa.Checkstyle.35":{"startLine":"286","shortMessage":"Parameter s should be final.","longMessage":"Parameter s should be final."},"de.upb.gpa.Checkstyle.13":{"startLine":"324","shortMessage":"'{' at column 3 should be on the previous line.","longMessage":"'{' at column 3 should be on the previous line."},"de.upb.gpa.Checkstyle.14":{"startLine":"241","shortMessage":"'{' at column 4 should be on the previous line.","longMessage":"'{' at column 4 should be on the previous line."},"de.upb.gpa.Checkstyle.36":{"startLine":"239","shortMessage":"'}' at column 4 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if\/else-if\/else, do\/while or try\/catch\/finally).","longMessage":"'}' at column 4 should be on the same line as the next part of a multi-block statement ."},"de.upb.gpa.Checkstyle.15":{"startLine":"244","shortMessage":"'{' at column 5 should be on the previous line.","longMessage":"'{' at column 5 should be on the previous line."},"de.upb.gpa.Checkstyle.869":{"startLine":"286","shortMessage":"Class 'XMLInjection' looks like designed for extension (can be subclassed), but the method 'getHints' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'getHints' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'XMLInjection' looks like designed for extension , but the method 'getHints' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'getHints' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.867":{"startLine":"274","shortMessage":"Class 'XMLInjection' looks like designed for extension (can be subclassed), but the method 'getDefaultCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'getDefaultCategory' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'XMLInjection' looks like designed for extension , but the method 'getDefaultCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'getDefaultCategory' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.868":{"startLine":"280","shortMessage":"Class 'XMLInjection' looks like designed for extension (can be subclassed), but the method 'getDefaultRanking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'getDefaultRanking' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'XMLInjection' looks like designed for extension , but the method 'getDefaultRanking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'getDefaultRanking' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.findbugs.HE_INHERITS_EQUALS_USE_HASHCODE":{"startLine":"54","shortMessage":"Bad practice - Class inherits equals() and uses Object.hashCode()","longMessage":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException."},"de.upb.gpa.Checkstyle.865":{"startLine":"260","shortMessage":"Class 'XMLInjection' looks like designed for extension (can be subclassed), but the method 'makeSuccess' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'makeSuccess' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'XMLInjection' looks like designed for extension , but the method 'makeSuccess' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'makeSuccess' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.866":{"startLine":"269","shortMessage":"Class 'XMLInjection' looks like designed for extension (can be subclassed), but the method 'getCredits' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'getCredits' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'XMLInjection' looks like designed for extension , but the method 'getCredits' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'getCredits' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.206":{"startLine":"313","shortMessage":"Parameter name should be final.","longMessage":"Parameter name should be final."},"de.upb.gpa.Checkstyle.687":{"startLine":"75","shortMessage":"'30' is a magic number.","longMessage":"'30' is a magic number."},"de.upb.gpa.Checkstyle.863":{"startLine":"96","shortMessage":"Class 'XMLInjection' looks like designed for extension (can be subclassed), but the method 'handleRequest' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'handleRequest' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'XMLInjection' looks like designed for extension , but the method 'handleRequest' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'handleRequest' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.402":{"startLine":"80","shortMessage":"'20' is a magic number.","longMessage":"'20' is a magic number."},"de.upb.gpa.Checkstyle.864":{"startLine":"131","shortMessage":"Class 'XMLInjection' looks like designed for extension (can be subclassed), but the method 'createContent' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'createContent' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'XMLInjection' looks like designed for extension , but the method 'createContent' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'XMLInjection' final or making the method 'createContent' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.findbugs.MS_SHOULD_BE_FINAL":{"startLine":"61","shortMessage":"Malicious code - Field isn't final but should be","longMessage":"This static field public but not final, andcould be changed by malicious code or by accident from another package. The field could be made final to avoid this vulnerability."},"de.upb.gpa.Checkstyle.2":{"startLine":"292","shortMessage":"Line is longer than 80 characters (found 109).","longMessage":"Line is longer than 80 characters ."},"de.upb.gpa.Checkstyle.861":{"startLine":"90","shortMessage":"'3000' is a magic number.","longMessage":"'3000' is a magic number."},"de.upb.gpa.Checkstyle.862":{"startLine":"91","shortMessage":"'1005' is a magic number.","longMessage":"'1005' is a magic number."},"de.upb.gpa.Checkstyle.3":{"startLine":"64","shortMessage":"Line has trailing spaces.","longMessage":"Line has trailing spaces."},"de.upb.gpa.Checkstyle.860":{"startLine":"86","shortMessage":"'1004' is a magic number.","longMessage":"'1004' is a magic number."},"de.upb.gpa.Checkstyle.6":{"startLine":"57","shortMessage":"File contains tab characters (this is the first instance).","longMessage":"File contains tab characters ."},"de.upb.gpa.Checkstyle.5":{"startLine":"55","shortMessage":"'{' at column 1 should be on the previous line.","longMessage":"'{' at column 1 should be on the previous line."},"de.upb.gpa.Checkstyle.8":{"startLine":"63","shortMessage":"'static' modifier out of order with the JLS suggestions.","longMessage":"'static' modifier out of order with the JLS suggestions."},"de.upb.gpa.Checkstyle.9":{"startLine":"323","shortMessage":"Missing a Javadoc comment.","longMessage":"Missing a Javadoc comment."},"de.upb.gpa.findbugs.ES_COMPARING_STRINGS_WITH_EQ":{"startLine":"133","shortMessage":"Bad practice - Comparison of String objects using == or !=","longMessage":"This code compares java.lang.String objects for referenceequality using the == or != operators.Unless both strings are either constants in a source file, or have beeninterned using the String.intern() method, the same stringvalue may be represented by two different String objects. Considerusing the equals(Object) method instead."},"de.upb.gpa.Checkstyle.858":{"startLine":"81","shortMessage":"'1003' is a magic number.","longMessage":"'1003' is a magic number."},"de.upb.gpa.Checkstyle.859":{"startLine":"85","shortMessage":"'2000' is a magic number.","longMessage":"'2000' is a magic number."},"de.upb.gpa.Checkstyle.62":{"startLine":"247","shortMessage":"'{' at column 6 should be on the previous line.","longMessage":"'{' at column 6 should be on the previous line."}}