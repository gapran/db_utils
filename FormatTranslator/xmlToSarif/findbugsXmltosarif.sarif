{"version":"1.0.0","runs":[{"logicalLocations":{"org::owasp::webgoat::lessons::DBCrossSiteScripting::UpdateProfile::changeEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::DBCrossSiteScripting::UpdateProfile","kind":"function","name":"changeEmployeeProfile"},"org::owasp::webgoat::lessons::SQLInjection::Login":{"parentKey":"org::owasp::webgoat::lessons::SQLInjection","kind":"type","name":"Login"},"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::UpdateProfile_i":{"parentKey":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl","kind":"type","name":"UpdateProfile_i"},"java::sql::ResultSet::doStage2":{"parentKey":"java::sql::ResultSet","kind":"function","name":"doStage2"},"org::owasp::webgoat::lessons::SQLInjection::Login::getAllEmployees":{"parentKey":"org::owasp::webgoat::lessons::SQLInjection::Login","kind":"function","name":"getAllEmployees"},"org::owasp::webgoat::lessons::GoatHillsFinancial::DefaultLessonAction::isAuthorizedForEmployee":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial::DefaultLessonAction","kind":"function","name":"isAuthorizedForEmployee"},"org::owasp::webgoat::lessons::StoredXss::makeList":{"parentKey":"org::owasp::webgoat::lessons::StoredXss","kind":"function","name":"makeList"},"org::owasp::webgoat::lessons::ConcurrencyCart":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"ConcurrencyCart"},"org::owasp::webgoat::lessons::Category::equals":{"parentKey":"org::owasp::webgoat::lessons::Category","kind":"function","name":"equals"},"org::owasp::webgoat::lessons::MaliciousFileExecution::delete":{"parentKey":"org::owasp::webgoat::lessons::MaliciousFileExecution","kind":"function","name":"delete"},"org::owasp::webgoat::lessons::WSDLScanning::getResults":{"parentKey":"org::owasp::webgoat::lessons::WSDLScanning","kind":"function","name":"getResults"},"org::owasp::webgoat::lessons::GoatHillsFinancial::Login::getAllEmployees":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial::Login","kind":"function","name":"getAllEmployees"},"java::sql::ResultSet::makeCurrent":{"parentKey":"java::sql::ResultSet","kind":"function","name":"makeCurrent"},"java::sql::Statement::parameterizedQuery":{"parentKey":"java::sql::Statement","kind":"function","name":"parameterizedQuery"},"org::owasp::webgoat::lessons::admin::RefreshDBScreen":{"parentKey":"org::owasp::webgoat::lessons::admin","kind":"type","name":"RefreshDBScreen"},"java::sql::Statement::createAuthTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createAuthTable"},"java::sql::Statement::createMFEImagesTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createMFEImagesTable"},"org::owasp::webgoat::util::Exec::getBytes":{"parentKey":"org::owasp::webgoat::util::Exec","kind":"function","name":"getBytes"},"org::owasp::webgoat::lessons::SoapRequest::replaceAll":{"parentKey":"org::owasp::webgoat::lessons::SoapRequest","kind":"function","name":"replaceAll"},"org::owasp::webgoat::lessons::JSONInjection":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"JSONInjection"},"org::owasp::webgoat::lessons::PasswordStrength":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"PasswordStrength"},"java::sql::Statement::createUserAdminTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createUserAdminTable"},"org::owasp::webgoat::lessons::MultiLevelLogin1::getUser":{"parentKey":"org::owasp::webgoat::lessons::MultiLevelLogin1","kind":"function","name":"getUser"},"org::owasp::webgoat::lessons::MaliciousFileExecution::handleRequest":{"parentKey":"org::owasp::webgoat::lessons::MaliciousFileExecution","kind":"function","name":"handleRequest"},"org::owasp::webgoat::lessons::instructor::SQLInjection::ViewProfile_i":{"parentKey":"org::owasp::webgoat::lessons::instructor::SQLInjection","kind":"type","name":"ViewProfile_i"},"java::sql::Statement::createRolesTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createRolesTable"},"org::owasp::webgoat::HammerHead":{"parentKey":"org::owasp::webgoat","kind":"type","name":"HammerHead"},"java::io::InputStream":{"parentKey":"java::io","kind":"type","name":"InputStream"},"org::owasp::webgoat::LessonSource":{"parentKey":"org::owasp::webgoat","kind":"type","name":"LessonSource"},"java::sql::Statement::getUserName":{"parentKey":"java::sql::Statement","kind":"function","name":"getUserName"},"java::sql::Statement::getEmployeeProfile":{"parentKey":"java::sql::Statement","kind":"function","name":"getEmployeeProfile"},"org::owasp::webgoat::lessons::NewLesson":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"NewLesson"},"java::sql::Statement::createBlindSQLLessonTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createBlindSQLLessonTable"},"org::owasp::webgoat::lessons::SQLInjection::ViewProfile":{"parentKey":"org::owasp::webgoat::lessons::SQLInjection","kind":"type","name":"ViewProfile"},"java::sql::ResultSet::concept1":{"parentKey":"java::sql::ResultSet","kind":"function","name":"concept1"},"org::owasp::webgoat::util::Interceptor::<init>":{"parentKey":"org::owasp::webgoat::util::Interceptor","kind":"function","name":"<init>"},"java::sql::ResultSet::concept2":{"parentKey":"java::sql::ResultSet","kind":"function","name":"concept2"},"java::sql::Statement::getAllEmployees":{"parentKey":"java::sql::Statement","kind":"function","name":"getAllEmployees"},"java::sql::Statement::deleteEmployeeProfile_BACKUP":{"parentKey":"java::sql::Statement","kind":"function","name":"deleteEmployeeProfile_BACKUP"},"org::owasp::webgoat::lessons::TomcatSetup":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"TomcatSetup"},"org::owasp::webgoat::lessons::admin::UserAdminScreen":{"parentKey":"org::owasp::webgoat::lessons::admin","kind":"type","name":"UserAdminScreen"},"org::owasp::webgoat::lessons::ClientSideValidation::valueOf":{"parentKey":"org::owasp::webgoat::lessons::ClientSideValidation","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::FailOpenAuthentication::getRawParameter":{"parentKey":"org::owasp::webgoat::lessons::FailOpenAuthentication","kind":"function","name":"getRawParameter"},"java::sql::ResultSet::makeList":{"parentKey":"java::sql::ResultSet","kind":"function","name":"makeList"},"org::owasp::webgoat::lessons::WeakSessionID::encode":{"parentKey":"org::owasp::webgoat::lessons::WeakSessionID","kind":"function","name":"encode"},"org::owasp::webgoat::lessons::AbstractLesson::<init>":{"parentKey":"org::owasp::webgoat::lessons::AbstractLesson","kind":"function","name":"<init>"},"org::owasp::webgoat::lessons::BlindScript::executeQuery":{"parentKey":"org::owasp::webgoat::lessons::BlindScript","kind":"function","name":"executeQuery"},"org::owasp::webgoat::session::Course":{"parentKey":"org::owasp::webgoat::session","kind":"type","name":"Course"},"org::owasp::webgoat::lessons::SqlNumericInjection":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"SqlNumericInjection"},"org::owasp::webgoat::lessons::OffByOne":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"OffByOne"},"org::owasp::webgoat::session::ParameterParser::getBooleanParameter":{"parentKey":"org::owasp::webgoat::session::ParameterParser","kind":"function","name":"getBooleanParameter"},"org::owasp::webgoat::lessons::Encoding::decryptString":{"parentKey":"org::owasp::webgoat::lessons::Encoding","kind":"function","name":"decryptString"},"org::owasp::webgoat::lessons::MultiLevelLogin2::correctLogin":{"parentKey":"org::owasp::webgoat::lessons::MultiLevelLogin2","kind":"function","name":"correctLogin"},"org::owasp::webgoat::Catcher::doPost":{"parentKey":"org::owasp::webgoat::Catcher","kind":"function","name":"doPost"},"org::owasp::webgoat::lessons::GoatHillsFinancial::DeleteProfile":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial","kind":"type","name":"DeleteProfile"},"org::owasp::webgoat::session::WebgoatProperties::main":{"parentKey":"org::owasp::webgoat::session::WebgoatProperties","kind":"function","name":"main"},"org::owasp::webgoat::lessons::DBCrossSiteScripting":{"parentKey":"org::owasp::webgoat::lessons","kind":"namespace","name":"DBCrossSiteScripting"},"org::owasp::webgoat::lessons::ClientSideFiltering":{"parentKey":"org::owasp::webgoat::lessons","kind":"namespace","name":"ClientSideFiltering"},"org::owasp::webgoat::lessons::GoatHillsFinancial::UpdateProfile":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial","kind":"type","name":"UpdateProfile"},"java::sql::ResultSet::getTanPosition":{"parentKey":"java::sql::ResultSet","kind":"function","name":"getTanPosition"},"org::owasp::webgoat::lessons::admin::ViewDatabase::createContent":{"parentKey":"org::owasp::webgoat::lessons::admin::ViewDatabase","kind":"function","name":"createContent"},"java::sql::Statement::createProductTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createProductTable"},"org::owasp::webgoat::lessons::BlindStringSqlInjection::valueOf":{"parentKey":"org::owasp::webgoat::lessons::BlindStringSqlInjection","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::ForcedBrowsing::createContent":{"parentKey":"org::owasp::webgoat::lessons::ForcedBrowsing","kind":"function","name":"createContent"},"org::owasp::webgoat::lessons::MaliciousFileExecution":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"MaliciousFileExecution"},"org::owasp::webgoat::lessons::SqlStringInjection::valueOf":{"parentKey":"org::owasp::webgoat::lessons::SqlStringInjection","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::HttpSplitting::valueOf":{"parentKey":"org::owasp::webgoat::lessons::HttpSplitting","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::DOMInjection::valueOf":{"parentKey":"org::owasp::webgoat::lessons::DOMInjection","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::SoapRequest":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"SoapRequest"},"org::owasp::webgoat::lessons::DOS_Login::valueOf":{"parentKey":"org::owasp::webgoat::lessons::DOS_Login","kind":"function","name":"valueOf"},"org::owasp::webgoat::session::Course::getLanguageFromFileName":{"parentKey":"org::owasp::webgoat::session::Course","kind":"function","name":"getLanguageFromFileName"},"org::owasp::webgoat::lessons::admin::UserAdminScreen::createContent":{"parentKey":"org::owasp::webgoat::lessons::admin::UserAdminScreen","kind":"function","name":"createContent"},"java::sql::Statement::correctTan":{"parentKey":"java::sql::Statement","kind":"function","name":"correctTan"},"org::owasp::webgoat::lessons::PathBasedAccessControl::<init>":{"parentKey":"org::owasp::webgoat::lessons::PathBasedAccessControl","kind":"function","name":"<init>"},"org::owasp::webgoat::session::ParameterParser":{"parentKey":"org::owasp::webgoat::session","kind":"type","name":"ParameterParser"},"org::owasp::webgoat::lessons::DBSQLInjection::Login::getAllEmployees":{"parentKey":"org::owasp::webgoat::lessons::DBSQLInjection::Login","kind":"function","name":"getAllEmployees"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::DeleteProfile":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl","kind":"type","name":"DeleteProfile"},"org::owasp::webgoat::lessons::MultiLevelLogin2::updateTan":{"parentKey":"org::owasp::webgoat::lessons::MultiLevelLogin2","kind":"function","name":"updateTan"},"java::sql::ResultSet::correctTan":{"parentKey":"java::sql::ResultSet","kind":"function","name":"correctTan"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::UpdateProfile::createEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl::UpdateProfile","kind":"function","name":"createEmployeeProfile"},"org::owasp::webgoat::lessons::SqlNumericInjection::parameterizedQuery":{"parentKey":"org::owasp::webgoat::lessons::SqlNumericInjection","kind":"function","name":"parameterizedQuery"},"java::sql::Statement::findEmployeeProfile":{"parentKey":"java::sql::Statement","kind":"function","name":"findEmployeeProfile"},"org::owasp::webgoat::lessons::GoatHillsFinancial::GoatHillsFinancial":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial","kind":"type","name":"GoatHillsFinancial"},"org::owasp::webgoat::lessons::SilentTransactions":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"SilentTransactions"},"org::owasp::webgoat::lessons::WsSqlInjection":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"WsSqlInjection"},"org::owasp::webgoat::lessons::BlindNumericSqlInjection::createContent":{"parentKey":"org::owasp::webgoat::lessons::BlindNumericSqlInjection","kind":"function","name":"createContent"},"org::owasp::webgoat::lessons::DangerousEval::valueOf":{"parentKey":"org::owasp::webgoat::lessons::DangerousEval","kind":"function","name":"valueOf"},"java::sql::ResultSet::login":{"parentKey":"java::sql::ResultSet","kind":"function","name":"login"},"org::owasp::webgoat::lessons::instructor::SQLInjection::Login_i::login":{"parentKey":"org::owasp::webgoat::lessons::instructor::SQLInjection::Login_i","kind":"function","name":"login"},"java::io":{"parentKey":"java","kind":"namespace","name":"io"},"org::owasp::webgoat::lessons::ClientSideFiltering::ClientSideFiltering::<init>":{"parentKey":"org::owasp::webgoat::lessons::ClientSideFiltering::ClientSideFiltering","kind":"function","name":"<init>"},"org::owasp::webgoat::lessons::ClientSideValidation":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"ClientSideValidation"},"org::owasp::webgoat::lessons::SQLInjection::SQLInjection":{"parentKey":"org::owasp::webgoat::lessons::SQLInjection","kind":"type","name":"SQLInjection"},"org::owasp::webgoat::lessons::AbstractLesson::isAuthorized":{"parentKey":"org::owasp::webgoat::lessons::AbstractLesson","kind":"function","name":"isAuthorized"},"org::owasp::webgoat::lessons::ConcurrencyCart::valueOf":{"parentKey":"org::owasp::webgoat::lessons::ConcurrencyCart","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::DOS_Login":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"DOS_Login"},"org::owasp::webgoat::lessons::UncheckedEmail":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"UncheckedEmail"},"org::owasp::webgoat::lessons::Challenge2Screen::<init>":{"parentKey":"org::owasp::webgoat::lessons::Challenge2Screen","kind":"function","name":"<init>"},"java::sql::Statement::createEmployeeTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createEmployeeTable"},"org::owasp::webgoat::lessons::ThreadSafetyProblem":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"ThreadSafetyProblem"},"org::owasp::webgoat::lessons::PathBasedAccessControl":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"PathBasedAccessControl"},"org::owasp::webgoat::lessons::BackDoors":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"BackDoors"},"org::owasp::webgoat::lessons::SqlAddData::createContent":{"parentKey":"org::owasp::webgoat::lessons::SqlAddData","kind":"function","name":"createContent"},"java::sql::Statement::login_BACKUP":{"parentKey":"java::sql::Statement","kind":"function","name":"login_BACKUP"},"org::owasp::webgoat::lessons::FailOpenAuthentication::valueOf":{"parentKey":"org::owasp::webgoat::lessons::FailOpenAuthentication","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::PathBasedAccessControl::createContent":{"parentKey":"org::owasp::webgoat::lessons::PathBasedAccessControl","kind":"function","name":"createContent"},"org::owasp::webgoat::lessons::GoatHillsFinancial":{"parentKey":"org::owasp::webgoat::lessons","kind":"namespace","name":"GoatHillsFinancial"},"org::owasp::webgoat::lessons::SoapRequest::getLastName":{"parentKey":"org::owasp::webgoat::lessons::SoapRequest","kind":"function","name":"getLastName"},"org::owasp::webgoat::lessons::WsSqlInjection::getResults":{"parentKey":"org::owasp::webgoat::lessons::WsSqlInjection","kind":"function","name":"getResults"},"org::owasp::webgoat::lessons::LogSpoofing":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"LogSpoofing"},"org::owasp::webgoat::lessons::SoapRequest::getResults":{"parentKey":"org::owasp::webgoat::lessons::SoapRequest","kind":"function","name":"getResults"},"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::UpdateProfile_i::changeEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::UpdateProfile_i","kind":"function","name":"changeEmployeeProfile"},"org::owasp::webgoat::lessons::LessonAdapter":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"LessonAdapter"},"org::owasp::webgoat::lessons::SameOriginPolicyProtection::valueOf":{"parentKey":"org::owasp::webgoat::lessons::SameOriginPolicyProtection","kind":"function","name":"valueOf"},"java::sql::Statement::changeEmployeeProfile":{"parentKey":"java::sql::Statement","kind":"function","name":"changeEmployeeProfile"},"org::owasp::webgoat::lessons::BlindStringSqlInjection":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"BlindStringSqlInjection"},"org::owasp::webgoat::lessons::HiddenFieldTampering":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"HiddenFieldTampering"},"org::owasp::webgoat::lessons::HttpOnly::valueOf":{"parentKey":"org::owasp::webgoat::lessons::HttpOnly","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::DBCrossSiteScripting::UpdateProfile::createEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::DBCrossSiteScripting::UpdateProfile","kind":"function","name":"createEmployeeProfile"},"org::owasp::webgoat::session::WebgoatContext::<init>":{"parentKey":"org::owasp::webgoat::session::WebgoatContext","kind":"function","name":"<init>"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::UpdateProfile::changeEmployeeProfile_BACKUP":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl::UpdateProfile","kind":"function","name":"changeEmployeeProfile_BACKUP"},"org::owasp::webgoat::session::Authorization":{"parentKey":"org::owasp::webgoat::session","kind":"type","name":"Authorization"},"java::sql::Statement::createTanUserDataTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createTanUserDataTable"},"org::owasp::webgoat::lessons::DOMInjection":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"DOMInjection"},"org::owasp::webgoat::lessons::HttpSplitting":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"HttpSplitting"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::RoleBasedAccessControl::handleRequest":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl::RoleBasedAccessControl","kind":"function","name":"handleRequest"},"org::owasp::webgoat::lessons::TraceXSS":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"TraceXSS"},"java::sql::Statement":{"parentKey":"java::sql","kind":"type","name":"Statement"},"org::owasp::webgoat::lessons::MaliciousFileExecution::restartLesson":{"parentKey":"org::owasp::webgoat::lessons::MaliciousFileExecution","kind":"function","name":"restartLesson"},"org::owasp::webgoat::lessons::HttpBasics::createContent":{"parentKey":"org::owasp::webgoat::lessons::HttpBasics","kind":"function","name":"createContent"},"java::sql::ResultSet::getEmployeeProfile":{"parentKey":"java::sql::ResultSet","kind":"function","name":"getEmployeeProfile"},"org::owasp::webgoat::session::DatabaseUtilities::getHsqldbConnection":{"parentKey":"org::owasp::webgoat::session::DatabaseUtilities","kind":"function","name":"getHsqldbConnection"},"java::sql::Statement::concept1":{"parentKey":"java::sql::Statement","kind":"function","name":"concept1"},"java::sql::Statement::concept2":{"parentKey":"java::sql::Statement","kind":"function","name":"concept2"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::UpdateProfile::getNextUID":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl::UpdateProfile","kind":"function","name":"getNextUID"},"org::owasp::webgoat::lessons::XMLInjection::valueOf":{"parentKey":"org::owasp::webgoat::lessons::XMLInjection","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::admin::SummaryReportCardScreen":{"parentKey":"org::owasp::webgoat::lessons::admin","kind":"type","name":"SummaryReportCardScreen"},"java::sql::Statement::getEmployeeProfile_BACKUP":{"parentKey":"java::sql::Statement","kind":"function","name":"getEmployeeProfile_BACKUP"},"org::owasp::webgoat::lessons::XPATHInjection":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"XPATHInjection"},"org::owasp::webgoat::lessons::BlindScript::executeTimeTrigger":{"parentKey":"org::owasp::webgoat::lessons::BlindScript","kind":"function","name":"executeTimeTrigger"},"java::sql::Statement::doStage2":{"parentKey":"java::sql::Statement","kind":"function","name":"doStage2"},"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile::doChangeEmployeeProfile_BACKUP":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile","kind":"function","name":"doChangeEmployeeProfile_BACKUP"},"org::owasp::webgoat::util::Exec":{"parentKey":"org::owasp::webgoat::util","kind":"type","name":"Exec"},"org::owasp::webgoat::lessons::BasicAuthentication::doStage1":{"parentKey":"org::owasp::webgoat::lessons::BasicAuthentication","kind":"function","name":"doStage1"},"java::sql::ResultSet::findEmployeeProfile":{"parentKey":"java::sql::ResultSet","kind":"function","name":"findEmployeeProfile"},"org::owasp::webgoat::lessons::GoatHillsFinancial::DeleteProfile::deleteEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial::DeleteProfile","kind":"function","name":"deleteEmployeeProfile"},"java::io::Writer":{"parentKey":"java::io","kind":"type","name":"Writer"},"org::owasp::webgoat::lessons::WeakSessionID":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"WeakSessionID"},"org::owasp::webgoat::util::Exec::execOptions":{"parentKey":"org::owasp::webgoat::util::Exec","kind":"function","name":"execOptions"},"org::owasp::webgoat::lessons":{"parentKey":"org::owasp::webgoat","kind":"namespace","name":"lessons"},"org::owasp::webgoat::lessons::InsecureLogin::correctLogin":{"parentKey":"org::owasp::webgoat::lessons::InsecureLogin","kind":"function","name":"correctLogin"},"org::owasp::webgoat::lessons::MultiLevelLogin2::getTanPosition":{"parentKey":"org::owasp::webgoat::lessons::MultiLevelLogin2","kind":"function","name":"getTanPosition"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::DeleteProfile::deleteEmployeeProfile_BACKUP":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl::DeleteProfile","kind":"function","name":"deleteEmployeeProfile_BACKUP"},"org::owasp::webgoat::HammerHead::writeScreen":{"parentKey":"org::owasp::webgoat::HammerHead","kind":"function","name":"writeScreen"},"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile::changeEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile","kind":"function","name":"changeEmployeeProfile"},"org::owasp::webgoat::session::ECSFactory::makeLink":{"parentKey":"org::owasp::webgoat::session::ECSFactory","kind":"function","name":"makeLink"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::ViewProfile::getEmployeeProfile_BACKUP":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl::ViewProfile","kind":"function","name":"getEmployeeProfile_BACKUP"},"java::sql::Statement::injectableQuery":{"parentKey":"java::sql::Statement","kind":"function","name":"injectableQuery"},"org::owasp::webgoat::lessons::Encoding::valueOf":{"parentKey":"org::owasp::webgoat::lessons::Encoding","kind":"function","name":"valueOf"},"java::sql::Statement::executeTimeTrigger":{"parentKey":"java::sql::Statement","kind":"function","name":"executeTimeTrigger"},"org::owasp::webgoat::util::HtmlEncoder":{"parentKey":"org::owasp::webgoat::util","kind":"type","name":"HtmlEncoder"},"org::owasp::webgoat::lessons::WeakSessionID::valueOf":{"parentKey":"org::owasp::webgoat::lessons::WeakSessionID","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::CrossSiteScripting":{"parentKey":"org::owasp::webgoat::lessons","kind":"namespace","name":"CrossSiteScripting"},"org::owasp::webgoat::lessons::WeakAuthenticationCookie::valueOf":{"parentKey":"org::owasp::webgoat::lessons::WeakAuthenticationCookie","kind":"function","name":"valueOf"},"java::sql::ResultSet::getEmployeeProfile_BACKUP":{"parentKey":"java::sql::ResultSet","kind":"function","name":"getEmployeeProfile_BACKUP"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::ViewProfile::getEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl::ViewProfile","kind":"function","name":"getEmployeeProfile"},"org::owasp::webgoat::lessons::CrossSiteScripting::EditProfile::getEmployeeProfile_BACKUP":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting::EditProfile","kind":"function","name":"getEmployeeProfile_BACKUP"},"org::owasp::webgoat::lessons::LessonAdapter::createContent":{"parentKey":"org::owasp::webgoat::lessons::LessonAdapter","kind":"function","name":"createContent"},"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::DeleteProfile_i::doDeleteEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::DeleteProfile_i","kind":"function","name":"doDeleteEmployeeProfile"},"org::owasp::webgoat::lessons::DOMInjection::<init>":{"parentKey":"org::owasp::webgoat::lessons::DOMInjection","kind":"function","name":"<init>"},"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::UpdateProfile_i::createEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::UpdateProfile_i","kind":"function","name":"createEmployeeProfile"},"java::sql::ResultSet::createContent":{"parentKey":"java::sql::ResultSet","kind":"function","name":"createContent"},"org::owasp::webgoat::session::ECSFactory::toString":{"parentKey":"org::owasp::webgoat::session::ECSFactory","kind":"function","name":"toString"},"org::owasp::webgoat::util::Interceptor":{"parentKey":"org::owasp::webgoat::util","kind":"type","name":"Interceptor"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::RoleBasedAccessControl":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl","kind":"type","name":"RoleBasedAccessControl"},"org::owasp::webgoat::session::WebSession":{"parentKey":"org::owasp::webgoat::session","kind":"type","name":"WebSession"},"org::owasp::webgoat::lessons::CrossSiteScripting::ViewProfile":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting","kind":"type","name":"ViewProfile"},"org::owasp::webgoat::lessons::CommandInjection::valueOf":{"parentKey":"org::owasp::webgoat::lessons::CommandInjection","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::TomcatSetup::valueOf":{"parentKey":"org::owasp::webgoat::lessons::TomcatSetup","kind":"function","name":"valueOf"},"org::owasp::webgoat::session::ErrorScreen::toString":{"parentKey":"org::owasp::webgoat::session::ErrorScreen","kind":"function","name":"toString"},"org::owasp::webgoat::lessons::CrossSiteScripting::ViewProfile::getEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting::ViewProfile","kind":"function","name":"getEmployeeProfile"},"org::owasp::webgoat::lessons::admin::ViewDatabase":{"parentKey":"org::owasp::webgoat::lessons::admin","kind":"type","name":"ViewDatabase"},"org::owasp::webgoat::session::ErrorScreen::<init>":{"parentKey":"org::owasp::webgoat::session::ErrorScreen","kind":"function","name":"<init>"},"org::owasp::webgoat::lessons::AbstractLesson":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"AbstractLesson"},"org::owasp::webgoat::lessons::HtmlClues::valueOf":{"parentKey":"org::owasp::webgoat::lessons::HtmlClues","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::SoapRequest::getLoginCount":{"parentKey":"org::owasp::webgoat::lessons::SoapRequest","kind":"function","name":"getLoginCount"},"org::owasp::webgoat::util::WebGoatI18N":{"parentKey":"org::owasp::webgoat::util","kind":"type","name":"WebGoatI18N"},"org::owasp::webgoat::lessons::CsrfTokenByPass::valueOf":{"parentKey":"org::owasp::webgoat::lessons::CsrfTokenByPass","kind":"function","name":"valueOf"},"java::lang::Exception::executeSpyWare":{"parentKey":"java::lang::Exception","kind":"function","name":"executeSpyWare"},"java::sql::Statement::createLoginTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createLoginTable"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::DeleteProfile::deleteEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl::DeleteProfile","kind":"function","name":"deleteEmployeeProfile"},"java::sql::ResultSet::injectableQuery":{"parentKey":"java::sql::ResultSet","kind":"function","name":"injectableQuery"},"org::owasp::webgoat::lessons::GoatHillsFinancial::ListStaff::getAllEmployees":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial::ListStaff","kind":"function","name":"getAllEmployees"},"org::owasp::webgoat::lessons::GoatHillsFinancial::ViewProfile":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial","kind":"type","name":"ViewProfile"},"org::owasp::webgoat::lessons::MultiLevelLogin1::updateTan":{"parentKey":"org::owasp::webgoat::lessons::MultiLevelLogin1","kind":"function","name":"updateTan"},"org::owasp::webgoat::lessons::MultiLevelLogin2::valueOf":{"parentKey":"org::owasp::webgoat::lessons::MultiLevelLogin2","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::LessonAdapter::<init>":{"parentKey":"org::owasp::webgoat::lessons::LessonAdapter","kind":"function","name":"<init>"},"org::owasp::webgoat::lessons::GoatHillsFinancial::ListStaff":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial","kind":"type","name":"ListStaff"},"java::sql::Statement::getAllEmployees_BACKUP":{"parentKey":"java::sql::Statement","kind":"function","name":"getAllEmployees_BACKUP"},"org::owasp::webgoat::lessons::WeakAuthenticationCookie":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"WeakAuthenticationCookie"},"org::owasp::webgoat::lessons::XPATHInjection::valueOf":{"parentKey":"org::owasp::webgoat::lessons::XPATHInjection","kind":"function","name":"valueOf"},"org::owasp::webgoat::session::ECSFactory":{"parentKey":"org::owasp::webgoat::session","kind":"type","name":"ECSFactory"},"java::sql::Statement::login":{"parentKey":"java::sql::Statement","kind":"function","name":"login"},"org::owasp::webgoat::lessons::WsSAXInjection":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"WsSAXInjection"},"org::owasp::webgoat::lessons::SessionFixation::correctLogin":{"parentKey":"org::owasp::webgoat::lessons::SessionFixation","kind":"function","name":"correctLogin"},"org::owasp::webgoat::lessons::NewLesson::valueOf":{"parentKey":"org::owasp::webgoat::lessons::NewLesson","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::SQLInjection::SQLInjection::<init>":{"parentKey":"org::owasp::webgoat::lessons::SQLInjection::SQLInjection","kind":"function","name":"<init>"},"org::owasp::webgoat::lessons::DangerousEval::createContent":{"parentKey":"org::owasp::webgoat::lessons::DangerousEval","kind":"function","name":"createContent"},"org::owasp::webgoat::lessons::admin::ReportCardScreen":{"parentKey":"org::owasp::webgoat::lessons::admin","kind":"type","name":"ReportCardScreen"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::RoleBasedAccessControl::valueOf":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl::RoleBasedAccessControl","kind":"function","name":"valueOf"},"java::sql::Statement::correctLogin":{"parentKey":"java::sql::Statement","kind":"function","name":"correctLogin"},"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::RoleBasedAccessControl_i":{"parentKey":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl","kind":"type","name":"RoleBasedAccessControl_i"},"org::owasp::webgoat::lessons::HttpBasics::valueOf":{"parentKey":"org::owasp::webgoat::lessons::HttpBasics","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::WeakAuthenticationCookie::checkParams":{"parentKey":"org::owasp::webgoat::lessons::WeakAuthenticationCookie","kind":"function","name":"checkParams"},"org::owasp::webgoat::session::WebgoatProperties":{"parentKey":"org::owasp::webgoat::session","kind":"type","name":"WebgoatProperties"},"org::owasp::webgoat::lessons::ForgotPassword::valueOf":{"parentKey":"org::owasp::webgoat::lessons::ForgotPassword","kind":"function","name":"valueOf"},"org::owasp::webgoat":{"parentKey":"org::owasp","kind":"namespace","name":"webgoat"},"org::owasp::webgoat::lessons::instructor":{"parentKey":"org::owasp::webgoat::lessons","kind":"namespace","name":"instructor"},"org::owasp::webgoat::lessons::WSDLScanning::setWebgoatContext":{"parentKey":"org::owasp::webgoat::lessons::WSDLScanning","kind":"function","name":"setWebgoatContext"},"java::lang::Exception::executeTimeTrigger":{"parentKey":"java::lang::Exception","kind":"function","name":"executeTimeTrigger"},"org::owasp::webgoat::lessons::PasswordStrength::valueOf":{"parentKey":"org::owasp::webgoat::lessons::PasswordStrength","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::StoredXss::valueOf":{"parentKey":"org::owasp::webgoat::lessons::StoredXss","kind":"function","name":"valueOf"},"java::sql::Statement::createMessageTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createMessageTable"},"org::owasp::webgoat::lessons::HiddenFieldTampering::valueOf":{"parentKey":"org::owasp::webgoat::lessons::HiddenFieldTampering","kind":"function","name":"valueOf"},"java::sql::Statement::isAuthorizedForEmployee":{"parentKey":"java::sql::Statement","kind":"function","name":"isAuthorizedForEmployee"},"org::owasp::webgoat::lessons::Phishing::valueOf":{"parentKey":"org::owasp::webgoat::lessons::Phishing","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::ReflectedXSS::valueOf":{"parentKey":"org::owasp::webgoat::lessons::ReflectedXSS","kind":"function","name":"valueOf"},"java::sql::Statement::doChangeEmployeeProfile_BACKUP":{"parentKey":"java::sql::Statement","kind":"function","name":"doChangeEmployeeProfile_BACKUP"},"org::owasp::webgoat::lessons::BlindScript::<init>":{"parentKey":"org::owasp::webgoat::lessons::BlindScript","kind":"function","name":"<init>"},"org::owasp::webgoat::lessons::CSRF::makeList":{"parentKey":"org::owasp::webgoat::lessons::CSRF","kind":"function","name":"makeList"},"org::owasp::webgoat::lessons::PathBasedAccessControl::valueOf":{"parentKey":"org::owasp::webgoat::lessons::PathBasedAccessControl","kind":"function","name":"valueOf"},"org::owasp::webgoat::session::LessonTracker::getTrackerFile":{"parentKey":"org::owasp::webgoat::session::LessonTracker","kind":"function","name":"getTrackerFile"},"org::owasp::webgoat::lessons::CrossSiteScripting::CrossSiteScripting":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting","kind":"type","name":"CrossSiteScripting"},"org::owasp::webgoat::lessons::SQLInjection::ListStaff":{"parentKey":"org::owasp::webgoat::lessons::SQLInjection","kind":"type","name":"ListStaff"},"java::sql::ResultSet::parameterizedQuery":{"parentKey":"java::sql::ResultSet","kind":"function","name":"parameterizedQuery"},"org::owasp::webgoat::lessons::BlindScript::valueOf":{"parentKey":"org::owasp::webgoat::lessons::BlindScript","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::CSRF::makeCurrent":{"parentKey":"org::owasp::webgoat::lessons::CSRF","kind":"function","name":"makeCurrent"},"org::owasp::webgoat::lessons::SQLInjection::ListStaff::getAllEmployees_BACKUP":{"parentKey":"org::owasp::webgoat::lessons::SQLInjection::ListStaff","kind":"function","name":"getAllEmployees_BACKUP"},"org::owasp::webgoat::lessons::StoredXss::addMessage":{"parentKey":"org::owasp::webgoat::lessons::StoredXss","kind":"function","name":"addMessage"},"org::owasp::webgoat::lessons::Encoding::getBytes":{"parentKey":"org::owasp::webgoat::lessons::Encoding","kind":"function","name":"getBytes"},"java::sql::ResultSet::getResults":{"parentKey":"java::sql::ResultSet","kind":"function","name":"getResults"},"org::owasp::webgoat::lessons::BlindNumericSqlInjection::valueOf":{"parentKey":"org::owasp::webgoat::lessons::BlindNumericSqlInjection","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::Challenge2Screen::doStage2":{"parentKey":"org::owasp::webgoat::lessons::Challenge2Screen","kind":"function","name":"doStage2"},"org::owasp::webgoat::lessons::BasicAuthentication::valueOf":{"parentKey":"org::owasp::webgoat::lessons::BasicAuthentication","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::ReflectedXSS":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"ReflectedXSS"},"org::owasp::webgoat::lessons::BypassHtmlFieldRestrictions":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"BypassHtmlFieldRestrictions"},"org::owasp::webgoat::lessons::ForgotPassword":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"ForgotPassword"},"java::io::InputStream::<init>":{"parentKey":"java::io::InputStream","kind":"function","name":"<init>"},"org::owasp::webgoat::lessons::BlindScript::delete":{"parentKey":"org::owasp::webgoat::lessons::BlindScript","kind":"function","name":"delete"},"org::owasp::webgoat::lessons::WsSqlInjection::getCreditCard":{"parentKey":"org::owasp::webgoat::lessons::WsSqlInjection","kind":"function","name":"getCreditCard"},"org::owasp::webgoat::lessons::XMLInjection::getRawParameter":{"parentKey":"org::owasp::webgoat::lessons::XMLInjection","kind":"function","name":"getRawParameter"},"org::owasp::webgoat::lessons::GoatHillsFinancial::FindProfile::findEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial::FindProfile","kind":"function","name":"findEmployeeProfile"},"org::owasp::webgoat::lessons::SqlNumericInjection::valueOf":{"parentKey":"org::owasp::webgoat::lessons::SqlNumericInjection","kind":"function","name":"valueOf"},"java":{"kind":"namespace","name":"java"},"org::owasp::webgoat::lessons::admin::ProductsAdminScreen":{"parentKey":"org::owasp::webgoat::lessons::admin","kind":"type","name":"ProductsAdminScreen"},"org::owasp::webgoat::lessons::StoredXss::makeCurrent":{"parentKey":"org::owasp::webgoat::lessons::StoredXss","kind":"function","name":"makeCurrent"},"java::sql::Statement::getTanPosition":{"parentKey":"java::sql::Statement","kind":"function","name":"getTanPosition"},"java::sql::Statement::getNextUID":{"parentKey":"java::sql::Statement","kind":"function","name":"getNextUID"},"java::sql::Statement::createWeatherDataTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createWeatherDataTable"},"org::owasp::webgoat::lessons::HowToWork":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"HowToWork"},"org::owasp::webgoat::lessons::MaliciousFileExecution::mkdir":{"parentKey":"org::owasp::webgoat::lessons::MaliciousFileExecution","kind":"function","name":"mkdir"},"org::owasp::webgoat::lessons::SilentTransactions::<init>":{"parentKey":"org::owasp::webgoat::lessons::SilentTransactions","kind":"function","name":"<init>"},"java::sql::ResultSet::isAuthorized":{"parentKey":"java::sql::ResultSet","kind":"function","name":"isAuthorized"},"java::sql::ResultSet::getAllEmployees":{"parentKey":"java::sql::ResultSet","kind":"function","name":"getAllEmployees"},"org::owasp::webgoat::lessons::ClientSideFiltering::ClientSideFiltering":{"parentKey":"org::owasp::webgoat::lessons::ClientSideFiltering","kind":"type","name":"ClientSideFiltering"},"org::owasp::webgoat::lessons::SQLInjection::ViewProfile::getEmployeeProfile_BACKUP":{"parentKey":"org::owasp::webgoat::lessons::SQLInjection::ViewProfile","kind":"function","name":"getEmployeeProfile_BACKUP"},"java::sql::Statement::getStations":{"parentKey":"java::sql::Statement","kind":"function","name":"getStations"},"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::EditProfile_i":{"parentKey":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl","kind":"type","name":"EditProfile_i"},"org::owasp::webgoat::lessons::JavaScriptValidation::valueOf":{"parentKey":"org::owasp::webgoat::lessons::JavaScriptValidation","kind":"function","name":"valueOf"},"java::sql":{"parentKey":"java","kind":"namespace","name":"sql"},"org::owasp::webgoat::lessons::WSDLScanning::valueOf":{"parentKey":"org::owasp::webgoat::lessons::WSDLScanning","kind":"function","name":"valueOf"},"org::owasp::webgoat::util::Exec::toString":{"parentKey":"org::owasp::webgoat::util::Exec","kind":"function","name":"toString"},"org::owasp::webgoat::lessons::DBSQLInjection":{"parentKey":"org::owasp::webgoat::lessons","kind":"namespace","name":"DBSQLInjection"},"org::owasp::webgoat::lessons::SqlStringInjection::parameterizedQuery":{"parentKey":"org::owasp::webgoat::lessons::SqlStringInjection","kind":"function","name":"parameterizedQuery"},"org::owasp::webgoat::lessons::BackDoors::valueOf":{"parentKey":"org::owasp::webgoat::lessons::BackDoors","kind":"function","name":"valueOf"},"java::sql::Statement::getResults":{"parentKey":"java::sql::Statement","kind":"function","name":"getResults"},"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::RoleBasedAccessControl_i::handleRequest":{"parentKey":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::RoleBasedAccessControl_i","kind":"function","name":"handleRequest"},"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::ViewProfile_i::getEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::ViewProfile_i","kind":"function","name":"getEmployeeProfile"},"org::owasp::webgoat::HammerHead::returnConnection":{"parentKey":"org::owasp::webgoat::HammerHead","kind":"function","name":"returnConnection"},"org::owasp::webgoat::lessons::AccessControlMatrix::valueOf":{"parentKey":"org::owasp::webgoat::lessons::AccessControlMatrix","kind":"function","name":"valueOf"},"org::owasp::webgoat::util::HtmlEncoder::valueOf":{"parentKey":"org::owasp::webgoat::util::HtmlEncoder","kind":"function","name":"valueOf"},"java::sql::Statement::createEmployeeProfile_BACKUP":{"parentKey":"java::sql::Statement","kind":"function","name":"createEmployeeProfile_BACKUP"},"org::owasp::webgoat::lessons::GoatHillsFinancial::UpdateProfile::getNextUID":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial::UpdateProfile","kind":"function","name":"getNextUID"},"org::owasp::webgoat::lessons::HowToWork::valueOf":{"parentKey":"org::owasp::webgoat::lessons::HowToWork","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::DangerousEval":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"DangerousEval"},"org::owasp::webgoat::lessons::UsefulTools":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"UsefulTools"},"org::owasp::webgoat::lessons::SoapRequest::setWebgoatContext":{"parentKey":"org::owasp::webgoat::lessons::SoapRequest","kind":"function","name":"setWebgoatContext"},"org::owasp::webgoat::session::WebSession::<init>":{"parentKey":"org::owasp::webgoat::session::WebSession","kind":"function","name":"<init>"},"org::owasp::webgoat::lessons::CsrfPromptByPass":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"CsrfPromptByPass"},"org::owasp::webgoat::lessons::DOMXSS":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"DOMXSS"},"org::owasp::webgoat::lessons::WSDLScanning":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"WSDLScanning"},"org::owasp::webgoat::lessons::ForcedBrowsing::valueOf":{"parentKey":"org::owasp::webgoat::lessons::ForcedBrowsing","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::SqlModifyData::valueOf":{"parentKey":"org::owasp::webgoat::lessons::SqlModifyData","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::SqlNumericInjection::injectableQuery":{"parentKey":"org::owasp::webgoat::lessons::SqlNumericInjection","kind":"function","name":"injectableQuery"},"java::lang":{"parentKey":"java","kind":"namespace","name":"lang"},"org::owasp::webgoat::lessons::BlindScript::executeEventTrigger":{"parentKey":"org::owasp::webgoat::lessons::BlindScript","kind":"function","name":"executeEventTrigger"},"java::sql::Statement::createTransactionTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createTransactionTable"},"org::owasp::webgoat::lessons::BypassHtmlFieldRestrictions::valueOf":{"parentKey":"org::owasp::webgoat::lessons::BypassHtmlFieldRestrictions","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::BypassHtmlFieldRestrictions::createContent":{"parentKey":"org::owasp::webgoat::lessons::BypassHtmlFieldRestrictions","kind":"function","name":"createContent"},"java::sql::ResultSet::getTan":{"parentKey":"java::sql::ResultSet","kind":"function","name":"getTan"},"org::owasp::webgoat::lessons::MaliciousFileExecution::valueOf":{"parentKey":"org::owasp::webgoat::lessons::MaliciousFileExecution","kind":"function","name":"valueOf"},"java::lang::Exception":{"parentKey":"java::lang","kind":"type","name":"Exception"},"org::owasp::webgoat::lessons::HtmlClues":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"HtmlClues"},"org::owasp::webgoat::lessons::DOMXSS::valueOf":{"parentKey":"org::owasp::webgoat::lessons::DOMXSS","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::LogSpoofing::valueOf":{"parentKey":"org::owasp::webgoat::lessons::LogSpoofing","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::instructor::SQLInjection":{"parentKey":"org::owasp::webgoat::lessons::instructor","kind":"namespace","name":"SQLInjection"},"org::owasp::webgoat::lessons::GoatHillsFinancial::ViewProfile::getEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial::ViewProfile","kind":"function","name":"getEmployeeProfile"},"org::owasp::webgoat::lessons::CrossSiteScripting::ViewProfile::getEmployeeProfile_BACKUP":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting::ViewProfile","kind":"function","name":"getEmployeeProfile_BACKUP"},"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::DeleteProfile_i":{"parentKey":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl","kind":"type","name":"DeleteProfile_i"},"org::owasp::webgoat::lessons::Encoding::hashMD5":{"parentKey":"org::owasp::webgoat::lessons::Encoding","kind":"function","name":"hashMD5"},"org::owasp::webgoat::lessons::DBCrossSiteScripting::UpdateProfile::getNextUID":{"parentKey":"org::owasp::webgoat::lessons::DBCrossSiteScripting::UpdateProfile","kind":"function","name":"getNextUID"},"org::owasp::webgoat::lessons::GoatHillsFinancial::FindProfile":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial","kind":"type","name":"FindProfile"},"org::owasp::webgoat::lessons::Encoding::createContent":{"parentKey":"org::owasp::webgoat::lessons::Encoding","kind":"function","name":"createContent"},"org::owasp::webgoat::lessons::GoatHillsFinancial::UpdateProfile::createEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial::UpdateProfile","kind":"function","name":"createEmployeeProfile"},"org::owasp::webgoat::session::LessonTracker":{"parentKey":"org::owasp::webgoat::session","kind":"type","name":"LessonTracker"},"org::owasp::webgoat::lessons::MultiLevelLogin1::resetTans":{"parentKey":"org::owasp::webgoat::lessons::MultiLevelLogin1","kind":"function","name":"resetTans"},"org::owasp::webgoat::lessons::DBCrossSiteScripting::UpdateProfile":{"parentKey":"org::owasp::webgoat::lessons::DBCrossSiteScripting","kind":"type","name":"UpdateProfile"},"org::owasp::webgoat::lessons::GoatHillsFinancial::GoatHillsFinancial::valueOf":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial::GoatHillsFinancial","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::AbstractLesson::valueOf":{"parentKey":"org::owasp::webgoat::lessons::AbstractLesson","kind":"function","name":"valueOf"},"org::owasp::webgoat::session::DatabaseUtilities":{"parentKey":"org::owasp::webgoat::session","kind":"type","name":"DatabaseUtilities"},"org::owasp::webgoat::HammerHead::init":{"parentKey":"org::owasp::webgoat::HammerHead","kind":"function","name":"init"},"java::sql::ResultSet::getAllEmployees_BACKUP":{"parentKey":"java::sql::ResultSet","kind":"function","name":"getAllEmployees_BACKUP"},"org::owasp::webgoat::lessons::SQLInjection::SQLInjection::valueOf":{"parentKey":"org::owasp::webgoat::lessons::SQLInjection::SQLInjection","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::MultiLevelLogin1::correctTan":{"parentKey":"org::owasp::webgoat::lessons::MultiLevelLogin1","kind":"function","name":"correctTan"},"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile::getNextUID":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile","kind":"function","name":"getNextUID"},"org::owasp::webgoat::lessons::CsrfTokenByPass":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"CsrfTokenByPass"},"org::owasp::webgoat::lessons::BlindNumericSqlInjection":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"BlindNumericSqlInjection"},"org::owasp::webgoat::lessons::HttpBasicsController":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"HttpBasicsController"},"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile::createEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile","kind":"function","name":"createEmployeeProfile"},"org::owasp::webgoat::lessons::SQLInjection::ViewProfile::getEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::SQLInjection::ViewProfile","kind":"function","name":"getEmployeeProfile"},"org::owasp::webgoat::lessons::WSDLScanning::createContent":{"parentKey":"org::owasp::webgoat::lessons::WSDLScanning","kind":"function","name":"createContent"},"org::owasp::webgoat::lessons::HttpOnly":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"HttpOnly"},"java::sql::ResultSet::getNextUID":{"parentKey":"java::sql::ResultSet","kind":"function","name":"getNextUID"},"org::owasp::webgoat::session::Course::loadLessons":{"parentKey":"org::owasp::webgoat::session::Course","kind":"function","name":"loadLessons"},"org::owasp::webgoat::lessons::DBSQLInjection::Login::login":{"parentKey":"org::owasp::webgoat::lessons::DBSQLInjection::Login","kind":"function","name":"login"},"org::owasp::webgoat::lessons::Phishing":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"Phishing"},"org::owasp::webgoat::lessons::CsrfPromptByPass::valueOf":{"parentKey":"org::owasp::webgoat::lessons::CsrfPromptByPass","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::EditProfile":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl","kind":"type","name":"EditProfile"},"org::owasp::webgoat::lessons::JSONInjection::<init>":{"parentKey":"org::owasp::webgoat::lessons::JSONInjection","kind":"function","name":"<init>"},"java::sql::ResultSet::executeTimeTrigger":{"parentKey":"java::sql::ResultSet","kind":"function","name":"executeTimeTrigger"},"java::sql::ResultSet::correctLogin":{"parentKey":"java::sql::ResultSet","kind":"function","name":"correctLogin"},"java::sql::Statement::deleteEmployeeProfile":{"parentKey":"java::sql::Statement","kind":"function","name":"deleteEmployeeProfile"},"org::owasp::webgoat::LessonSource::writeSource":{"parentKey":"org::owasp::webgoat::LessonSource","kind":"function","name":"writeSource"},"org::owasp::webgoat::lessons::CommandInjection":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"CommandInjection"},"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::ViewProfile_i":{"parentKey":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl","kind":"type","name":"ViewProfile_i"},"org":{"kind":"namespace","name":"org"},"org::owasp::webgoat::lessons::InsecureLogin::valueOf":{"parentKey":"org::owasp::webgoat::lessons::InsecureLogin","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::instructor::SQLInjection::Login_i":{"parentKey":"org::owasp::webgoat::lessons::instructor::SQLInjection","kind":"type","name":"Login_i"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::EditProfile::getEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl::EditProfile","kind":"function","name":"getEmployeeProfile"},"org::owasp::webgoat::session::WebgoatContext":{"parentKey":"org::owasp::webgoat::session","kind":"type","name":"WebgoatContext"},"org::owasp::webgoat::lessons::Category::valueOf":{"parentKey":"org::owasp::webgoat::lessons::Category","kind":"function","name":"valueOf"},"java::sql::Statement::restartLesson":{"parentKey":"java::sql::Statement","kind":"function","name":"restartLesson"},"org::owasp::webgoat::util":{"parentKey":"org::owasp::webgoat","kind":"namespace","name":"util"},"java::sql::Statement::getTan":{"parentKey":"java::sql::Statement","kind":"function","name":"getTan"},"org::owasp::webgoat::lessons::SqlAddData::valueOf":{"parentKey":"org::owasp::webgoat::lessons::SqlAddData","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::XMLInjection":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"XMLInjection"},"org::owasp::webgoat::lessons::DBSQLInjection::DBSQLInjection":{"parentKey":"org::owasp::webgoat::lessons::DBSQLInjection","kind":"type","name":"DBSQLInjection"},"org::owasp::webgoat::lessons::SameOriginPolicyProtection":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"SameOriginPolicyProtection"},"org::owasp::webgoat::lessons::MultiLevelLogin2::getTan":{"parentKey":"org::owasp::webgoat::lessons::MultiLevelLogin2","kind":"function","name":"getTan"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::RoleBasedAccessControl::<init>":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl::RoleBasedAccessControl","kind":"function","name":"<init>"},"org::owasp::webgoat::lessons::WsSqlInjection::setWebgoatContext":{"parentKey":"org::owasp::webgoat::lessons::WsSqlInjection","kind":"function","name":"setWebgoatContext"},"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl":{"parentKey":"org::owasp::webgoat::lessons::instructor","kind":"namespace","name":"RoleBasedAccessControl"},"org::owasp::webgoat::lessons::DBSQLInjection::DBSQLInjection::valueOf":{"parentKey":"org::owasp::webgoat::lessons::DBSQLInjection::DBSQLInjection","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::SoapRequest::getCreditCard":{"parentKey":"org::owasp::webgoat::lessons::SoapRequest","kind":"function","name":"getCreditCard"},"org::owasp::webgoat::session::ParameterParser::getBooleanSubParameter":{"parentKey":"org::owasp::webgoat::session::ParameterParser","kind":"function","name":"getBooleanSubParameter"},"org::owasp::webgoat::lessons::SQLInjection":{"parentKey":"org::owasp::webgoat::lessons","kind":"namespace","name":"SQLInjection"},"org::owasp::webgoat::lessons::DBSQLInjection::Login":{"parentKey":"org::owasp::webgoat::lessons::DBSQLInjection","kind":"type","name":"Login"},"org::owasp::webgoat::lessons::DOS_Login::createContent":{"parentKey":"org::owasp::webgoat::lessons::DOS_Login","kind":"function","name":"createContent"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::ViewProfile":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl","kind":"type","name":"ViewProfile"},"java::sql::ResultSet::getStations":{"parentKey":"java::sql::ResultSet","kind":"function","name":"getStations"},"java::sql::Statement::makeCurrent":{"parentKey":"java::sql::Statement","kind":"function","name":"makeCurrent"},"org::owasp::webgoat::lessons::CommandInjection::replaceAll":{"parentKey":"org::owasp::webgoat::lessons::CommandInjection","kind":"function","name":"replaceAll"},"org::owasp::webgoat::lessons::BlindStringSqlInjection::createContent":{"parentKey":"org::owasp::webgoat::lessons::BlindStringSqlInjection","kind":"function","name":"createContent"},"org::owasp::webgoat::session::WebSession::getCurrentLink":{"parentKey":"org::owasp::webgoat::session::WebSession","kind":"function","name":"getCurrentLink"},"org::owasp::webgoat::lessons::GoatHillsFinancial::EditProfile::getEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial::EditProfile","kind":"function","name":"getEmployeeProfile"},"org::owasp::webgoat::lessons::DOMXSS::<init>":{"parentKey":"org::owasp::webgoat::lessons::DOMXSS","kind":"function","name":"<init>"},"org::owasp::webgoat::session::ErrorScreen":{"parentKey":"org::owasp::webgoat::session","kind":"type","name":"ErrorScreen"},"org::owasp::webgoat::lessons::ClientSideFiltering::ClientSideFiltering::valueOf":{"parentKey":"org::owasp::webgoat::lessons::ClientSideFiltering::ClientSideFiltering","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::CrossSiteScripting::EditProfile::getEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting::EditProfile","kind":"function","name":"getEmployeeProfile"},"java::sql::Statement::createContent":{"parentKey":"java::sql::Statement","kind":"function","name":"createContent"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::RoleBasedAccessControl::handleRequest_BACKUP":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl::RoleBasedAccessControl","kind":"function","name":"handleRequest_BACKUP"},"java::sql::Statement::resetTans":{"parentKey":"java::sql::Statement","kind":"function","name":"resetTans"},"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::EditProfile_i::getEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::EditProfile_i","kind":"function","name":"getEmployeeProfile"},"org::owasp::webgoat::lessons::DBCrossSiteScripting::DBCrossSiteScripting::valueOf":{"parentKey":"org::owasp::webgoat::lessons::DBCrossSiteScripting::DBCrossSiteScripting","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::UsefulTools::valueOf":{"parentKey":"org::owasp::webgoat::lessons::UsefulTools","kind":"function","name":"valueOf"},"java::sql::Statement::getUser":{"parentKey":"java::sql::Statement","kind":"function","name":"getUser"},"org::owasp::webgoat::lessons::FailOpenAuthentication":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"FailOpenAuthentication"},"org::owasp::webgoat::lessons::InsecureLogin":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"InsecureLogin"},"org::owasp::webgoat::lessons::SoapRequest::valueOf":{"parentKey":"org::owasp::webgoat::lessons::SoapRequest","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::WSDLScanning::getCreditCard":{"parentKey":"org::owasp::webgoat::lessons::WSDLScanning","kind":"function","name":"getCreditCard"},"org::owasp::webgoat::lessons::MultiLevelLogin1::correctLogin":{"parentKey":"org::owasp::webgoat::lessons::MultiLevelLogin1","kind":"function","name":"correctLogin"},"org::owasp::webgoat::lessons::Challenge2Screen::getBytes":{"parentKey":"org::owasp::webgoat::lessons::Challenge2Screen","kind":"function","name":"getBytes"},"org::owasp::webgoat::lessons::BlindScript::createContent":{"parentKey":"org::owasp::webgoat::lessons::BlindScript","kind":"function","name":"createContent"},"org::owasp::webgoat::lessons::SilentTransactions::valueOf":{"parentKey":"org::owasp::webgoat::lessons::SilentTransactions","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::SqlNumericInjection::getStations":{"parentKey":"org::owasp::webgoat::lessons::SqlNumericInjection","kind":"function","name":"getStations"},"java::sql::Statement::updateTan":{"parentKey":"java::sql::Statement","kind":"function","name":"updateTan"},"org::owasp::webgoat::lessons::CsrfTokenByPass::doTransfer":{"parentKey":"org::owasp::webgoat::lessons::CsrfTokenByPass","kind":"function","name":"doTransfer"},"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting","kind":"type","name":"UpdateProfile"},"org::owasp::webgoat::lessons::MultiLevelLogin2::resetTans":{"parentKey":"org::owasp::webgoat::lessons::MultiLevelLogin2","kind":"function","name":"resetTans"},"org::owasp::webgoat::lessons::SqlNumericInjection::makeStationList":{"parentKey":"org::owasp::webgoat::lessons::SqlNumericInjection","kind":"function","name":"makeStationList"},"org::owasp::webgoat::lessons::CrossSiteScripting::FindProfile":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting","kind":"type","name":"FindProfile"},"org::owasp::webgoat::lessons::CSRF::addMessage":{"parentKey":"org::owasp::webgoat::lessons::CSRF","kind":"function","name":"addMessage"},"org::owasp::webgoat::session::Authorization::valueOf":{"parentKey":"org::owasp::webgoat::session::Authorization","kind":"function","name":"valueOf"},"org::owasp::webgoat::util::WebGoatI18N::<init>":{"parentKey":"org::owasp::webgoat::util::WebGoatI18N","kind":"function","name":"<init>"},"org::owasp::webgoat::lessons::GoatHillsFinancial::Login::login":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial::Login","kind":"function","name":"login"},"org::owasp::webgoat::lessons::SqlStringInjection::injectableQuery":{"parentKey":"org::owasp::webgoat::lessons::SqlStringInjection","kind":"function","name":"injectableQuery"},"org::owasp::webgoat::lessons::SessionFixation::getUser":{"parentKey":"org::owasp::webgoat::lessons::SessionFixation","kind":"function","name":"getUser"},"java::sql::Statement::makeList":{"parentKey":"java::sql::Statement","kind":"function","name":"makeList"},"java::sql::Statement::createUserDataTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createUserDataTable"},"org::owasp::webgoat::lessons::SoapRequest::getFirstName":{"parentKey":"org::owasp::webgoat::lessons::SoapRequest","kind":"function","name":"getFirstName"},"java::sql::Statement::addMessage":{"parentKey":"java::sql::Statement","kind":"function","name":"addMessage"},"org::owasp::webgoat::lessons::MultiLevelLogin2::getUser":{"parentKey":"org::owasp::webgoat::lessons::MultiLevelLogin2","kind":"function","name":"getUser"},"org::owasp::webgoat::lessons::CrossSiteScripting::FindProfile::findEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting::FindProfile","kind":"function","name":"findEmployeeProfile"},"org::owasp::webgoat::lessons::SqlModifyData":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"SqlModifyData"},"java::sql::Statement::doDeleteEmployeeProfile":{"parentKey":"java::sql::Statement","kind":"function","name":"doDeleteEmployeeProfile"},"org::owasp::webgoat::lessons::JavaScriptValidation":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"JavaScriptValidation"},"org::owasp::webgoat::lessons::CSRF":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"CSRF"},"org::owasp::webgoat::lessons::Category":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"Category"},"org::owasp::webgoat::lessons::UncheckedEmail::formatMail":{"parentKey":"org::owasp::webgoat::lessons::UncheckedEmail","kind":"function","name":"formatMail"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::UpdateProfile":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl","kind":"type","name":"UpdateProfile"},"org::owasp::webgoat::lessons::SQLInjection::ListStaff::getAllEmployees":{"parentKey":"org::owasp::webgoat::lessons::SQLInjection::ListStaff","kind":"function","name":"getAllEmployees"},"org::owasp::webgoat::HammerHead::setTimeZone":{"parentKey":"org::owasp::webgoat::HammerHead","kind":"function","name":"setTimeZone"},"org::owasp::webgoat::lessons::GoatHillsFinancial::DefaultLessonAction::isAuthorized":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial::DefaultLessonAction","kind":"function","name":"isAuthorized"},"java::io::Writer::resetWebPage":{"parentKey":"java::io::Writer","kind":"function","name":"resetWebPage"},"org::owasp::webgoat::lessons::SqlAddData":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"SqlAddData"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::EditProfile::getEmployeeProfile_BACKUP":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl::EditProfile","kind":"function","name":"getEmployeeProfile_BACKUP"},"org::owasp::webgoat::lessons::ThreadSafetyProblem::createContent":{"parentKey":"org::owasp::webgoat::lessons::ThreadSafetyProblem","kind":"function","name":"createContent"},"org::owasp::webgoat::lessons::Encoding::main":{"parentKey":"org::owasp::webgoat::lessons::Encoding","kind":"function","name":"main"},"org::owasp::webgoat::session::Course::getWebgoatI18N":{"parentKey":"org::owasp::webgoat::session::Course","kind":"function","name":"getWebgoatI18N"},"org::owasp::webgoat::lessons::HttpOnly::getBytes":{"parentKey":"org::owasp::webgoat::lessons::HttpOnly","kind":"function","name":"getBytes"},"org::owasp::webgoat::lessons::MultiLevelLogin2":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"MultiLevelLogin2"},"org::owasp::webgoat::lessons::BasicAuthentication":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"BasicAuthentication"},"org::owasp::webgoat::lessons::MultiLevelLogin1":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"MultiLevelLogin1"},"org::owasp::webgoat::lessons::InsecureLogin::getUser":{"parentKey":"org::owasp::webgoat::lessons::InsecureLogin","kind":"function","name":"getUser"},"org::owasp::webgoat::lessons::MultiLevelLogin1::valueOf":{"parentKey":"org::owasp::webgoat::lessons::MultiLevelLogin1","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::GoatHillsFinancial::EditProfile":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial","kind":"type","name":"EditProfile"},"org::owasp::webgoat::lessons::SqlStringInjection":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"SqlStringInjection"},"java::sql::Statement::createTanTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createTanTable"},"org::owasp::webgoat::lessons::CrossSiteScripting::CrossSiteScripting::valueOf":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting::CrossSiteScripting","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::CrossSiteScripting::CrossSiteScripting::<init>":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting::CrossSiteScripting","kind":"function","name":"<init>"},"org::owasp::webgoat::lessons::LogSpoofing::createContent":{"parentKey":"org::owasp::webgoat::lessons::LogSpoofing","kind":"function","name":"createContent"},"java::sql::ResultSet::login_BACKUP":{"parentKey":"java::sql::ResultSet","kind":"function","name":"login_BACKUP"},"org::owasp::webgoat::lessons::SessionFixation":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"SessionFixation"},"org::owasp::webgoat::session::WebSession::update":{"parentKey":"org::owasp::webgoat::session::WebSession","kind":"function","name":"update"},"org::owasp":{"parentKey":"org","kind":"namespace","name":"owasp"},"org::owasp::webgoat::lessons::MultiLevelLogin1::getTanPosition":{"parentKey":"org::owasp::webgoat::lessons::MultiLevelLogin1","kind":"function","name":"getTanPosition"},"org::owasp::webgoat::lessons::LessonAdapter::getInstructions":{"parentKey":"org::owasp::webgoat::lessons::LessonAdapter","kind":"function","name":"getInstructions"},"java::sql::Statement::createEmployeeProfile":{"parentKey":"java::sql::Statement","kind":"function","name":"createEmployeeProfile"},"org::owasp::webgoat::lessons::RoleBasedAccessControl":{"parentKey":"org::owasp::webgoat::lessons","kind":"namespace","name":"RoleBasedAccessControl"},"org::owasp::webgoat::lessons::CSRF::valueOf":{"parentKey":"org::owasp::webgoat::lessons::CSRF","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::GoatHillsFinancial::UpdateProfile::changeEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial::UpdateProfile","kind":"function","name":"changeEmployeeProfile"},"org::owasp::webgoat::lessons::GoatHillsFinancial::Login":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial","kind":"type","name":"Login"},"org::owasp::webgoat::lessons::instructor::SQLInjection::ViewProfile_i::getEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::instructor::SQLInjection::ViewProfile_i","kind":"function","name":"getEmployeeProfile"},"org::owasp::webgoat::lessons::CrossSiteScripting::EditProfile":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting","kind":"type","name":"EditProfile"},"org::owasp::webgoat::lessons::AccessControlMatrix":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"AccessControlMatrix"},"org::owasp::webgoat::lessons::RemoteAdminFlaw":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"RemoteAdminFlaw"},"org::owasp::webgoat::lessons::SQLInjection::Login::login":{"parentKey":"org::owasp::webgoat::lessons::SQLInjection::Login","kind":"function","name":"login"},"java::sql::ResultSet":{"parentKey":"java::sql","kind":"type","name":"ResultSet"},"org::owasp::webgoat::lessons::DBCrossSiteScripting::DBCrossSiteScripting":{"parentKey":"org::owasp::webgoat::lessons::DBCrossSiteScripting","kind":"type","name":"DBCrossSiteScripting"},"org::owasp::webgoat::lessons::BlindScript":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"BlindScript"},"org::owasp::webgoat::lessons::HttpBasics":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"HttpBasics"},"org::owasp::webgoat::lessons::GoatHillsFinancial::DefaultLessonAction":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial","kind":"type","name":"DefaultLessonAction"},"org::owasp::webgoat::lessons::BlindScript::executeSpyWare":{"parentKey":"org::owasp::webgoat::lessons::BlindScript","kind":"function","name":"executeSpyWare"},"org::owasp::webgoat::lessons::BlindScript::StaticDeleter":{"parentKey":"org::owasp::webgoat::lessons::BlindScript","kind":"function","name":"StaticDeleter"},"org::owasp::webgoat::lessons::Encoding::<init>":{"parentKey":"org::owasp::webgoat::lessons::Encoding","kind":"function","name":"<init>"},"java::sql::Statement::isAuthorized":{"parentKey":"java::sql::Statement","kind":"function","name":"isAuthorized"},"org::owasp::webgoat::lessons::Challenge2Screen":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"Challenge2Screen"},"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile::createEmployeeProfile_BACKUP":{"parentKey":"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile","kind":"function","name":"createEmployeeProfile_BACKUP"},"org::owasp::webgoat::lessons::AbstractLesson::equals":{"parentKey":"org::owasp::webgoat::lessons::AbstractLesson","kind":"function","name":"equals"},"org::owasp::webgoat::lessons::ForcedBrowsing":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"ForcedBrowsing"},"org::owasp::webgoat::session::ECSFactory::makeInput":{"parentKey":"org::owasp::webgoat::session::ECSFactory","kind":"function","name":"makeInput"},"org::owasp::webgoat::lessons::SQLInjection::Login::login_BACKUP":{"parentKey":"org::owasp::webgoat::lessons::SQLInjection::Login","kind":"function","name":"login_BACKUP"},"java::sql::ResultSet::getUserName":{"parentKey":"java::sql::ResultSet","kind":"function","name":"getUserName"},"org::owasp::webgoat::session":{"parentKey":"org::owasp::webgoat","kind":"namespace","name":"session"},"org::owasp::webgoat::lessons::RoleBasedAccessControl::UpdateProfile::changeEmployeeProfile":{"parentKey":"org::owasp::webgoat::lessons::RoleBasedAccessControl::UpdateProfile","kind":"function","name":"changeEmployeeProfile"},"org::owasp::webgoat::lessons::admin::ProductsAdminScreen::createContent":{"parentKey":"org::owasp::webgoat::lessons::admin::ProductsAdminScreen","kind":"function","name":"createContent"},"org::owasp::webgoat::Catcher":{"parentKey":"org::owasp::webgoat","kind":"type","name":"Catcher"},"org::owasp::webgoat::lessons::ForgotPassword::createContent":{"parentKey":"org::owasp::webgoat::lessons::ForgotPassword","kind":"function","name":"createContent"},"org::owasp::webgoat::lessons::Encoding":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"Encoding"},"org::owasp::webgoat::lessons::admin::AdminScreen":{"parentKey":"org::owasp::webgoat::lessons::admin","kind":"type","name":"AdminScreen"},"org::owasp::webgoat::lessons::JSONInjection::valueOf":{"parentKey":"org::owasp::webgoat::lessons::JSONInjection","kind":"function","name":"valueOf"},"java::sql::Statement::changeEmployeeProfile_BACKUP":{"parentKey":"java::sql::Statement","kind":"function","name":"changeEmployeeProfile_BACKUP"},"org::owasp::webgoat::lessons::admin":{"parentKey":"org::owasp::webgoat::lessons","kind":"namespace","name":"admin"},"org::owasp::webgoat::lessons::BackDoors::getInstructions":{"parentKey":"org::owasp::webgoat::lessons::BackDoors","kind":"function","name":"getInstructions"},"org::owasp::webgoat::lessons::Encoding::hashSHA":{"parentKey":"org::owasp::webgoat::lessons::Encoding","kind":"function","name":"hashSHA"},"org::owasp::webgoat::lessons::SqlModifyData::createContent":{"parentKey":"org::owasp::webgoat::lessons::SqlModifyData","kind":"function","name":"createContent"},"org::owasp::webgoat::lessons::StoredXss":{"parentKey":"org::owasp::webgoat::lessons","kind":"type","name":"StoredXss"},"java::sql::ResultSet::isAuthorizedForEmployee":{"parentKey":"java::sql::ResultSet","kind":"function","name":"isAuthorizedForEmployee"},"org::owasp::webgoat::lessons::UncheckedEmail::valueOf":{"parentKey":"org::owasp::webgoat::lessons::UncheckedEmail","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::BackDoors::concept1":{"parentKey":"org::owasp::webgoat::lessons::BackDoors","kind":"function","name":"concept1"},"org::owasp::webgoat::lessons::BackDoors::concept2":{"parentKey":"org::owasp::webgoat::lessons::BackDoors","kind":"function","name":"concept2"},"org::owasp::webgoat::session::ECSFactory::makeOption":{"parentKey":"org::owasp::webgoat::session::ECSFactory","kind":"function","name":"makeOption"},"java::sql::Statement::createModifyWithSQLLessonTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createModifyWithSQLLessonTable"},"org::owasp::webgoat::lessons::ThreadSafetyProblem::valueOf":{"parentKey":"org::owasp::webgoat::lessons::ThreadSafetyProblem","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::OffByOne::valueOf":{"parentKey":"org::owasp::webgoat::lessons::OffByOne","kind":"function","name":"valueOf"},"org::owasp::webgoat::lessons::GoatHillsFinancial::DefaultLessonAction::getUserName":{"parentKey":"org::owasp::webgoat::lessons::GoatHillsFinancial::DefaultLessonAction","kind":"function","name":"getUserName"},"org::owasp::webgoat::lessons::XMLInjection::<init>":{"parentKey":"org::owasp::webgoat::lessons::XMLInjection","kind":"function","name":"<init>"},"org::owasp::webgoat::lessons::MaliciousFileExecution::createContent":{"parentKey":"org::owasp::webgoat::lessons::MaliciousFileExecution","kind":"function","name":"createContent"},"java::sql::Statement::createOwnershipTable":{"parentKey":"java::sql::Statement","kind":"function","name":"createOwnershipTable"}},"files":{"org\/owasp\/webgoat\/lessons\/PasswordStrength.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/DBSQLInjection\/Login.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/HammerHead.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/Phishing.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/LessonAdapter.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/FindProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/SQLInjection\/Login.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/DOS_Login.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/session\/DatabaseUtilities.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/ViewProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/EditProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/TomcatSetup.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/DBCrossSiteScripting\/UpdateProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/util\/Exec.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/WSDLScanning.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/ForcedBrowsing.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/UpdateProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/SessionFixation.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/GoatHillsFinancial.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/OffByOne.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/DeleteProfile_i.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/WeakAuthenticationCookie.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/SqlAddData.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/ViewProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/XPATHInjection.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/session\/CreateDB.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/CrossSiteScripting.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/admin\/AdminScreen.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/DeleteProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/PathBasedAccessControl.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/RoleBasedAccessControl.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/JSONInjection.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/FailOpenAuthentication.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/HttpBasicsController.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/instructor\/SQLInjection\/ViewProfile_i.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/HttpSplitting.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/ListStaff.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/BlindNumericSqlInjection.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/NewLesson.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/admin\/SummaryReportCardScreen.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/admin\/ViewDatabase.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/session\/Authorization.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/Challenge2Screen.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/BypassHtmlFieldRestrictions.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/HtmlClues.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/ConcurrencyCart.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/WsSqlInjection.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/ClientSideValidation.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/SQLInjection\/SQLInjection.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/XMLInjection.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/session\/WebgoatContext.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/ViewProfile_i.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/HiddenFieldTampering.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/ThreadSafetyProblem.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/WeakSessionID.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/UpdateProfile_i.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/util\/WebGoatI18N.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/LessonSource.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/ReflectedXSS.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/InsecureLogin.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/session\/ErrorScreen.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/session\/LessonTracker.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/ClientSideFiltering\/ClientSideFiltering.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/admin\/UserAdminScreen.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/util\/HtmlEncoder.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/DangerousEval.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/HttpBasics.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/session\/WebgoatProperties.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/admin\/ProductsAdminScreen.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/session\/ParameterParser.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/CsrfTokenByPass.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/session\/Course.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/RemoteAdminFlaw.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/DeleteProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/DefaultLessonAction.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/BackDoors.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/HowToWork.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/HttpOnly.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/SQLInjection\/ListStaff.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/DBSQLInjection\/DBSQLInjection.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/EditProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/BasicAuthentication.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/UpdateProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/LogSpoofing.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/admin\/ReportCardScreen.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/instructor\/SQLInjection\/Login_i.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/SoapRequest.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/CsrfPromptByPass.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/TraceXSS.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/AbstractLesson.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/DOMXSS.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/Category.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/JavaScriptValidation.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/session\/WebSession.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/session\/ECSFactory.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/FindProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/AccessControlMatrix.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/CSRF.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/CommandInjection.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/SameOriginPolicyProtection.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/UsefulTools.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/BlindStringSqlInjection.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/BlindScript.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/Catcher.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/Encoding.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/EditProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/SqlNumericInjection.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/StoredXss.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/RoleBasedAccessControl_i.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/ForgotPassword.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/WsSAXInjection.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/UpdateProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/SilentTransactions.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/ViewProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/SqlStringInjection.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/UncheckedEmail.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/Login.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/admin\/RefreshDBScreen.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/EditProfile_i.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/SqlModifyData.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/util\/Interceptor.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/DBCrossSiteScripting\/DBCrossSiteScripting.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/SQLInjection\/ViewProfile.java":{"mimeType":"text\/java"},"org\/owasp\/webgoat\/lessons\/DOMInjection.java":{"mimeType":"text\/java"}},"rules":{"de.upb.gpa.findbugs.518":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.518"},"de.upb.gpa.findbugs.519":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.519"},"de.upb.gpa.findbugs.512":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.512"},"de.upb.gpa.findbugs.513":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.513"},"de.upb.gpa.findbugs.510":{"description":"This field is never read.&nbsp;The field is public or protected, so perhaps it is intended to be used with classes not seen as part of the analysis. If not,consider removing it from the class.","id":"de.upb.gpa.findbugs.510"},"de.upb.gpa.findbugs.511":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.511"},"de.upb.gpa.findbugs.516":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.516"},"de.upb.gpa.findbugs.517":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.517"},"de.upb.gpa.findbugs.514":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.514"},"de.upb.gpa.findbugs.515":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.515"},"de.upb.gpa.findbugs.509":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.509"},"de.upb.gpa.findbugs.507":{"description":"This static field public but not final, andcould be changed by malicious code or by accident from another package. The field could be made final to avoid this vulnerability.","id":"de.upb.gpa.findbugs.507"},"de.upb.gpa.findbugs.508":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.508"},"de.upb.gpa.findbugs.501":{"description":"This instance method writes to a static field. This is tricky to getcorrect if multiple instances are being manipulated,and generally bad practice.","id":"de.upb.gpa.findbugs.501"},"de.upb.gpa.findbugs.502":{"description":"This instance method writes to a static field. This is tricky to getcorrect if multiple instances are being manipulated,and generally bad practice.","id":"de.upb.gpa.findbugs.502"},"de.upb.gpa.findbugs.500":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.500"},"de.upb.gpa.findbugs.505":{"description":"This code compares java.lang.String objects for referenceequality using the == or != operators.Unless both strings are either constants in a source file, or have beeninterned using the String.intern() method, the same stringvalue may be represented by two different String objects. Considerusing the equals(Object) method instead.","id":"de.upb.gpa.findbugs.505"},"de.upb.gpa.findbugs.506":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.506"},"de.upb.gpa.findbugs.503":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.503"},"de.upb.gpa.findbugs.504":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.504"},"de.upb.gpa.findbugs.419":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.419"},"de.upb.gpa.findbugs.413":{"description":"This instance method writes to a static field. This is tricky to getcorrect if multiple instances are being manipulated,and generally bad practice.","id":"de.upb.gpa.findbugs.413"},"de.upb.gpa.findbugs.534":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.534"},"de.upb.gpa.findbugs.414":{"description":"This instance method writes to a static field. This is tricky to getcorrect if multiple instances are being manipulated,and generally bad practice.","id":"de.upb.gpa.findbugs.414"},"de.upb.gpa.findbugs.535":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.535"},"de.upb.gpa.findbugs.411":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.411"},"de.upb.gpa.findbugs.532":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.532"},"de.upb.gpa.findbugs.412":{"description":"The return value of this method should be checked. One commoncause of this warning is to invoke a method on an immutable object,thinking that it updates the object. For example, in the following codefragment,String dateString = getHeaderField(name);dateString.trim();the programmer seems to be thinking that the trim() method will updatethe String referenced by dateString. But since Strings are immutable, the trim()function returns a new String value, which is being ignored here. The codeshould be corrected to: String dateString = getHeaderField(name);dateString = dateString.trim();","id":"de.upb.gpa.findbugs.412"},"de.upb.gpa.findbugs.533":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.533"},"de.upb.gpa.findbugs.417":{"description":"This instance method writes to a static field. This is tricky to getcorrect if multiple instances are being manipulated,and generally bad practice.","id":"de.upb.gpa.findbugs.417"},"de.upb.gpa.findbugs.538":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.538"},"de.upb.gpa.findbugs.418":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.418"},"de.upb.gpa.findbugs.539":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.539"},"de.upb.gpa.findbugs.415":{"description":"This instance method writes to a static field. This is tricky to getcorrect if multiple instances are being manipulated,and generally bad practice.","id":"de.upb.gpa.findbugs.415"},"de.upb.gpa.findbugs.536":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.536"},"de.upb.gpa.findbugs.416":{"description":"This instance method writes to a static field. This is tricky to getcorrect if multiple instances are being manipulated,and generally bad practice.","id":"de.upb.gpa.findbugs.416"},"de.upb.gpa.findbugs.537":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.537"},"de.upb.gpa.findbugs.530":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.530"},"de.upb.gpa.findbugs.410":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.410"},"de.upb.gpa.findbugs.531":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.531"},"de.upb.gpa.findbugs.408":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.408"},"de.upb.gpa.findbugs.529":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.529"},"de.upb.gpa.findbugs.409":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.409"},"de.upb.gpa.findbugs.402":{"description":"This class contains an instance final field that is initialized to a compile-time static value. Consider making the field static.","id":"de.upb.gpa.findbugs.402"},"de.upb.gpa.findbugs.523":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.523"},"de.upb.gpa.findbugs.403":{"description":"This class contains an instance final field that is initialized to a compile-time static value. Consider making the field static.","id":"de.upb.gpa.findbugs.403"},"de.upb.gpa.findbugs.524":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.524"},"de.upb.gpa.findbugs.400":{"description":"This class contains an instance final field that is initialized to a compile-time static value. Consider making the field static.","id":"de.upb.gpa.findbugs.400"},"de.upb.gpa.findbugs.521":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.521"},"de.upb.gpa.findbugs.401":{"description":"This class contains an instance final field that is initialized to a compile-time static value. Consider making the field static.","id":"de.upb.gpa.findbugs.401"},"de.upb.gpa.findbugs.522":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.522"},"de.upb.gpa.findbugs.406":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.406"},"de.upb.gpa.findbugs.527":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.527"},"de.upb.gpa.findbugs.407":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.407"},"de.upb.gpa.findbugs.528":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.528"},"de.upb.gpa.findbugs.404":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.404"},"de.upb.gpa.findbugs.525":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.525"},"de.upb.gpa.findbugs.405":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.405"},"de.upb.gpa.findbugs.526":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.526"},"de.upb.gpa.findbugs.520":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.520"},"de.upb.gpa.findbugs.314":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.314"},"de.upb.gpa.findbugs.435":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.435"},"de.upb.gpa.findbugs.556":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.556"},"de.upb.gpa.findbugs.315":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.315"},"de.upb.gpa.findbugs.436":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.436"},"de.upb.gpa.findbugs.557":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.557"},"de.upb.gpa.findbugs.312":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.312"},"de.upb.gpa.findbugs.433":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.433"},"de.upb.gpa.findbugs.554":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.554"},"de.upb.gpa.findbugs.313":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.313"},"de.upb.gpa.findbugs.434":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.434"},"de.upb.gpa.findbugs.555":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.555"},"de.upb.gpa.findbugs.318":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.318"},"de.upb.gpa.findbugs.439":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.439"},"de.upb.gpa.findbugs.319":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.319"},"de.upb.gpa.findbugs.316":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.316"},"de.upb.gpa.findbugs.437":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.437"},"de.upb.gpa.findbugs.558":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.558"},"de.upb.gpa.findbugs.317":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.317"},"de.upb.gpa.findbugs.438":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.438"},"de.upb.gpa.findbugs.559":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.559"},"de.upb.gpa.findbugs.310":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.310"},"de.upb.gpa.findbugs.431":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.431"},"de.upb.gpa.findbugs.552":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.552"},"de.upb.gpa.findbugs.311":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.311"},"de.upb.gpa.findbugs.432":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.432"},"de.upb.gpa.findbugs.553":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.553"},"de.upb.gpa.findbugs.550":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.550"},"de.upb.gpa.findbugs.430":{"description":"The method invokes the execute or addBatch method on an SQL statement with a String that seemsto be dynamically generated. Consider usinga prepared statement instead. It is more efficient and less vulnerable toSQL injection attacks.","id":"de.upb.gpa.findbugs.430"},"de.upb.gpa.findbugs.551":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.551"},"de.upb.gpa.findbugs.309":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.309"},"de.upb.gpa.findbugs.303":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.303"},"de.upb.gpa.findbugs.424":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.424"},"de.upb.gpa.findbugs.545":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.545"},"de.upb.gpa.findbugs.304":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.304"},"de.upb.gpa.findbugs.425":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.425"},"de.upb.gpa.findbugs.546":{"description":"Using the java.lang.String(String) constructor wastes memory because the object so constructed will be functionally indistinguishable from the String passed as a parameter.&nbsp; Just use the argument String directly.","id":"de.upb.gpa.findbugs.546"},"de.upb.gpa.findbugs.301":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.301"},"de.upb.gpa.findbugs.422":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.422"},"de.upb.gpa.findbugs.543":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.543"},"de.upb.gpa.findbugs.302":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.302"},"de.upb.gpa.findbugs.423":{"description":"The method invokes the execute or addBatch method on an SQL statement with a String that seemsto be dynamically generated. Consider usinga prepared statement instead. It is more efficient and less vulnerable toSQL injection attacks.","id":"de.upb.gpa.findbugs.423"},"de.upb.gpa.findbugs.544":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.544"},"de.upb.gpa.findbugs.307":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.307"},"de.upb.gpa.findbugs.428":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.428"},"de.upb.gpa.findbugs.549":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.549"},"de.upb.gpa.findbugs.308":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.308"},"de.upb.gpa.findbugs.429":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.429"},"de.upb.gpa.findbugs.305":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.305"},"de.upb.gpa.findbugs.426":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.426"},"de.upb.gpa.findbugs.547":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.547"},"de.upb.gpa.findbugs.306":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.306"},"de.upb.gpa.findbugs.427":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.427"},"de.upb.gpa.findbugs.548":{"description":"This code calls a method and ignores the return value. However our analysis shows thatthe method (including its implementations in subclasses if any) does not produce any effectother than return value. Thus this call can be removed.We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong.Common false-positive cases include:- The method is designed to be overridden and produce a side effect in other projects which are out of the scope of the analysis.- The method is called to trigger the class loading which may have a side effect.- The method is called just to get some exception.If you feel that our assumption is incorrect, you can use a @CheckReturnValue annotationto instruct SpotBugs that ignoring the return value of this method is acceptable.","id":"de.upb.gpa.findbugs.548"},"de.upb.gpa.findbugs.420":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.420"},"de.upb.gpa.findbugs.541":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.541"},"de.upb.gpa.findbugs.300":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.300"},"de.upb.gpa.findbugs.421":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.421"},"de.upb.gpa.findbugs.542":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.542"},"de.upb.gpa.findbugs.540":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.540"},"de.upb.gpa.findbugs.215":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.215"},"de.upb.gpa.findbugs.336":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.336"},"de.upb.gpa.findbugs.457":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.457"},"de.upb.gpa.findbugs.578":{"description":"Creating new instances of java.lang.Boolean wastes memory, since Boolean objects are immutable and there are only two useful values of this type.&nbsp; Use the Boolean.valueOf() method (or Java 1.5 autoboxing) to create Boolean objects instead.","id":"de.upb.gpa.findbugs.578"},"de.upb.gpa.findbugs.216":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.216"},"de.upb.gpa.findbugs.337":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.337"},"de.upb.gpa.findbugs.458":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.458"},"de.upb.gpa.findbugs.579":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.579"},"de.upb.gpa.findbugs.213":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.213"},"de.upb.gpa.findbugs.334":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.334"},"de.upb.gpa.findbugs.455":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.455"},"de.upb.gpa.findbugs.576":{"description":"This field is never read.&nbsp; Consider removing it from the class.","id":"de.upb.gpa.findbugs.576"},"de.upb.gpa.findbugs.214":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.214"},"de.upb.gpa.findbugs.335":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.335"},"de.upb.gpa.findbugs.456":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.456"},"de.upb.gpa.findbugs.577":{"description":"Creating new instances of java.lang.Boolean wastes memory, since Boolean objects are immutable and there are only two useful values of this type.&nbsp; Use the Boolean.valueOf() method (or Java 1.5 autoboxing) to create Boolean objects instead.","id":"de.upb.gpa.findbugs.577"},"de.upb.gpa.findbugs.219":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.219"},"de.upb.gpa.findbugs.217":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.217"},"de.upb.gpa.findbugs.338":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.338"},"de.upb.gpa.findbugs.459":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.459"},"de.upb.gpa.findbugs.218":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.218"},"de.upb.gpa.findbugs.339":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.339"},"de.upb.gpa.findbugs.570":{"description":"A boxed primitive is allocated just to call toString(). It is more effective to just use the static form of toString which takes the primitive value. So, Replace...With this... new Integer(1).toString()Integer.toString(1) new Long(1).toString()Long.toString(1) new Float(1.0).toString()Float.toString(1.0) new Double(1.0).toString()Double.toString(1.0) new Byte(1).toString()Byte.toString(1) new Short(1).toString()Short.toString(1) new Boolean(true).toString()Boolean.toString(true)","id":"de.upb.gpa.findbugs.570"},"de.upb.gpa.findbugs.450":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.450"},"de.upb.gpa.findbugs.571":{"description":"A boxed primitive is allocated just to call toString(). It is more effective to just use the static form of toString which takes the primitive value. So, Replace...With this... new Integer(1).toString()Integer.toString(1) new Long(1).toString()Long.toString(1) new Float(1.0).toString()Float.toString(1.0) new Double(1.0).toString()Double.toString(1.0) new Byte(1).toString()Byte.toString(1) new Short(1).toString()Short.toString(1) new Boolean(true).toString()Boolean.toString(true)","id":"de.upb.gpa.findbugs.571"},"de.upb.gpa.findbugs.211":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.211"},"de.upb.gpa.findbugs.332":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.332"},"de.upb.gpa.findbugs.453":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.453"},"de.upb.gpa.findbugs.574":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.574"},"de.upb.gpa.findbugs.212":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.212"},"de.upb.gpa.findbugs.333":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.333"},"de.upb.gpa.findbugs.454":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.454"},"de.upb.gpa.findbugs.575":{"description":"This method contains a redundant check of a known non-null value againstthe constant null.","id":"de.upb.gpa.findbugs.575"},"de.upb.gpa.findbugs.330":{"description":"The return value from a method is dereferenced without a null check,and the return value of that method is one that should generally be checkedfor null. This may lead to a NullPointerException when the code is executed.","id":"de.upb.gpa.findbugs.330"},"de.upb.gpa.findbugs.451":{"description":"The method invokes the execute or addBatch method on an SQL statement with a String that seemsto be dynamically generated. Consider usinga prepared statement instead. It is more efficient and less vulnerable toSQL injection attacks.","id":"de.upb.gpa.findbugs.451"},"de.upb.gpa.findbugs.572":{"description":"A boxed primitive is allocated just to call toString(). It is more effective to just use the static form of toString which takes the primitive value. So, Replace...With this... new Integer(1).toString()Integer.toString(1) new Long(1).toString()Long.toString(1) new Float(1.0).toString()Float.toString(1.0) new Double(1.0).toString()Double.toString(1.0) new Byte(1).toString()Byte.toString(1) new Short(1).toString()Short.toString(1) new Boolean(true).toString()Boolean.toString(true)","id":"de.upb.gpa.findbugs.572"},"de.upb.gpa.findbugs.210":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.210"},"de.upb.gpa.findbugs.331":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.331"},"de.upb.gpa.findbugs.452":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.452"},"de.upb.gpa.findbugs.573":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.573"},"de.upb.gpa.findbugs.204":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.204"},"de.upb.gpa.findbugs.325":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.325"},"de.upb.gpa.findbugs.446":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.446"},"de.upb.gpa.findbugs.567":{"description":"Creating new instances of java.lang.Boolean wastes memory, since Boolean objects are immutable and there are only two useful values of this type.&nbsp; Use the Boolean.valueOf() method (or Java 1.5 autoboxing) to create Boolean objects instead.","id":"de.upb.gpa.findbugs.567"},"de.upb.gpa.findbugs.205":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.205"},"de.upb.gpa.findbugs.326":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.326"},"de.upb.gpa.findbugs.447":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.447"},"de.upb.gpa.findbugs.568":{"description":"Creating new instances of java.lang.Boolean wastes memory, since Boolean objects are immutable and there are only two useful values of this type.&nbsp; Use the Boolean.valueOf() method (or Java 1.5 autoboxing) to create Boolean objects instead.","id":"de.upb.gpa.findbugs.568"},"de.upb.gpa.findbugs.202":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.202"},"de.upb.gpa.findbugs.323":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.323"},"de.upb.gpa.findbugs.444":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.444"},"de.upb.gpa.findbugs.565":{"description":"This code creates a database connect using a blank or empty password. This indicates that the database is not protected by a password.","id":"de.upb.gpa.findbugs.565"},"de.upb.gpa.findbugs.203":{"description":"The method invokes the execute or addBatch method on an SQL statement with a String that seemsto be dynamically generated. Consider usinga prepared statement instead. It is more efficient and less vulnerable toSQL injection attacks.","id":"de.upb.gpa.findbugs.203"},"de.upb.gpa.findbugs.324":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.324"},"de.upb.gpa.findbugs.445":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.445"},"de.upb.gpa.findbugs.566":{"description":"Creating new instances of java.lang.Boolean wastes memory, since Boolean objects are immutable and there are only two useful values of this type.&nbsp; Use the Boolean.valueOf() method (or Java 1.5 autoboxing) to create Boolean objects instead.","id":"de.upb.gpa.findbugs.566"},"de.upb.gpa.findbugs.208":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.208"},"de.upb.gpa.findbugs.329":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.329"},"de.upb.gpa.findbugs.209":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.209"},"de.upb.gpa.findbugs.206":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.206"},"de.upb.gpa.findbugs.327":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.327"},"de.upb.gpa.findbugs.448":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.448"},"de.upb.gpa.findbugs.569":{"description":"Creating new instances of java.lang.Boolean wastes memory, since Boolean objects are immutable and there are only two useful values of this type.&nbsp; Use the Boolean.valueOf() method (or Java 1.5 autoboxing) to create Boolean objects instead.","id":"de.upb.gpa.findbugs.569"},"de.upb.gpa.findbugs.207":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.207"},"de.upb.gpa.findbugs.328":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.328"},"de.upb.gpa.findbugs.449":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.449"},"de.upb.gpa.findbugs.560":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.560"},"de.upb.gpa.findbugs.200":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.200"},"de.upb.gpa.findbugs.321":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.321"},"de.upb.gpa.findbugs.442":{"description":"This method accesses the value of a Map entry, using a key that was retrieved froma keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid theMap.get(key) lookup.","id":"de.upb.gpa.findbugs.442"},"de.upb.gpa.findbugs.563":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.563"},"de.upb.gpa.findbugs.201":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.201"},"de.upb.gpa.findbugs.322":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.322"},"de.upb.gpa.findbugs.443":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.443"},"de.upb.gpa.findbugs.564":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.564"},"de.upb.gpa.findbugs.440":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.440"},"de.upb.gpa.findbugs.561":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.561"},"de.upb.gpa.findbugs.320":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.320"},"de.upb.gpa.findbugs.441":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.441"},"de.upb.gpa.findbugs.562":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.562"},"de.upb.gpa.findbugs.116":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.116"},"de.upb.gpa.findbugs.237":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.237"},"de.upb.gpa.findbugs.358":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.358"},"de.upb.gpa.findbugs.479":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.479"},"de.upb.gpa.findbugs.117":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.117"},"de.upb.gpa.findbugs.238":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.238"},"de.upb.gpa.findbugs.359":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.359"},"de.upb.gpa.findbugs.114":{"description":"This static field public but not final, andcould be changed by malicious code or by accident from another package. The field could be made final to avoid this vulnerability.","id":"de.upb.gpa.findbugs.114"},"de.upb.gpa.findbugs.235":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.235"},"de.upb.gpa.findbugs.356":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.356"},"de.upb.gpa.findbugs.477":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.477"},"de.upb.gpa.findbugs.115":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.115"},"de.upb.gpa.findbugs.236":{"description":"This field is never read.&nbsp; Consider removing it from the class.","id":"de.upb.gpa.findbugs.236"},"de.upb.gpa.findbugs.357":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.357"},"de.upb.gpa.findbugs.478":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.478"},"de.upb.gpa.findbugs.118":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.118"},"de.upb.gpa.findbugs.239":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.239"},"de.upb.gpa.findbugs.119":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.119"},"de.upb.gpa.findbugs.350":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.350"},"de.upb.gpa.findbugs.471":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.471"},"de.upb.gpa.findbugs.592":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.592"},"de.upb.gpa.findbugs.230":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.230"},"de.upb.gpa.findbugs.351":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.351"},"de.upb.gpa.findbugs.472":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.472"},"de.upb.gpa.findbugs.593":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.593"},"de.upb.gpa.findbugs.590":{"description":"A value is checked here to see whether it is null, but this value can'tbe null because it was previously dereferenced and if it were null a null pointerexception would have occurred at the earlier dereference.Essentially, this code and the previous dereferencedisagree as to whether this value is allowed to be null. Either the check is redundantor the previous dereference is erroneous.","id":"de.upb.gpa.findbugs.590"},"de.upb.gpa.findbugs.470":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.470"},"de.upb.gpa.findbugs.591":{"description":"A value is checked here to see whether it is null, but this value can'tbe null because it was previously dereferenced and if it were null a null pointerexception would have occurred at the earlier dereference.Essentially, this code and the previous dereferencedisagree as to whether this value is allowed to be null. Either the check is redundantor the previous dereference is erroneous.","id":"de.upb.gpa.findbugs.591"},"de.upb.gpa.findbugs.112":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.112"},"de.upb.gpa.findbugs.233":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.233"},"de.upb.gpa.findbugs.354":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.354"},"de.upb.gpa.findbugs.475":{"description":"This class contains an instance final field that is initialized to a compile-time static value. Consider making the field static.","id":"de.upb.gpa.findbugs.475"},"de.upb.gpa.findbugs.596":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.596"},"de.upb.gpa.findbugs.113":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.113"},"de.upb.gpa.findbugs.234":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.234"},"de.upb.gpa.findbugs.355":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.355"},"de.upb.gpa.findbugs.476":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.476"},"de.upb.gpa.findbugs.597":{"description":"This instance method writes to a static field. This is tricky to getcorrect if multiple instances are being manipulated,and generally bad practice.","id":"de.upb.gpa.findbugs.597"},"de.upb.gpa.findbugs.110":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.110"},"de.upb.gpa.findbugs.231":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.231"},"de.upb.gpa.findbugs.352":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.352"},"de.upb.gpa.findbugs.473":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.473"},"de.upb.gpa.findbugs.594":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.594"},"de.upb.gpa.findbugs.111":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.111"},"de.upb.gpa.findbugs.232":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.232"},"de.upb.gpa.findbugs.353":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.353"},"de.upb.gpa.findbugs.474":{"description":"This class contains an instance final field that is initialized to a compile-time static value. Consider making the field static.","id":"de.upb.gpa.findbugs.474"},"de.upb.gpa.findbugs.595":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.595"},"de.upb.gpa.findbugs.105":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.105"},"de.upb.gpa.findbugs.226":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.226"},"de.upb.gpa.findbugs.347":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.347"},"de.upb.gpa.findbugs.468":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.468"},"de.upb.gpa.findbugs.589":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.589"},"de.upb.gpa.findbugs.106":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.106"},"de.upb.gpa.findbugs.227":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.227"},"de.upb.gpa.findbugs.348":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.348"},"de.upb.gpa.findbugs.469":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.469"},"de.upb.gpa.findbugs.103":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.103"},"de.upb.gpa.findbugs.224":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.224"},"de.upb.gpa.findbugs.345":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.345"},"de.upb.gpa.findbugs.466":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.466"},"de.upb.gpa.findbugs.587":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.587"},"de.upb.gpa.findbugs.104":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.104"},"de.upb.gpa.findbugs.225":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.225"},"de.upb.gpa.findbugs.346":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.346"},"de.upb.gpa.findbugs.467":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.467"},"de.upb.gpa.findbugs.588":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.588"},"de.upb.gpa.findbugs.109":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.109"},"de.upb.gpa.findbugs.107":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.107"},"de.upb.gpa.findbugs.228":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.228"},"de.upb.gpa.findbugs.349":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.349"},"de.upb.gpa.findbugs.108":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.108"},"de.upb.gpa.findbugs.229":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.229"},"de.upb.gpa.findbugs.460":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.460"},"de.upb.gpa.findbugs.581":{"description":"The method seems to be building a String using concatenation in a loop.In each iteration, the String is converted to a StringBuffer\/StringBuilder, appended to, and converted back to a String. This can lead to a cost quadratic in the number of iterations, as the growing string is recopied in each iteration. Better performance can be obtained by usinga StringBuffer (or StringBuilder in Java 1.5) explicitly. For example:\/\/ This is badString s = \"\";for (int i = 0; i &lt; field.length; ++i) { s = s + field[i];}\/\/ This is betterStringBuffer buf = new StringBuffer();for (int i = 0; i &lt; field.length; ++i) { buf.append(field[i]);}String s = buf.toString();","id":"de.upb.gpa.findbugs.581"},"de.upb.gpa.findbugs.340":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.340"},"de.upb.gpa.findbugs.461":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.461"},"de.upb.gpa.findbugs.582":{"description":"Using the java.lang.String(String) constructor wastes memory because the object so constructed will be functionally indistinguishable from the String passed as a parameter.&nbsp; Just use the argument String directly.","id":"de.upb.gpa.findbugs.582"},"de.upb.gpa.findbugs.580":{"description":"Using the java.lang.String(String) constructor wastes memory because the object so constructed will be functionally indistinguishable from the String passed as a parameter.&nbsp; Just use the argument String directly.","id":"de.upb.gpa.findbugs.580"},"de.upb.gpa.findbugs.101":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.101"},"de.upb.gpa.findbugs.222":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.222"},"de.upb.gpa.findbugs.343":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.343"},"de.upb.gpa.findbugs.464":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.464"},"de.upb.gpa.findbugs.585":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.585"},"de.upb.gpa.findbugs.102":{"description":"The return value of this method should be checked. One commoncause of this warning is to invoke a method on an immutable object,thinking that it updates the object. For example, in the following codefragment,String dateString = getHeaderField(name);dateString.trim();the programmer seems to be thinking that the trim() method will updatethe String referenced by dateString. But since Strings are immutable, the trim()function returns a new String value, which is being ignored here. The codeshould be corrected to: String dateString = getHeaderField(name);dateString = dateString.trim();","id":"de.upb.gpa.findbugs.102"},"de.upb.gpa.findbugs.223":{"description":"The method invokes the execute or addBatch method on an SQL statement with a String that seemsto be dynamically generated. Consider usinga prepared statement instead. It is more efficient and less vulnerable toSQL injection attacks.","id":"de.upb.gpa.findbugs.223"},"de.upb.gpa.findbugs.344":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.344"},"de.upb.gpa.findbugs.465":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.465"},"de.upb.gpa.findbugs.586":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.586"},"de.upb.gpa.findbugs.220":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.220"},"de.upb.gpa.findbugs.341":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.341"},"de.upb.gpa.findbugs.462":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.462"},"de.upb.gpa.findbugs.583":{"description":"This code constructs a File object using a hard coded to an absolute pathname(e.g., new File(\"\/home\/dannyc\/workspace\/j2ee\/src\/share\/com\/sun\/enterprise\/deployment\");","id":"de.upb.gpa.findbugs.583"},"de.upb.gpa.findbugs.100":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.100"},"de.upb.gpa.findbugs.221":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.221"},"de.upb.gpa.findbugs.342":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.342"},"de.upb.gpa.findbugs.463":{"description":"Using the java.lang.String(String) constructor wastes memory because the object so constructed will be functionally indistinguishable from the String passed as a parameter.&nbsp; Just use the argument String directly.","id":"de.upb.gpa.findbugs.463"},"de.upb.gpa.findbugs.584":{"description":"A reference value which is null on some exception control path isdereferenced here.&nbsp; This may lead to a NullPointerExceptionwhen the code is executed.&nbsp;Note that because SpotBugs currently does not prune infeasible exception paths,this may be a false warning. Also note that SpotBugs considers the default case of a switch statement tobe an exception path, since the default case is often infeasible.","id":"de.upb.gpa.findbugs.584"},"de.upb.gpa.findbugs.380":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.380"},"de.upb.gpa.findbugs.138":{"description":"This instruction assigns a value to a local variable,but the value is not read or used in any subsequent instruction.Often, this indicates an error, because the value computed is neverused.Note that Sun's javac compiler often generates dead stores forfinal local variables. Because SpotBugs is a bytecode-based tool,there is no easy way to eliminate these false positives.","id":"de.upb.gpa.findbugs.138"},"de.upb.gpa.findbugs.259":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.259"},"de.upb.gpa.findbugs.139":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.139"},"de.upb.gpa.findbugs.136":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.136"},"de.upb.gpa.findbugs.257":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.257"},"de.upb.gpa.findbugs.378":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.378"},"de.upb.gpa.findbugs.499":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.499"},"de.upb.gpa.findbugs.137":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.137"},"de.upb.gpa.findbugs.258":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.258"},"de.upb.gpa.findbugs.379":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.379"},"de.upb.gpa.findbugs.130":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.130"},"de.upb.gpa.findbugs.251":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.251"},"de.upb.gpa.findbugs.372":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.372"},"de.upb.gpa.findbugs.493":{"description":"A mutable static field could be changed by malicious code or by accident. The field could be made package protected to avoid this vulnerability.","id":"de.upb.gpa.findbugs.493"},"de.upb.gpa.findbugs.131":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.131"},"de.upb.gpa.findbugs.252":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.252"},"de.upb.gpa.findbugs.373":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.373"},"de.upb.gpa.findbugs.494":{"description":"A mutable static field could be changed by malicious code or by accident. The field could be made package protected to avoid this vulnerability.","id":"de.upb.gpa.findbugs.494"},"de.upb.gpa.findbugs.370":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.370"},"de.upb.gpa.findbugs.491":{"description":"Using the java.lang.String(String) constructor wastes memory because the object so constructed will be functionally indistinguishable from the String passed as a parameter.&nbsp; Just use the argument String directly.","id":"de.upb.gpa.findbugs.491"},"de.upb.gpa.findbugs.250":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.250"},"de.upb.gpa.findbugs.371":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.371"},"de.upb.gpa.findbugs.492":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.492"},"de.upb.gpa.findbugs.134":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.134"},"de.upb.gpa.findbugs.255":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.255"},"de.upb.gpa.findbugs.376":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.376"},"de.upb.gpa.findbugs.497":{"description":"This field is never used.&nbsp; Consider removing it from the class.","id":"de.upb.gpa.findbugs.497"},"de.upb.gpa.findbugs.135":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.135"},"de.upb.gpa.findbugs.256":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.256"},"de.upb.gpa.findbugs.377":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.377"},"de.upb.gpa.findbugs.498":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.498"},"de.upb.gpa.findbugs.132":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.132"},"de.upb.gpa.findbugs.253":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.253"},"de.upb.gpa.findbugs.374":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.374"},"de.upb.gpa.findbugs.495":{"description":"This static field public but not final, andcould be changed by malicious code or by accident from another package. The field could be made final to avoid this vulnerability.","id":"de.upb.gpa.findbugs.495"},"de.upb.gpa.findbugs.133":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.133"},"de.upb.gpa.findbugs.254":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.254"},"de.upb.gpa.findbugs.375":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.375"},"de.upb.gpa.findbugs.496":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.496"},"de.upb.gpa.findbugs.490":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.490"},"de.upb.gpa.findbugs.127":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.127"},"de.upb.gpa.findbugs.248":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.248"},"de.upb.gpa.findbugs.369":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.369"},"de.upb.gpa.findbugs.128":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.128"},"de.upb.gpa.findbugs.249":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.249"},"de.upb.gpa.findbugs.125":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.125"},"de.upb.gpa.findbugs.246":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.246"},"de.upb.gpa.findbugs.367":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.367"},"de.upb.gpa.findbugs.488":{"description":"This code compares java.lang.String objects for referenceequality using the == or != operators.Unless both strings are either constants in a source file, or have beeninterned using the String.intern() method, the same stringvalue may be represented by two different String objects. Considerusing the equals(Object) method instead.","id":"de.upb.gpa.findbugs.488"},"de.upb.gpa.findbugs.126":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.126"},"de.upb.gpa.findbugs.247":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.247"},"de.upb.gpa.findbugs.368":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.368"},"de.upb.gpa.findbugs.489":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.489"},"de.upb.gpa.findbugs.129":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.129"},"de.upb.gpa.findbugs.240":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.240"},"de.upb.gpa.findbugs.361":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.361"},"de.upb.gpa.findbugs.482":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.482"},"de.upb.gpa.findbugs.120":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.120"},"de.upb.gpa.findbugs.241":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.241"},"de.upb.gpa.findbugs.362":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.362"},"de.upb.gpa.findbugs.483":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.483"},"de.upb.gpa.findbugs.480":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.480"},"de.upb.gpa.findbugs.360":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.360"},"de.upb.gpa.findbugs.481":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.481"},"de.upb.gpa.findbugs.123":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.123"},"de.upb.gpa.findbugs.244":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.244"},"de.upb.gpa.findbugs.365":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.365"},"de.upb.gpa.findbugs.486":{"description":"This instance method writes to a static field. This is tricky to getcorrect if multiple instances are being manipulated,and generally bad practice.","id":"de.upb.gpa.findbugs.486"},"de.upb.gpa.findbugs.124":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.124"},"de.upb.gpa.findbugs.245":{"description":"This class contains an instance final field that is initialized to a compile-time static value. Consider making the field static.","id":"de.upb.gpa.findbugs.245"},"de.upb.gpa.findbugs.366":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.366"},"de.upb.gpa.findbugs.487":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.487"},"de.upb.gpa.findbugs.121":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.121"},"de.upb.gpa.findbugs.242":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.242"},"de.upb.gpa.findbugs.363":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.363"},"de.upb.gpa.findbugs.484":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.484"},"de.upb.gpa.findbugs.122":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.122"},"de.upb.gpa.findbugs.243":{"description":"A reference value which is null on some exception control path isdereferenced here.&nbsp; This may lead to a NullPointerExceptionwhen the code is executed.&nbsp;Note that because SpotBugs currently does not prune infeasible exception paths,this may be a false warning. Also note that SpotBugs considers the default case of a switch statement tobe an exception path, since the default case is often infeasible.","id":"de.upb.gpa.findbugs.243"},"de.upb.gpa.findbugs.364":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.364"},"de.upb.gpa.findbugs.485":{"description":"This instance method writes to a static field. This is tricky to getcorrect if multiple instances are being manipulated,and generally bad practice.","id":"de.upb.gpa.findbugs.485"},"de.upb.gpa.findbugs.280":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.280"},"de.upb.gpa.findbugs.160":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.160"},"de.upb.gpa.findbugs.281":{"description":"This method returns a value that is not checked. The return value should be checkedsince it can indicate an unusual or unexpected function execution. Forexample, the File.delete() method returns falseif the file could not be successfully deleted (rather thanthrowing an Exception).If you don't check the result, you won't notice if the method invocationsignals unexpected behavior by returning an atypical return value.","id":"de.upb.gpa.findbugs.281"},"de.upb.gpa.findbugs.158":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.158"},"de.upb.gpa.findbugs.279":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.279"},"de.upb.gpa.findbugs.159":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.159"},"de.upb.gpa.findbugs.152":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.152"},"de.upb.gpa.findbugs.273":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.273"},"de.upb.gpa.findbugs.394":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.394"},"de.upb.gpa.findbugs.153":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.153"},"de.upb.gpa.findbugs.274":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.274"},"de.upb.gpa.findbugs.395":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.395"},"de.upb.gpa.findbugs.150":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.150"},"de.upb.gpa.findbugs.271":{"description":"The code contains a conditional test is performed twice, one right after the other(e.g., x == 0 || x == 0). Perhaps the second occurrence is intended to be something else(e.g., x == 0 || y == 0).","id":"de.upb.gpa.findbugs.271"},"de.upb.gpa.findbugs.392":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.392"},"de.upb.gpa.findbugs.151":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.151"},"de.upb.gpa.findbugs.272":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.272"},"de.upb.gpa.findbugs.393":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.393"},"de.upb.gpa.findbugs.156":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.156"},"de.upb.gpa.findbugs.277":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.277"},"de.upb.gpa.findbugs.398":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.398"},"de.upb.gpa.findbugs.157":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.157"},"de.upb.gpa.findbugs.278":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.278"},"de.upb.gpa.findbugs.399":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.399"},"de.upb.gpa.findbugs.154":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.154"},"de.upb.gpa.findbugs.275":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.275"},"de.upb.gpa.findbugs.396":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.396"},"de.upb.gpa.findbugs.155":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.155"},"de.upb.gpa.findbugs.276":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.276"},"de.upb.gpa.findbugs.397":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.397"},"de.upb.gpa.findbugs.390":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.390"},"de.upb.gpa.findbugs.270":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.270"},"de.upb.gpa.findbugs.391":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.391"},"de.upb.gpa.findbugs.149":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.149"},"de.upb.gpa.findbugs.147":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.147"},"de.upb.gpa.findbugs.268":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.268"},"de.upb.gpa.findbugs.389":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.389"},"de.upb.gpa.findbugs.148":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.148"},"de.upb.gpa.findbugs.269":{"description":"Using the java.lang.String(String) constructor wastes memory because the object so constructed will be functionally indistinguishable from the String passed as a parameter.&nbsp; Just use the argument String directly.","id":"de.upb.gpa.findbugs.269"},"de.upb.gpa.findbugs.141":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.141"},"de.upb.gpa.findbugs.262":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.262"},"de.upb.gpa.findbugs.383":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.383"},"de.upb.gpa.findbugs.142":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.142"},"de.upb.gpa.findbugs.263":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.263"},"de.upb.gpa.findbugs.384":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.384"},"de.upb.gpa.findbugs.260":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.260"},"de.upb.gpa.findbugs.381":{"description":"The method invokes the execute or addBatch method on an SQL statement with a String that seemsto be dynamically generated. Consider usinga prepared statement instead. It is more efficient and less vulnerable toSQL injection attacks.","id":"de.upb.gpa.findbugs.381"},"de.upb.gpa.findbugs.140":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.140"},"de.upb.gpa.findbugs.261":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.261"},"de.upb.gpa.findbugs.382":{"description":"The method invokes the execute or addBatch method on an SQL statement with a String that seemsto be dynamically generated. Consider usinga prepared statement instead. It is more efficient and less vulnerable toSQL injection attacks.","id":"de.upb.gpa.findbugs.382"},"de.upb.gpa.findbugs.145":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.145"},"de.upb.gpa.findbugs.266":{"description":"The method creates an IO stream object, does not assign it to anyfields, pass it to other methods that might close it,or return it, and does not appear to closethe stream on all paths out of the method.&nbsp; This may result ina file descriptor leak.&nbsp; It is generally a goodidea to use a finally block to ensure that streams areclosed.","id":"de.upb.gpa.findbugs.266"},"de.upb.gpa.findbugs.387":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.387"},"de.upb.gpa.findbugs.146":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.146"},"de.upb.gpa.findbugs.267":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.267"},"de.upb.gpa.findbugs.388":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.388"},"de.upb.gpa.findbugs.143":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.143"},"de.upb.gpa.findbugs.264":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.264"},"de.upb.gpa.findbugs.385":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.385"},"de.upb.gpa.findbugs.144":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.144"},"de.upb.gpa.findbugs.265":{"description":"The method creates an IO stream object, does not assign it to anyfields, pass it to other methods that might close it,or return it, and does not appear to closethe stream on all paths out of the method.&nbsp; This may result ina file descriptor leak.&nbsp; It is generally a goodidea to use a finally block to ensure that streams areclosed.","id":"de.upb.gpa.findbugs.265"},"de.upb.gpa.findbugs.386":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.386"},"de.upb.gpa.findbugs.181":{"description":"A reference value which is null on some exception control path isdereferenced here.&nbsp; This may lead to a NullPointerExceptionwhen the code is executed.&nbsp;Note that because SpotBugs currently does not prune infeasible exception paths,this may be a false warning. Also note that SpotBugs considers the default case of a switch statement tobe an exception path, since the default case is often infeasible.","id":"de.upb.gpa.findbugs.181"},"de.upb.gpa.findbugs.182":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.182"},"de.upb.gpa.findbugs.180":{"description":"A reference value which is null on some exception control path isdereferenced here.&nbsp; This may lead to a NullPointerExceptionwhen the code is executed.&nbsp;Note that because SpotBugs currently does not prune infeasible exception paths,this may be a false warning. Also note that SpotBugs considers the default case of a switch statement tobe an exception path, since the default case is often infeasible.","id":"de.upb.gpa.findbugs.180"},"de.upb.gpa.findbugs.174":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.174"},"de.upb.gpa.findbugs.295":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.295"},"de.upb.gpa.findbugs.175":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.175"},"de.upb.gpa.findbugs.296":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.296"},"de.upb.gpa.findbugs.172":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.172"},"de.upb.gpa.findbugs.293":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.293"},"de.upb.gpa.findbugs.173":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.173"},"de.upb.gpa.findbugs.294":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.294"},"de.upb.gpa.findbugs.178":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.178"},"de.upb.gpa.findbugs.299":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.299"},"de.upb.gpa.findbugs.179":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.179"},"de.upb.gpa.findbugs.176":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.176"},"de.upb.gpa.findbugs.297":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.297"},"de.upb.gpa.findbugs.177":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.177"},"de.upb.gpa.findbugs.298":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.298"},"de.upb.gpa.findbugs.170":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.170"},"de.upb.gpa.findbugs.291":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.291"},"de.upb.gpa.findbugs.171":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.171"},"de.upb.gpa.findbugs.292":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.292"},"de.upb.gpa.findbugs.290":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.290"},"de.upb.gpa.findbugs.169":{"description":"This instruction assigns a value to a local variable,but the value is not read or used in any subsequent instruction.Often, this indicates an error, because the value computed is neverused.Note that Sun's javac compiler often generates dead stores forfinal local variables. Because SpotBugs is a bytecode-based tool,there is no easy way to eliminate these false positives.","id":"de.upb.gpa.findbugs.169"},"de.upb.gpa.findbugs.163":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.163"},"de.upb.gpa.findbugs.284":{"description":"The method invokes the execute or addBatch method on an SQL statement with a String that seemsto be dynamically generated. Consider usinga prepared statement instead. It is more efficient and less vulnerable toSQL injection attacks.","id":"de.upb.gpa.findbugs.284"},"de.upb.gpa.findbugs.164":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.164"},"de.upb.gpa.findbugs.285":{"description":"The method invokes the execute or addBatch method on an SQL statement with a String that seemsto be dynamically generated. Consider usinga prepared statement instead. It is more efficient and less vulnerable toSQL injection attacks.","id":"de.upb.gpa.findbugs.285"},"de.upb.gpa.findbugs.161":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.161"},"de.upb.gpa.findbugs.282":{"description":"This method returns a value that is not checked. The return value should be checkedsince it can indicate an unusual or unexpected function execution. Forexample, the File.delete() method returns falseif the file could not be successfully deleted (rather thanthrowing an Exception).If you don't check the result, you won't notice if the method invocationsignals unexpected behavior by returning an atypical return value.","id":"de.upb.gpa.findbugs.282"},"de.upb.gpa.findbugs.162":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.162"},"de.upb.gpa.findbugs.283":{"description":"This method returns a value that is not checked. The return value should be checkedsince it can indicate an unusual or unexpected function execution. Forexample, the File.delete() method returns falseif the file could not be successfully deleted (rather thanthrowing an Exception).If you don't check the result, you won't notice if the method invocationsignals unexpected behavior by returning an atypical return value.","id":"de.upb.gpa.findbugs.283"},"de.upb.gpa.findbugs.167":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.167"},"de.upb.gpa.findbugs.288":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.288"},"de.upb.gpa.findbugs.168":{"description":"The method invokes the execute or addBatch method on an SQL statement with a String that seemsto be dynamically generated. Consider usinga prepared statement instead. It is more efficient and less vulnerable toSQL injection attacks.","id":"de.upb.gpa.findbugs.168"},"de.upb.gpa.findbugs.289":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.289"},"de.upb.gpa.findbugs.165":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.165"},"de.upb.gpa.findbugs.286":{"description":"The method invokes the execute or addBatch method on an SQL statement with a String that seemsto be dynamically generated. Consider usinga prepared statement instead. It is more efficient and less vulnerable toSQL injection attacks.","id":"de.upb.gpa.findbugs.286"},"de.upb.gpa.findbugs.166":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.166"},"de.upb.gpa.findbugs.287":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.287"},"de.upb.gpa.findbugs.1":{"description":"Using the java.lang.String(String) constructor wastes memory because the object so constructed will be functionally indistinguishable from the String passed as a parameter.&nbsp; Just use the argument String directly.","id":"de.upb.gpa.findbugs.1"},"de.upb.gpa.findbugs.2":{"description":"A mutable static field could be changed by malicious code or by accident from another package. Unfortunately, the way the field is used doesn't allow any easy fix to this problem.","id":"de.upb.gpa.findbugs.2"},"de.upb.gpa.findbugs.3":{"description":"A mutable static field could be changed by malicious code or by accident. The field could be made package protected to avoid this vulnerability.","id":"de.upb.gpa.findbugs.3"},"de.upb.gpa.findbugs.4":{"description":"The variable referenced at this point is known to be null due to an earlier check against null. Although this is valid, it might be a mistake (perhaps youintended to refer to a different variable, or perhaps the earlier check to see if thevariable is null should have been a check to see if it was non-null).","id":"de.upb.gpa.findbugs.4"},"de.upb.gpa.findbugs.196":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.196"},"de.upb.gpa.findbugs.5":{"description":"This method call passes a null value for a non-null method parameter. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.","id":"de.upb.gpa.findbugs.5"},"de.upb.gpa.findbugs.197":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.197"},"de.upb.gpa.findbugs.6":{"description":"This Serializable class defines a non-primitive instance field which is neither transient,Serializable, or java.lang.Object, and does not appear to implementthe Externalizable interface or thereadObject() and writeObject() methods.&nbsp;Objects of this class will not be deserialized correctly if a non-Serializableobject is stored in this field.","id":"de.upb.gpa.findbugs.6"},"de.upb.gpa.findbugs.194":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.194"},"de.upb.gpa.findbugs.7":{"description":"As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.The detector has found a call to an instance of DateFormat that has been obtained via a staticfield. This looks suspicious.For more information on this see JDK Bug #6231579and JDK Bug #6178997.","id":"de.upb.gpa.findbugs.7"},"de.upb.gpa.findbugs.195":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.195"},"de.upb.gpa.findbugs.8":{"description":"As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of theapplication.You may also experience serialization problems.Using an instance field is recommended.For more information on this see JDK Bug #6231579and JDK Bug #6178997.","id":"de.upb.gpa.findbugs.8"},"de.upb.gpa.findbugs.9":{"description":"This instance method writes to a static field. This is tricky to getcorrect if multiple instances are being manipulated,and generally bad practice.","id":"de.upb.gpa.findbugs.9"},"de.upb.gpa.findbugs.198":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.198"},"de.upb.gpa.findbugs.199":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.199"},"de.upb.gpa.findbugs.192":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.192"},"de.upb.gpa.findbugs.193":{"description":"This instance method writes to a static field. This is tricky to getcorrect if multiple instances are being manipulated,and generally bad practice.","id":"de.upb.gpa.findbugs.193"},"de.upb.gpa.findbugs.190":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.190"},"de.upb.gpa.findbugs.191":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.191"},"de.upb.gpa.findbugs.99":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.99"},"de.upb.gpa.findbugs.98":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.98"},"de.upb.gpa.findbugs.97":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.97"},"de.upb.gpa.findbugs.96":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.96"},"de.upb.gpa.findbugs.95":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.95"},"de.upb.gpa.findbugs.94":{"description":"The method invokes the execute or addBatch method on an SQL statement with a String that seemsto be dynamically generated. Consider usinga prepared statement instead. It is more efficient and less vulnerable toSQL injection attacks.","id":"de.upb.gpa.findbugs.94"},"de.upb.gpa.findbugs.185":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.185"},"de.upb.gpa.findbugs.93":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.93"},"de.upb.gpa.findbugs.186":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.186"},"de.upb.gpa.findbugs.92":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.92"},"de.upb.gpa.findbugs.183":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.183"},"de.upb.gpa.findbugs.91":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.91"},"de.upb.gpa.findbugs.184":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.184"},"de.upb.gpa.findbugs.90":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.90"},"de.upb.gpa.findbugs.189":{"description":"Using the java.lang.String(String) constructor wastes memory because the object so constructed will be functionally indistinguishable from the String passed as a parameter.&nbsp; Just use the argument String directly.","id":"de.upb.gpa.findbugs.189"},"de.upb.gpa.findbugs.187":{"description":"A value is checked here to see whether it is null, but this value can'tbe null because it was previously dereferenced and if it were null a null pointerexception would have occurred at the earlier dereference.Essentially, this code and the previous dereferencedisagree as to whether this value is allowed to be null. Either the check is redundantor the previous dereference is erroneous.","id":"de.upb.gpa.findbugs.187"},"de.upb.gpa.findbugs.188":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.188"},"de.upb.gpa.findbugs.69":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.69"},"de.upb.gpa.findbugs.68":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.68"},"de.upb.gpa.findbugs.67":{"description":"This instruction assigns a value to a local variable,but the value is not read or used in any subsequent instruction.Often, this indicates an error, because the value computed is neverused.Note that Sun's javac compiler often generates dead stores forfinal local variables. Because SpotBugs is a bytecode-based tool,there is no easy way to eliminate these false positives.","id":"de.upb.gpa.findbugs.67"},"de.upb.gpa.findbugs.66":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.66"},"de.upb.gpa.findbugs.65":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.65"},"de.upb.gpa.findbugs.64":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.64"},"de.upb.gpa.findbugs.63":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.63"},"de.upb.gpa.findbugs.62":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.62"},"de.upb.gpa.findbugs.61":{"description":"This method returns a value that is not checked. The return value should be checkedsince it can indicate an unusual or unexpected function execution. Forexample, the File.delete() method returns falseif the file could not be successfully deleted (rather thanthrowing an Exception).If you don't check the result, you won't notice if the method invocationsignals unexpected behavior by returning an atypical return value.","id":"de.upb.gpa.findbugs.61"},"de.upb.gpa.findbugs.60":{"description":"The return value of this method should be checked. One commoncause of this warning is to invoke a method on an immutable object,thinking that it updates the object. For example, in the following codefragment,String dateString = getHeaderField(name);dateString.trim();the programmer seems to be thinking that the trim() method will updatethe String referenced by dateString. But since Strings are immutable, the trim()function returns a new String value, which is being ignored here. The codeshould be corrected to: String dateString = getHeaderField(name);dateString = dateString.trim();","id":"de.upb.gpa.findbugs.60"},"de.upb.gpa.findbugs.59":{"description":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}","id":"de.upb.gpa.findbugs.59"},"de.upb.gpa.findbugs.58":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.58"},"de.upb.gpa.findbugs.57":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.57"},"de.upb.gpa.findbugs.56":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.56"},"de.upb.gpa.findbugs.55":{"description":"The return value from a method is dereferenced without a null check,and the return value of that method is one that should generally be checkedfor null. This may lead to a NullPointerException when the code is executed.","id":"de.upb.gpa.findbugs.55"},"de.upb.gpa.findbugs.54":{"description":"The return value from a method is dereferenced without a null check,and the return value of that method is one that should generally be checkedfor null. This may lead to a NullPointerException when the code is executed.","id":"de.upb.gpa.findbugs.54"},"de.upb.gpa.findbugs.53":{"description":"A reference value which is null on some exception control path isdereferenced here.&nbsp; This may lead to a NullPointerExceptionwhen the code is executed.&nbsp;Note that because SpotBugs currently does not prune infeasible exception paths,this may be a false warning. Also note that SpotBugs considers the default case of a switch statement tobe an exception path, since the default case is often infeasible.","id":"de.upb.gpa.findbugs.53"},"de.upb.gpa.findbugs.52":{"description":"Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.","id":"de.upb.gpa.findbugs.52"},"de.upb.gpa.findbugs.51":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.51"},"de.upb.gpa.findbugs.50":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.50"},"de.upb.gpa.findbugs.89":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.89"},"de.upb.gpa.findbugs.88":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.88"},"de.upb.gpa.findbugs.87":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.87"},"de.upb.gpa.findbugs.86":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.86"},"de.upb.gpa.findbugs.85":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.85"},"de.upb.gpa.findbugs.84":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.84"},"de.upb.gpa.findbugs.83":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.83"},"de.upb.gpa.findbugs.82":{"description":"This class overrides equals(Object), but does not override hashCode(), and inherits the implementation of hashCode() from java.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes.If you don't think instances of this class will ever be inserted into a HashMap\/HashTable,the recommended hashCode implementation to use is:public int hashCode() { assert false : \"hashCode not designed\"; return 42; \/\/ any arbitrary constant will do}","id":"de.upb.gpa.findbugs.82"},"de.upb.gpa.findbugs.81":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.81"},"de.upb.gpa.findbugs.80":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.80"},"de.upb.gpa.findbugs.79":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.79"},"de.upb.gpa.findbugs.78":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.78"},"de.upb.gpa.findbugs.77":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.77"},"de.upb.gpa.findbugs.76":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.76"},"de.upb.gpa.findbugs.75":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.75"},"de.upb.gpa.findbugs.74":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.74"},"de.upb.gpa.findbugs.73":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.73"},"de.upb.gpa.findbugs.72":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.72"},"de.upb.gpa.findbugs.71":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.71"},"de.upb.gpa.findbugs.70":{"description":"This field is never used.&nbsp; Consider removing it from the class.","id":"de.upb.gpa.findbugs.70"},"de.upb.gpa.findbugs.29":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.29"},"de.upb.gpa.findbugs.28":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.28"},"de.upb.gpa.findbugs.27":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.27"},"de.upb.gpa.findbugs.26":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.26"},"de.upb.gpa.findbugs.25":{"description":"This instance method writes to a static field. This is tricky to getcorrect if multiple instances are being manipulated,and generally bad practice.","id":"de.upb.gpa.findbugs.25"},"de.upb.gpa.findbugs.24":{"description":"The method invokes the execute or addBatch method on an SQL statement with a String that seemsto be dynamically generated. Consider usinga prepared statement instead. It is more efficient and less vulnerable toSQL injection attacks.","id":"de.upb.gpa.findbugs.24"},"de.upb.gpa.findbugs.23":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.23"},"de.upb.gpa.findbugs.22":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.22"},"de.upb.gpa.findbugs.21":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.21"},"de.upb.gpa.findbugs.20":{"description":"This implementation of equals(Object) violates the contract defined by java.lang.Object.equals() because it does not check for null being passed as the argument. All equals() methods should return false if passed a null value.","id":"de.upb.gpa.findbugs.20"},"de.upb.gpa.findbugs.19":{"description":"This class overrides equals(Object), but does not override hashCode(), and inherits the implementation of hashCode() from java.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes.If you don't think instances of this class will ever be inserted into a HashMap\/HashTable,the recommended hashCode implementation to use is:public int hashCode() { assert false : \"hashCode not designed\"; return 42; \/\/ any arbitrary constant will do}","id":"de.upb.gpa.findbugs.19"},"de.upb.gpa.findbugs.18":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.18"},"de.upb.gpa.findbugs.17":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.17"},"de.upb.gpa.findbugs.16":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.16"},"de.upb.gpa.findbugs.15":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.15"},"de.upb.gpa.findbugs.14":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.14"},"de.upb.gpa.findbugs.13":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.13"},"de.upb.gpa.findbugs.12":{"description":"The equals(Object o) method shouldn't make any assumptionsabout the type of o. It should simply returnfalse if o is not the same type as this.","id":"de.upb.gpa.findbugs.12"},"de.upb.gpa.findbugs.11":{"description":"Creating a new java.lang.String object using the no-argument constructor wastes memory because the object so created will be functionally indistinguishable from the empty string constant \"\".&nbsp; Java guarantees that identical string constants will be represented by the same String object.&nbsp; Therefore, you should just use the empty string constant directly.","id":"de.upb.gpa.findbugs.11"},"de.upb.gpa.findbugs.10":{"description":"This instance method writes to a static field. This is tricky to getcorrect if multiple instances are being manipulated,and generally bad practice.","id":"de.upb.gpa.findbugs.10"},"de.upb.gpa.findbugs.49":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.49"},"de.upb.gpa.findbugs.48":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.48"},"de.upb.gpa.findbugs.47":{"description":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.","id":"de.upb.gpa.findbugs.47"},"de.upb.gpa.findbugs.46":{"description":"This method might ignore an exception.&nbsp; In general, exceptions should be handled or reported in some way, or they should be thrown out of the method.","id":"de.upb.gpa.findbugs.46"},"de.upb.gpa.findbugs.45":{"description":"This method might ignore an exception.&nbsp; In general, exceptions should be handled or reported in some way, or they should be thrown out of the method.","id":"de.upb.gpa.findbugs.45"},"de.upb.gpa.findbugs.44":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.44"},"de.upb.gpa.findbugs.43":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.43"},"de.upb.gpa.findbugs.42":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.42"},"de.upb.gpa.findbugs.41":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.41"},"de.upb.gpa.findbugs.40":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.40"},"de.upb.gpa.findbugs.39":{"description":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException.","id":"de.upb.gpa.findbugs.39"},"de.upb.gpa.findbugs.38":{"description":"Using the java.lang.String(String) constructor wastes memory because the object so constructed will be functionally indistinguishable from the String passed as a parameter.&nbsp; Just use the argument String directly.","id":"de.upb.gpa.findbugs.38"},"de.upb.gpa.findbugs.37":{"description":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte.","id":"de.upb.gpa.findbugs.37"},"de.upb.gpa.findbugs.36":{"description":"This method contains a switch statement where default case is missing. Usually you need to provide a default case. Because the analysis only looks at the generated bytecode, this warning can be incorrect triggered ifthe default case is at the end of the switch statement and the switch statement doesn't contain break statements for othercases.","id":"de.upb.gpa.findbugs.36"},"de.upb.gpa.findbugs.35":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.35"},"de.upb.gpa.findbugs.34":{"description":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database.","id":"de.upb.gpa.findbugs.34"},"de.upb.gpa.findbugs.33":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.33"},"de.upb.gpa.findbugs.32":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.32"},"de.upb.gpa.findbugs.31":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.31"},"de.upb.gpa.findbugs.30":{"description":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique.","id":"de.upb.gpa.findbugs.30"}},"results":[{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::Catcher::doPost","analysisTarget":{"region":{"startLine":"83"},"uri":"org\/owasp\/webgoat\/Catcher.java"}}],"ruleId":"de.upb.gpa.findbugs.1","message":"Performance - Method invokes inefficient new String(String) constructor"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::HammerHead","analysisTarget":{"region":{"startLine":"56"},"uri":"org\/owasp\/webgoat\/session\/Course.java"}}],"ruleId":"de.upb.gpa.findbugs.2","message":"Malicious code - Field isn't final and can't be protected from malicious code"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::HammerHead","analysisTarget":{"region":{"startLine":"72"},"uri":"org\/owasp\/webgoat\/HammerHead.java"}}],"ruleId":"de.upb.gpa.findbugs.3","message":"Malicious code - Field should be package protected"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::HammerHead::writeScreen","analysisTarget":{"region":{"startLine":"465"},"uri":"org\/owasp\/webgoat\/HammerHead.java"}}],"ruleId":"de.upb.gpa.findbugs.4","message":"Style - Load of known null value"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::HammerHead::returnConnection","analysisTarget":{"region":{"startLine":"122"},"uri":"org\/owasp\/webgoat\/HammerHead.java"}}],"ruleId":"de.upb.gpa.findbugs.5","message":"Correctness - Method call passes null for non-null parameter"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::HammerHead","analysisTarget":{"region":{"startLine":"89"},"uri":"org\/owasp\/webgoat\/session\/WebgoatContext.java"}}],"ruleId":"de.upb.gpa.findbugs.6","message":"Bad practice - Non-transient non-serializable instance field in serializable class"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::HammerHead::setTimeZone","analysisTarget":{"region":{"startLine":"254"},"uri":"org\/owasp\/webgoat\/HammerHead.java"}}],"ruleId":"de.upb.gpa.findbugs.7","message":"Multi-threading - Call to static DateFormat"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::HammerHead","analysisTarget":{"region":{"startLine":"72"},"uri":"org\/owasp\/webgoat\/HammerHead.java"}}],"ruleId":"de.upb.gpa.findbugs.8","message":"Multi-threading - Static DateFormat"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::HammerHead::init","analysisTarget":{"region":{"startLine":"254"},"uri":"org\/owasp\/webgoat\/HammerHead.java"}}],"ruleId":"de.upb.gpa.findbugs.9","message":"Style - Write to static field from instance method"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::HammerHead::init","analysisTarget":{"region":{"startLine":"254"},"uri":"org\/owasp\/webgoat\/HammerHead.java"}}],"ruleId":"de.upb.gpa.findbugs.10","message":"Style - Write to static field from instance method"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::LessonSource::writeSource","analysisTarget":{"region":{"startLine":"194"},"uri":"org\/owasp\/webgoat\/LessonSource.java"}}],"ruleId":"de.upb.gpa.findbugs.11","message":"Performance - Method invokes inefficient new String() constructor"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::AbstractLesson::equals","analysisTarget":{"region":{"startLine":"189"},"uri":"org\/owasp\/webgoat\/lessons\/AbstractLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.12","message":"Bad practice - Equals method should not assume anything about the type of its argument"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::AbstractLesson::<init>","analysisTarget":{"region":{"startLine":"405"},"uri":"org\/owasp\/webgoat\/lessons\/AbstractLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.13","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::AbstractLesson::<init>","analysisTarget":{"region":{"startLine":"546"},"uri":"org\/owasp\/webgoat\/lessons\/AbstractLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.14","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::AbstractLesson::<init>","analysisTarget":{"region":{"startLine":"504"},"uri":"org\/owasp\/webgoat\/lessons\/AbstractLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.15","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::AbstractLesson::<init>","analysisTarget":{"region":{"startLine":"732"},"uri":"org\/owasp\/webgoat\/lessons\/AbstractLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.16","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::AbstractLesson::valueOf","analysisTarget":{"region":{"startLine":"117"},"uri":"org\/owasp\/webgoat\/lessons\/AbstractLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.17","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::AbstractLesson::valueOf","analysisTarget":{"region":{"startLine":"140"},"uri":"org\/owasp\/webgoat\/lessons\/AbstractLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.18","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::AbstractLesson::equals","analysisTarget":{"region":{"startLine":"189"},"uri":"org\/owasp\/webgoat\/lessons\/AbstractLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.19","message":"Bad practice - Class defines equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::AbstractLesson::equals","analysisTarget":{"region":{"startLine":"189"},"uri":"org\/owasp\/webgoat\/lessons\/AbstractLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.20","message":"Bad practice - equals() method does not check for null argument"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::isAuthorized","analysisTarget":{"region":{"startLine":"645"},"uri":"org\/owasp\/webgoat\/lessons\/AbstractLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.21","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::isAuthorized","analysisTarget":{"region":{"startLine":"645"},"uri":"org\/owasp\/webgoat\/lessons\/AbstractLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.22","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::AbstractLesson::isAuthorized","analysisTarget":{"region":{"startLine":"645"},"uri":"org\/owasp\/webgoat\/lessons\/AbstractLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.23","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::AbstractLesson::isAuthorized","analysisTarget":{"region":{"startLine":"645"},"uri":"org\/owasp\/webgoat\/lessons\/AbstractLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.24","message":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::AbstractLesson::<init>","analysisTarget":{"region":{"startLine":"117"},"uri":"org\/owasp\/webgoat\/lessons\/AbstractLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.25","message":"Style - Write to static field from instance method"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::AccessControlMatrix::valueOf","analysisTarget":{"region":{"startLine":"50"},"uri":"org\/owasp\/webgoat\/lessons\/AccessControlMatrix.java"}}],"ruleId":"de.upb.gpa.findbugs.26","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::AccessControlMatrix","analysisTarget":{"region":{"startLine":"48"},"uri":"org\/owasp\/webgoat\/lessons\/AccessControlMatrix.java"}}],"ruleId":"de.upb.gpa.findbugs.27","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BackDoors::valueOf","analysisTarget":{"region":{"startLine":"59"},"uri":"org\/owasp\/webgoat\/lessons\/BackDoors.java"}}],"ruleId":"de.upb.gpa.findbugs.28","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BackDoors","analysisTarget":{"region":{"startLine":"56"},"uri":"org\/owasp\/webgoat\/lessons\/BackDoors.java"}}],"ruleId":"de.upb.gpa.findbugs.29","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::concept1","analysisTarget":{"region":{"startLine":"125"},"uri":"org\/owasp\/webgoat\/lessons\/BackDoors.java"}}],"ruleId":"de.upb.gpa.findbugs.30","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::concept1","analysisTarget":{"region":{"startLine":"125"},"uri":"org\/owasp\/webgoat\/lessons\/BackDoors.java"}}],"ruleId":"de.upb.gpa.findbugs.31","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::concept2","analysisTarget":{"region":{"startLine":"161"},"uri":"org\/owasp\/webgoat\/lessons\/BackDoors.java"}}],"ruleId":"de.upb.gpa.findbugs.32","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::concept2","analysisTarget":{"region":{"startLine":"161"},"uri":"org\/owasp\/webgoat\/lessons\/BackDoors.java"}}],"ruleId":"de.upb.gpa.findbugs.33","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BackDoors::concept1","analysisTarget":{"region":{"startLine":"125"},"uri":"org\/owasp\/webgoat\/lessons\/BackDoors.java"}}],"ruleId":"de.upb.gpa.findbugs.34","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BackDoors::concept2","analysisTarget":{"region":{"startLine":"161"},"uri":"org\/owasp\/webgoat\/lessons\/BackDoors.java"}}],"ruleId":"de.upb.gpa.findbugs.35","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BackDoors::getInstructions","analysisTarget":{"region":{"startLine":"189"},"uri":"org\/owasp\/webgoat\/lessons\/BackDoors.java"}}],"ruleId":"de.upb.gpa.findbugs.36","message":"Style - Switch statement found where default case is missing"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BasicAuthentication::valueOf","analysisTarget":{"region":{"startLine":"267"},"uri":"org\/owasp\/webgoat\/lessons\/BasicAuthentication.java"}}],"ruleId":"de.upb.gpa.findbugs.37","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BasicAuthentication::doStage1","analysisTarget":{"region":{"startLine":"83"},"uri":"org\/owasp\/webgoat\/lessons\/BasicAuthentication.java"}}],"ruleId":"de.upb.gpa.findbugs.38","message":"Performance - Method invokes inefficient new String(String) constructor"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BasicAuthentication","analysisTarget":{"region":{"startLine":"49"},"uri":"org\/owasp\/webgoat\/lessons\/BasicAuthentication.java"}}],"ruleId":"de.upb.gpa.findbugs.39","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindNumericSqlInjection::valueOf","analysisTarget":{"region":{"startLine":"57"},"uri":"org\/owasp\/webgoat\/lessons\/BlindNumericSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.40","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindNumericSqlInjection","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/BlindNumericSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.41","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::createContent","analysisTarget":{"region":{"startLine":"72"},"uri":"org\/owasp\/webgoat\/lessons\/BlindNumericSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.42","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createContent","analysisTarget":{"region":{"startLine":"72"},"uri":"org\/owasp\/webgoat\/lessons\/BlindNumericSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.43","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindNumericSqlInjection::createContent","analysisTarget":{"region":{"startLine":"72"},"uri":"org\/owasp\/webgoat\/lessons\/BlindNumericSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.44","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::lang::Exception::executeSpyWare","analysisTarget":{"region":{"startLine":"158"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.45","message":"Bad practice - Method might ignore exception"},{"locations":[{"fullyQualifiedLogicalName":"java::lang::Exception::executeTimeTrigger","analysisTarget":{"region":{"startLine":"217"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.46","message":"Bad practice - Method might ignore exception"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindScript::<init>","analysisTarget":{"region":{"startLine":"158"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.47","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindScript::<init>","analysisTarget":{"region":{"startLine":"158"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.48","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindScript::<init>","analysisTarget":{"region":{"startLine":"158"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.49","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindScript::valueOf","analysisTarget":{"region":{"startLine":"317"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.50","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindScript","analysisTarget":{"region":{"startLine":"65"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.51","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindScript::StaticDeleter","analysisTarget":{"region":{"startLine":"371"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.52","message":"Bad practice - Method names should start with a lower case letter"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindScript::createContent","analysisTarget":{"region":{"startLine":"82"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.53","message":"Correctness - Possible null pointer dereference in method on exception path"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindScript::executeEventTrigger","analysisTarget":{"region":{"startLine":"199"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.54","message":"Style - Possible null pointer dereference due to return value of called method"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindScript::executeSpyWare","analysisTarget":{"region":{"startLine":"158"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.55","message":"Style - Possible null pointer dereference due to return value of called method"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::executeTimeTrigger","analysisTarget":{"region":{"startLine":"217"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.56","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::executeTimeTrigger","analysisTarget":{"region":{"startLine":"217"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.57","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindScript::executeTimeTrigger","analysisTarget":{"region":{"startLine":"217"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.58","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindScript::executeSpyWare","analysisTarget":{"region":{"startLine":"158"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.59","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindScript::executeQuery","analysisTarget":{"region":{"startLine":"217"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.60","message":"Correctness - Method ignores return value"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindScript::delete","analysisTarget":{"region":{"startLine":"199"},"uri":"org\/owasp\/webgoat\/lessons\/BlindScript.java"}}],"ruleId":"de.upb.gpa.findbugs.61","message":"Bad practice - Method ignores exceptional return value"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindStringSqlInjection::valueOf","analysisTarget":{"region":{"startLine":"57"},"uri":"org\/owasp\/webgoat\/lessons\/BlindStringSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.62","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindStringSqlInjection","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/BlindStringSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.63","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::createContent","analysisTarget":{"region":{"startLine":"72"},"uri":"org\/owasp\/webgoat\/lessons\/BlindStringSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.64","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createContent","analysisTarget":{"region":{"startLine":"72"},"uri":"org\/owasp\/webgoat\/lessons\/BlindStringSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.65","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BlindStringSqlInjection::createContent","analysisTarget":{"region":{"startLine":"72"},"uri":"org\/owasp\/webgoat\/lessons\/BlindStringSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.66","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BypassHtmlFieldRestrictions::createContent","analysisTarget":{"region":{"startLine":"76"},"uri":"org\/owasp\/webgoat\/lessons\/BypassHtmlFieldRestrictions.java"}}],"ruleId":"de.upb.gpa.findbugs.67","message":"Style - Dead store to local variable"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BypassHtmlFieldRestrictions::valueOf","analysisTarget":{"region":{"startLine":"61"},"uri":"org\/owasp\/webgoat\/lessons\/BypassHtmlFieldRestrictions.java"}}],"ruleId":"de.upb.gpa.findbugs.68","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BypassHtmlFieldRestrictions","analysisTarget":{"region":{"startLine":"59"},"uri":"org\/owasp\/webgoat\/lessons\/BypassHtmlFieldRestrictions.java"}}],"ruleId":"de.upb.gpa.findbugs.69","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::BypassHtmlFieldRestrictions","analysisTarget":{"region":{"startLine":"65"},"uri":"org\/owasp\/webgoat\/lessons\/BypassHtmlFieldRestrictions.java"}}],"ruleId":"de.upb.gpa.findbugs.70","message":"Performance - Unused field"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CSRF::valueOf","analysisTarget":{"region":{"startLine":"77"},"uri":"org\/owasp\/webgoat\/lessons\/CSRF.java"}}],"ruleId":"de.upb.gpa.findbugs.71","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CSRF","analysisTarget":{"region":{"startLine":"66"},"uri":"org\/owasp\/webgoat\/lessons\/CSRF.java"}}],"ruleId":"de.upb.gpa.findbugs.72","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::addMessage","analysisTarget":{"region":{"startLine":"91"},"uri":"org\/owasp\/webgoat\/lessons\/CSRF.java"}}],"ruleId":"de.upb.gpa.findbugs.73","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::makeCurrent","analysisTarget":{"region":{"startLine":"276"},"uri":"org\/owasp\/webgoat\/lessons\/CSRF.java"}}],"ruleId":"de.upb.gpa.findbugs.74","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::makeCurrent","analysisTarget":{"region":{"startLine":"276"},"uri":"org\/owasp\/webgoat\/lessons\/CSRF.java"}}],"ruleId":"de.upb.gpa.findbugs.75","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::makeList","analysisTarget":{"region":{"startLine":"219"},"uri":"org\/owasp\/webgoat\/lessons\/CSRF.java"}}],"ruleId":"de.upb.gpa.findbugs.76","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::makeList","analysisTarget":{"region":{"startLine":"219"},"uri":"org\/owasp\/webgoat\/lessons\/CSRF.java"}}],"ruleId":"de.upb.gpa.findbugs.77","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CSRF::addMessage","analysisTarget":{"region":{"startLine":"91"},"uri":"org\/owasp\/webgoat\/lessons\/CSRF.java"}}],"ruleId":"de.upb.gpa.findbugs.78","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CSRF::makeCurrent","analysisTarget":{"region":{"startLine":"276"},"uri":"org\/owasp\/webgoat\/lessons\/CSRF.java"}}],"ruleId":"de.upb.gpa.findbugs.79","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CSRF::makeList","analysisTarget":{"region":{"startLine":"219"},"uri":"org\/owasp\/webgoat\/lessons\/CSRF.java"}}],"ruleId":"de.upb.gpa.findbugs.80","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Category::valueOf","analysisTarget":{"region":{"startLine":"42"},"uri":"org\/owasp\/webgoat\/lessons\/Category.java"}}],"ruleId":"de.upb.gpa.findbugs.81","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Category::equals","analysisTarget":{"region":{"startLine":"166"},"uri":"org\/owasp\/webgoat\/lessons\/Category.java"}}],"ruleId":"de.upb.gpa.findbugs.82","message":"Bad practice - Class defines equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Challenge2Screen::<init>","analysisTarget":{"region":{"startLine":"368"},"uri":"org\/owasp\/webgoat\/lessons\/Challenge2Screen.java"}}],"ruleId":"de.upb.gpa.findbugs.83","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Challenge2Screen::getBytes","analysisTarget":{"region":{"startLine":"589"},"uri":"org\/owasp\/webgoat\/lessons\/Challenge2Screen.java"}}],"ruleId":"de.upb.gpa.findbugs.84","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Challenge2Screen::<init>","analysisTarget":{"region":{"startLine":"408"},"uri":"org\/owasp\/webgoat\/lessons\/Challenge2Screen.java"}}],"ruleId":"de.upb.gpa.findbugs.85","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Challenge2Screen::<init>","analysisTarget":{"region":{"startLine":"408"},"uri":"org\/owasp\/webgoat\/lessons\/Challenge2Screen.java"}}],"ruleId":"de.upb.gpa.findbugs.86","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Challenge2Screen::<init>","analysisTarget":{"region":{"startLine":"723"},"uri":"org\/owasp\/webgoat\/lessons\/Challenge2Screen.java"}}],"ruleId":"de.upb.gpa.findbugs.87","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Challenge2Screen","analysisTarget":{"region":{"startLine":"74"},"uri":"org\/owasp\/webgoat\/lessons\/Challenge2Screen.java"}}],"ruleId":"de.upb.gpa.findbugs.88","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::doStage2","analysisTarget":{"region":{"startLine":"194"},"uri":"org\/owasp\/webgoat\/lessons\/Challenge2Screen.java"}}],"ruleId":"de.upb.gpa.findbugs.89","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::doStage2","analysisTarget":{"region":{"startLine":"194"},"uri":"org\/owasp\/webgoat\/lessons\/Challenge2Screen.java"}}],"ruleId":"de.upb.gpa.findbugs.90","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::io::Writer::resetWebPage","analysisTarget":{"region":{"startLine":"408"},"uri":"org\/owasp\/webgoat\/lessons\/Challenge2Screen.java"}}],"ruleId":"de.upb.gpa.findbugs.91","message":"Experimental - Method may fail to clean up stream or resource on checked exception"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Challenge2Screen::doStage2","analysisTarget":{"region":{"startLine":"194"},"uri":"org\/owasp\/webgoat\/lessons\/Challenge2Screen.java"}}],"ruleId":"de.upb.gpa.findbugs.92","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Challenge2Screen::doStage2","analysisTarget":{"region":{"startLine":"194"},"uri":"org\/owasp\/webgoat\/lessons\/Challenge2Screen.java"}}],"ruleId":"de.upb.gpa.findbugs.93","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Challenge2Screen::doStage2","analysisTarget":{"region":{"startLine":"194"},"uri":"org\/owasp\/webgoat\/lessons\/Challenge2Screen.java"}}],"ruleId":"de.upb.gpa.findbugs.94","message":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ClientSideFiltering::ClientSideFiltering::<init>","analysisTarget":{"region":{"startLine":"415"},"uri":"org\/owasp\/webgoat\/lessons\/ClientSideFiltering\/ClientSideFiltering.java"}}],"ruleId":"de.upb.gpa.findbugs.95","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ClientSideFiltering::ClientSideFiltering::valueOf","analysisTarget":{"region":{"startLine":"37"},"uri":"org\/owasp\/webgoat\/lessons\/ClientSideFiltering\/ClientSideFiltering.java"}}],"ruleId":"de.upb.gpa.findbugs.96","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ClientSideFiltering::ClientSideFiltering","analysisTarget":{"region":{"startLine":"1"},"uri":"org\/owasp\/webgoat\/lessons\/ClientSideFiltering\/ClientSideFiltering.java"}}],"ruleId":"de.upb.gpa.findbugs.97","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ClientSideValidation::valueOf","analysisTarget":{"region":{"startLine":"37"},"uri":"org\/owasp\/webgoat\/lessons\/ClientSideValidation.java"}}],"ruleId":"de.upb.gpa.findbugs.98","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ClientSideValidation","analysisTarget":{"region":{"startLine":"26"},"uri":"org\/owasp\/webgoat\/lessons\/ClientSideValidation.java"}}],"ruleId":"de.upb.gpa.findbugs.99","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CommandInjection::valueOf","analysisTarget":{"region":{"startLine":"283"},"uri":"org\/owasp\/webgoat\/lessons\/CommandInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.100","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CommandInjection","analysisTarget":{"region":{"startLine":"52"},"uri":"org\/owasp\/webgoat\/lessons\/CommandInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.101","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CommandInjection::replaceAll","analysisTarget":{"region":{"startLine":"180"},"uri":"org\/owasp\/webgoat\/lessons\/CommandInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.102","message":"Correctness - Method ignores return value"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ConcurrencyCart::valueOf","analysisTarget":{"region":{"startLine":"62"},"uri":"org\/owasp\/webgoat\/lessons\/ConcurrencyCart.java"}}],"ruleId":"de.upb.gpa.findbugs.103","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ConcurrencyCart","analysisTarget":{"region":{"startLine":"59"},"uri":"org\/owasp\/webgoat\/lessons\/ConcurrencyCart.java"}}],"ruleId":"de.upb.gpa.findbugs.104","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CrossSiteScripting::CrossSiteScripting::<init>","analysisTarget":{"region":{"startLine":"113"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/CrossSiteScripting.java"}}],"ruleId":"de.upb.gpa.findbugs.105","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CrossSiteScripting::CrossSiteScripting::valueOf","analysisTarget":{"region":{"startLine":"62"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/CrossSiteScripting.java"}}],"ruleId":"de.upb.gpa.findbugs.106","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CrossSiteScripting::CrossSiteScripting","analysisTarget":{"region":{"startLine":"60"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/CrossSiteScripting.java"}}],"ruleId":"de.upb.gpa.findbugs.107","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile","analysisTarget":{"region":{"startLine":"75"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.108","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile","analysisTarget":{"region":{"startLine":"75"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.109","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"119"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.110","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"119"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.111","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CrossSiteScripting::EditProfile::getEmployeeProfile","analysisTarget":{"region":{"startLine":"75"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.112","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CrossSiteScripting::EditProfile::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"119"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.113","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CrossSiteScripting::FindProfile","analysisTarget":{"region":{"startLine":"214"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/FindProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.114","message":"Malicious code - Field isn't final but should be"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::findEmployeeProfile","analysisTarget":{"region":{"startLine":"143"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/FindProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.115","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::findEmployeeProfile","analysisTarget":{"region":{"startLine":"143"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/FindProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.116","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CrossSiteScripting::FindProfile::findEmployeeProfile","analysisTarget":{"region":{"startLine":"143"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/FindProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.117","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::changeEmployeeProfile","analysisTarget":{"region":{"startLine":"189"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.118","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createEmployeeProfile","analysisTarget":{"region":{"startLine":"272"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.119","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"314"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.120","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::doChangeEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"231"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.121","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getNextUID","analysisTarget":{"region":{"startLine":"369"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.122","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getNextUID","analysisTarget":{"region":{"startLine":"369"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.123","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile::changeEmployeeProfile","analysisTarget":{"region":{"startLine":"189"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.124","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile::createEmployeeProfile","analysisTarget":{"region":{"startLine":"272"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.125","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile::createEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"314"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.126","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile::doChangeEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"231"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.127","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CrossSiteScripting::UpdateProfile::getNextUID","analysisTarget":{"region":{"startLine":"369"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.128","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile","analysisTarget":{"region":{"startLine":"87"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.129","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile","analysisTarget":{"region":{"startLine":"87"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.130","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"134"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.131","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"134"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.132","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CrossSiteScripting::ViewProfile::getEmployeeProfile","analysisTarget":{"region":{"startLine":"87"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.133","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CrossSiteScripting::ViewProfile::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"134"},"uri":"org\/owasp\/webgoat\/lessons\/CrossSiteScripting\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.134","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CsrfPromptByPass::valueOf","analysisTarget":{"region":{"startLine":"140"},"uri":"org\/owasp\/webgoat\/lessons\/CsrfPromptByPass.java"}}],"ruleId":"de.upb.gpa.findbugs.135","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CsrfPromptByPass::valueOf","analysisTarget":{"region":{"startLine":"66"},"uri":"org\/owasp\/webgoat\/lessons\/CsrfPromptByPass.java"}}],"ruleId":"de.upb.gpa.findbugs.136","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CsrfPromptByPass","analysisTarget":{"region":{"startLine":"50"},"uri":"org\/owasp\/webgoat\/lessons\/CsrfPromptByPass.java"}}],"ruleId":"de.upb.gpa.findbugs.137","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CsrfTokenByPass::doTransfer","analysisTarget":{"region":{"startLine":"73"},"uri":"org\/owasp\/webgoat\/lessons\/CsrfTokenByPass.java"}}],"ruleId":"de.upb.gpa.findbugs.138","message":"Style - Dead store to local variable"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CsrfTokenByPass::valueOf","analysisTarget":{"region":{"startLine":"122"},"uri":"org\/owasp\/webgoat\/lessons\/CsrfTokenByPass.java"}}],"ruleId":"de.upb.gpa.findbugs.139","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::CsrfTokenByPass","analysisTarget":{"region":{"startLine":"60"},"uri":"org\/owasp\/webgoat\/lessons\/CsrfTokenByPass.java"}}],"ruleId":"de.upb.gpa.findbugs.140","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DBCrossSiteScripting::DBCrossSiteScripting::valueOf","analysisTarget":{"region":{"startLine":"56"},"uri":"org\/owasp\/webgoat\/lessons\/DBCrossSiteScripting\/DBCrossSiteScripting.java"}}],"ruleId":"de.upb.gpa.findbugs.141","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DBCrossSiteScripting::DBCrossSiteScripting","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/DBCrossSiteScripting\/DBCrossSiteScripting.java"}}],"ruleId":"de.upb.gpa.findbugs.142","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createEmployeeProfile","analysisTarget":{"region":{"startLine":"173"},"uri":"org\/owasp\/webgoat\/lessons\/DBCrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.143","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getNextUID","analysisTarget":{"region":{"startLine":"210"},"uri":"org\/owasp\/webgoat\/lessons\/DBCrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.144","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getNextUID","analysisTarget":{"region":{"startLine":"210"},"uri":"org\/owasp\/webgoat\/lessons\/DBCrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.145","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DBCrossSiteScripting::UpdateProfile::changeEmployeeProfile","analysisTarget":{"region":{"startLine":"147"},"uri":"org\/owasp\/webgoat\/lessons\/DBCrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.146","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DBCrossSiteScripting::UpdateProfile::createEmployeeProfile","analysisTarget":{"region":{"startLine":"173"},"uri":"org\/owasp\/webgoat\/lessons\/DBCrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.147","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DBCrossSiteScripting::UpdateProfile::getNextUID","analysisTarget":{"region":{"startLine":"210"},"uri":"org\/owasp\/webgoat\/lessons\/DBCrossSiteScripting\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.148","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DBSQLInjection::DBSQLInjection::valueOf","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/DBSQLInjection\/DBSQLInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.149","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DBSQLInjection::DBSQLInjection","analysisTarget":{"region":{"startLine":"52"},"uri":"org\/owasp\/webgoat\/lessons\/DBSQLInjection\/DBSQLInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.150","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getAllEmployees","analysisTarget":{"region":{"startLine":"187"},"uri":"org\/owasp\/webgoat\/lessons\/DBSQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.151","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getAllEmployees","analysisTarget":{"region":{"startLine":"187"},"uri":"org\/owasp\/webgoat\/lessons\/DBSQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.152","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DBSQLInjection::Login::getAllEmployees","analysisTarget":{"region":{"startLine":"187"},"uri":"org\/owasp\/webgoat\/lessons\/DBSQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.153","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DBSQLInjection::Login::login","analysisTarget":{"region":{"startLine":"120"},"uri":"org\/owasp\/webgoat\/lessons\/DBSQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.154","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DBSQLInjection::Login::login","analysisTarget":{"region":{"startLine":"120"},"uri":"org\/owasp\/webgoat\/lessons\/DBSQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.155","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DOMInjection::<init>","analysisTarget":{"region":{"startLine":"69"},"uri":"org\/owasp\/webgoat\/lessons\/DOMInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.156","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DOMInjection::valueOf","analysisTarget":{"region":{"startLine":"57"},"uri":"org\/owasp\/webgoat\/lessons\/DOMInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.157","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DOMInjection","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/DOMInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.158","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DOMXSS::<init>","analysisTarget":{"region":{"startLine":"285"},"uri":"org\/owasp\/webgoat\/lessons\/DOMXSS.java"}}],"ruleId":"de.upb.gpa.findbugs.159","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DOMXSS::valueOf","analysisTarget":{"region":{"startLine":"25"},"uri":"org\/owasp\/webgoat\/lessons\/DOMXSS.java"}}],"ruleId":"de.upb.gpa.findbugs.160","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DOMXSS","analysisTarget":{"region":{"startLine":"22"},"uri":"org\/owasp\/webgoat\/lessons\/DOMXSS.java"}}],"ruleId":"de.upb.gpa.findbugs.161","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DOS_Login::valueOf","analysisTarget":{"region":{"startLine":"197"},"uri":"org\/owasp\/webgoat\/lessons\/DOS_Login.java"}}],"ruleId":"de.upb.gpa.findbugs.162","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DOS_Login","analysisTarget":{"region":{"startLine":"57"},"uri":"org\/owasp\/webgoat\/lessons\/DOS_Login.java"}}],"ruleId":"de.upb.gpa.findbugs.163","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::createContent","analysisTarget":{"region":{"startLine":"79"},"uri":"org\/owasp\/webgoat\/lessons\/DOS_Login.java"}}],"ruleId":"de.upb.gpa.findbugs.164","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createContent","analysisTarget":{"region":{"startLine":"79"},"uri":"org\/owasp\/webgoat\/lessons\/DOS_Login.java"}}],"ruleId":"de.upb.gpa.findbugs.165","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DOS_Login::createContent","analysisTarget":{"region":{"startLine":"79"},"uri":"org\/owasp\/webgoat\/lessons\/DOS_Login.java"}}],"ruleId":"de.upb.gpa.findbugs.166","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DOS_Login::createContent","analysisTarget":{"region":{"startLine":"79"},"uri":"org\/owasp\/webgoat\/lessons\/DOS_Login.java"}}],"ruleId":"de.upb.gpa.findbugs.167","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DOS_Login::createContent","analysisTarget":{"region":{"startLine":"79"},"uri":"org\/owasp\/webgoat\/lessons\/DOS_Login.java"}}],"ruleId":"de.upb.gpa.findbugs.168","message":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DangerousEval::createContent","analysisTarget":{"region":{"startLine":"73"},"uri":"org\/owasp\/webgoat\/lessons\/DangerousEval.java"}}],"ruleId":"de.upb.gpa.findbugs.169","message":"Style - Dead store to local variable"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DangerousEval::valueOf","analysisTarget":{"region":{"startLine":"56"},"uri":"org\/owasp\/webgoat\/lessons\/DangerousEval.java"}}],"ruleId":"de.upb.gpa.findbugs.170","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::DangerousEval","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/DangerousEval.java"}}],"ruleId":"de.upb.gpa.findbugs.171","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Encoding::<init>","analysisTarget":{"region":{"startLine":"102"},"uri":"org\/owasp\/webgoat\/lessons\/Encoding.java"}}],"ruleId":"de.upb.gpa.findbugs.172","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Encoding::getBytes","analysisTarget":{"region":{"startLine":"148"},"uri":"org\/owasp\/webgoat\/lessons\/Encoding.java"}}],"ruleId":"de.upb.gpa.findbugs.173","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Encoding::getBytes","analysisTarget":{"region":{"startLine":"460"},"uri":"org\/owasp\/webgoat\/lessons\/Encoding.java"}}],"ruleId":"de.upb.gpa.findbugs.174","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Encoding::getBytes","analysisTarget":{"region":{"startLine":"485"},"uri":"org\/owasp\/webgoat\/lessons\/Encoding.java"}}],"ruleId":"de.upb.gpa.findbugs.175","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Encoding::getBytes","analysisTarget":{"region":{"startLine":"702"},"uri":"org\/owasp\/webgoat\/lessons\/Encoding.java"}}],"ruleId":"de.upb.gpa.findbugs.176","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Encoding::<init>","analysisTarget":{"region":{"startLine":"727"},"uri":"org\/owasp\/webgoat\/lessons\/Encoding.java"}}],"ruleId":"de.upb.gpa.findbugs.177","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Encoding::valueOf","analysisTarget":{"region":{"startLine":"69"},"uri":"org\/owasp\/webgoat\/lessons\/Encoding.java"}}],"ruleId":"de.upb.gpa.findbugs.178","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Encoding","analysisTarget":{"region":{"startLine":"67"},"uri":"org\/owasp\/webgoat\/lessons\/Encoding.java"}}],"ruleId":"de.upb.gpa.findbugs.179","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Encoding::hashMD5","analysisTarget":{"region":{"startLine":"460"},"uri":"org\/owasp\/webgoat\/lessons\/Encoding.java"}}],"ruleId":"de.upb.gpa.findbugs.180","message":"Correctness - Possible null pointer dereference in method on exception path"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Encoding::hashSHA","analysisTarget":{"region":{"startLine":"485"},"uri":"org\/owasp\/webgoat\/lessons\/Encoding.java"}}],"ruleId":"de.upb.gpa.findbugs.181","message":"Correctness - Possible null pointer dereference in method on exception path"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Encoding::createContent","analysisTarget":{"region":{"startLine":"178"},"uri":"org\/owasp\/webgoat\/lessons\/Encoding.java"}}],"ruleId":"de.upb.gpa.findbugs.182","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Encoding::decryptString","analysisTarget":{"region":{"startLine":"321"},"uri":"org\/owasp\/webgoat\/lessons\/Encoding.java"}}],"ruleId":"de.upb.gpa.findbugs.183","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Encoding::main","analysisTarget":{"region":{"startLine":"559"},"uri":"org\/owasp\/webgoat\/lessons\/Encoding.java"}}],"ruleId":"de.upb.gpa.findbugs.184","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::FailOpenAuthentication::valueOf","analysisTarget":{"region":{"startLine":"44"},"uri":"org\/owasp\/webgoat\/lessons\/FailOpenAuthentication.java"}}],"ruleId":"de.upb.gpa.findbugs.185","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::FailOpenAuthentication","analysisTarget":{"region":{"startLine":"42"},"uri":"org\/owasp\/webgoat\/lessons\/FailOpenAuthentication.java"}}],"ruleId":"de.upb.gpa.findbugs.186","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::FailOpenAuthentication::getRawParameter","analysisTarget":{"region":{"startLine":"58"},"uri":"org\/owasp\/webgoat\/lessons\/FailOpenAuthentication.java"}}],"ruleId":"de.upb.gpa.findbugs.187","message":"Correctness - Nullcheck of value previously dereferenced"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ForcedBrowsing::valueOf","analysisTarget":{"region":{"startLine":"56"},"uri":"org\/owasp\/webgoat\/lessons\/ForcedBrowsing.java"}}],"ruleId":"de.upb.gpa.findbugs.188","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ForcedBrowsing::createContent","analysisTarget":{"region":{"startLine":"67"},"uri":"org\/owasp\/webgoat\/lessons\/ForcedBrowsing.java"}}],"ruleId":"de.upb.gpa.findbugs.189","message":"Performance - Method invokes inefficient new String(String) constructor"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ForcedBrowsing","analysisTarget":{"region":{"startLine":"51"},"uri":"org\/owasp\/webgoat\/lessons\/ForcedBrowsing.java"}}],"ruleId":"de.upb.gpa.findbugs.190","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ForgotPassword::valueOf","analysisTarget":{"region":{"startLine":"57"},"uri":"org\/owasp\/webgoat\/lessons\/ForgotPassword.java"}}],"ruleId":"de.upb.gpa.findbugs.191","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ForgotPassword","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/ForgotPassword.java"}}],"ruleId":"de.upb.gpa.findbugs.192","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ForgotPassword::createContent","analysisTarget":{"region":{"startLine":"226"},"uri":"org\/owasp\/webgoat\/lessons\/ForgotPassword.java"}}],"ruleId":"de.upb.gpa.findbugs.193","message":"Style - Write to static field from instance method"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getUserName","analysisTarget":{"region":{"startLine":"187"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/DefaultLessonAction.java"}}],"ruleId":"de.upb.gpa.findbugs.194","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getUserName","analysisTarget":{"region":{"startLine":"187"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/DefaultLessonAction.java"}}],"ruleId":"de.upb.gpa.findbugs.195","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::isAuthorized","analysisTarget":{"region":{"startLine":"236"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/DefaultLessonAction.java"}}],"ruleId":"de.upb.gpa.findbugs.196","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::isAuthorized","analysisTarget":{"region":{"startLine":"236"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/DefaultLessonAction.java"}}],"ruleId":"de.upb.gpa.findbugs.197","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::isAuthorizedForEmployee","analysisTarget":{"region":{"startLine":"281"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/DefaultLessonAction.java"}}],"ruleId":"de.upb.gpa.findbugs.198","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::isAuthorizedForEmployee","analysisTarget":{"region":{"startLine":"281"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/DefaultLessonAction.java"}}],"ruleId":"de.upb.gpa.findbugs.199","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::DefaultLessonAction::getUserName","analysisTarget":{"region":{"startLine":"187"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/DefaultLessonAction.java"}}],"ruleId":"de.upb.gpa.findbugs.200","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::DefaultLessonAction::isAuthorized","analysisTarget":{"region":{"startLine":"236"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/DefaultLessonAction.java"}}],"ruleId":"de.upb.gpa.findbugs.201","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::DefaultLessonAction::isAuthorizedForEmployee","analysisTarget":{"region":{"startLine":"281"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/DefaultLessonAction.java"}}],"ruleId":"de.upb.gpa.findbugs.202","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::DefaultLessonAction::isAuthorized","analysisTarget":{"region":{"startLine":"236"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/DefaultLessonAction.java"}}],"ruleId":"de.upb.gpa.findbugs.203","message":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::deleteEmployeeProfile","analysisTarget":{"region":{"startLine":"92"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/DeleteProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.204","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::DeleteProfile::deleteEmployeeProfile","analysisTarget":{"region":{"startLine":"92"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/DeleteProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.205","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile","analysisTarget":{"region":{"startLine":"73"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.206","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile","analysisTarget":{"region":{"startLine":"73"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.207","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::EditProfile::getEmployeeProfile","analysisTarget":{"region":{"startLine":"73"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.208","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::findEmployeeProfile","analysisTarget":{"region":{"startLine":"110"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/FindProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.209","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::findEmployeeProfile","analysisTarget":{"region":{"startLine":"110"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/FindProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.210","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::FindProfile::findEmployeeProfile","analysisTarget":{"region":{"startLine":"110"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/FindProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.211","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::GoatHillsFinancial::valueOf","analysisTarget":{"region":{"startLine":"49"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/GoatHillsFinancial.java"}}],"ruleId":"de.upb.gpa.findbugs.212","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::GoatHillsFinancial","analysisTarget":{"region":{"startLine":"49"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/GoatHillsFinancial.java"}}],"ruleId":"de.upb.gpa.findbugs.213","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getAllEmployees","analysisTarget":{"region":{"startLine":"76"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/ListStaff.java"}}],"ruleId":"de.upb.gpa.findbugs.214","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getAllEmployees","analysisTarget":{"region":{"startLine":"76"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/ListStaff.java"}}],"ruleId":"de.upb.gpa.findbugs.215","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::ListStaff::getAllEmployees","analysisTarget":{"region":{"startLine":"76"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/ListStaff.java"}}],"ruleId":"de.upb.gpa.findbugs.216","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getAllEmployees","analysisTarget":{"region":{"startLine":"152"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.217","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getAllEmployees","analysisTarget":{"region":{"startLine":"152"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.218","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::login","analysisTarget":{"region":{"startLine":"117"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.219","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::login","analysisTarget":{"region":{"startLine":"117"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.220","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::Login::getAllEmployees","analysisTarget":{"region":{"startLine":"152"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.221","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::Login::login","analysisTarget":{"region":{"startLine":"117"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.222","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::Login::login","analysisTarget":{"region":{"startLine":"117"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.223","message":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::changeEmployeeProfile","analysisTarget":{"region":{"startLine":"120"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.224","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createEmployeeProfile","analysisTarget":{"region":{"startLine":"178"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.225","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getNextUID","analysisTarget":{"region":{"startLine":"158"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.226","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getNextUID","analysisTarget":{"region":{"startLine":"158"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.227","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::UpdateProfile::changeEmployeeProfile","analysisTarget":{"region":{"startLine":"120"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.228","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::UpdateProfile::createEmployeeProfile","analysisTarget":{"region":{"startLine":"178"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.229","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::UpdateProfile::getNextUID","analysisTarget":{"region":{"startLine":"158"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.230","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile","analysisTarget":{"region":{"startLine":"83"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.231","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile","analysisTarget":{"region":{"startLine":"83"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.232","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::GoatHillsFinancial::ViewProfile::getEmployeeProfile","analysisTarget":{"region":{"startLine":"83"},"uri":"org\/owasp\/webgoat\/lessons\/GoatHillsFinancial\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.233","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HiddenFieldTampering::valueOf","analysisTarget":{"region":{"startLine":"61"},"uri":"org\/owasp\/webgoat\/lessons\/HiddenFieldTampering.java"}}],"ruleId":"de.upb.gpa.findbugs.234","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HiddenFieldTampering","analysisTarget":{"region":{"startLine":"61"},"uri":"org\/owasp\/webgoat\/lessons\/HiddenFieldTampering.java"}}],"ruleId":"de.upb.gpa.findbugs.235","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HiddenFieldTampering","analysisTarget":{"region":{"startLine":"74"},"uri":"org\/owasp\/webgoat\/lessons\/HiddenFieldTampering.java"}}],"ruleId":"de.upb.gpa.findbugs.236","message":"Performance - Unread field"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HowToWork::valueOf","analysisTarget":{"region":{"startLine":"67"},"uri":"org\/owasp\/webgoat\/lessons\/HowToWork.java"}}],"ruleId":"de.upb.gpa.findbugs.237","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HowToWork","analysisTarget":{"region":{"startLine":"40"},"uri":"org\/owasp\/webgoat\/lessons\/HowToWork.java"}}],"ruleId":"de.upb.gpa.findbugs.238","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HtmlClues::valueOf","analysisTarget":{"region":{"startLine":"57"},"uri":"org\/owasp\/webgoat\/lessons\/HtmlClues.java"}}],"ruleId":"de.upb.gpa.findbugs.239","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HtmlClues","analysisTarget":{"region":{"startLine":"55"},"uri":"org\/owasp\/webgoat\/lessons\/HtmlClues.java"}}],"ruleId":"de.upb.gpa.findbugs.240","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HttpBasics::valueOf","analysisTarget":{"region":{"startLine":"109"},"uri":"org\/owasp\/webgoat\/lessons\/HttpBasics.java"}}],"ruleId":"de.upb.gpa.findbugs.241","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HttpBasics","analysisTarget":{"region":{"startLine":"45"},"uri":"org\/owasp\/webgoat\/lessons\/HttpBasics.java"}}],"ruleId":"de.upb.gpa.findbugs.242","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HttpBasics::createContent","analysisTarget":{"region":{"startLine":"58"},"uri":"org\/owasp\/webgoat\/lessons\/HttpBasics.java"}}],"ruleId":"de.upb.gpa.findbugs.243","message":"Correctness - Possible null pointer dereference in method on exception path"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HttpBasicsController","analysisTarget":{"region":{"startLine":"25"},"uri":"org\/owasp\/webgoat\/lessons\/HttpBasicsController.java"}}],"ruleId":"de.upb.gpa.findbugs.244","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HttpBasicsController","analysisTarget":{"region":{"startLine":"30"},"uri":"org\/owasp\/webgoat\/lessons\/HttpBasicsController.java"}}],"ruleId":"de.upb.gpa.findbugs.245","message":"Performance - Unread field: should this field be static?"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HttpOnly::getBytes","analysisTarget":{"region":{"startLine":"180"},"uri":"org\/owasp\/webgoat\/lessons\/HttpOnly.java"}}],"ruleId":"de.upb.gpa.findbugs.246","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HttpOnly::valueOf","analysisTarget":{"region":{"startLine":"53"},"uri":"org\/owasp\/webgoat\/lessons\/HttpOnly.java"}}],"ruleId":"de.upb.gpa.findbugs.247","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HttpOnly","analysisTarget":{"region":{"startLine":"50"},"uri":"org\/owasp\/webgoat\/lessons\/HttpOnly.java"}}],"ruleId":"de.upb.gpa.findbugs.248","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HttpSplitting::valueOf","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/HttpSplitting.java"}}],"ruleId":"de.upb.gpa.findbugs.249","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::HttpSplitting","analysisTarget":{"region":{"startLine":"47"},"uri":"org\/owasp\/webgoat\/lessons\/HttpSplitting.java"}}],"ruleId":"de.upb.gpa.findbugs.250","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::InsecureLogin::valueOf","analysisTarget":{"region":{"startLine":"199"},"uri":"org\/owasp\/webgoat\/lessons\/InsecureLogin.java"}}],"ruleId":"de.upb.gpa.findbugs.251","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::InsecureLogin","analysisTarget":{"region":{"startLine":"26"},"uri":"org\/owasp\/webgoat\/lessons\/InsecureLogin.java"}}],"ruleId":"de.upb.gpa.findbugs.252","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::correctLogin","analysisTarget":{"region":{"startLine":"247"},"uri":"org\/owasp\/webgoat\/lessons\/InsecureLogin.java"}}],"ruleId":"de.upb.gpa.findbugs.253","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::correctLogin","analysisTarget":{"region":{"startLine":"247"},"uri":"org\/owasp\/webgoat\/lessons\/InsecureLogin.java"}}],"ruleId":"de.upb.gpa.findbugs.254","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getUser","analysisTarget":{"region":{"startLine":"438"},"uri":"org\/owasp\/webgoat\/lessons\/InsecureLogin.java"}}],"ruleId":"de.upb.gpa.findbugs.255","message":"Experimental - Method may fail to clean up stream or resource on checked exception"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::InsecureLogin::correctLogin","analysisTarget":{"region":{"startLine":"247"},"uri":"org\/owasp\/webgoat\/lessons\/InsecureLogin.java"}}],"ruleId":"de.upb.gpa.findbugs.256","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::InsecureLogin::getUser","analysisTarget":{"region":{"startLine":"438"},"uri":"org\/owasp\/webgoat\/lessons\/InsecureLogin.java"}}],"ruleId":"de.upb.gpa.findbugs.257","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::JSONInjection::<init>","analysisTarget":{"region":{"startLine":"69"},"uri":"org\/owasp\/webgoat\/lessons\/JSONInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.258","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::JSONInjection::valueOf","analysisTarget":{"region":{"startLine":"55"},"uri":"org\/owasp\/webgoat\/lessons\/JSONInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.259","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::JSONInjection","analysisTarget":{"region":{"startLine":"52"},"uri":"org\/owasp\/webgoat\/lessons\/JSONInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.260","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::JavaScriptValidation::valueOf","analysisTarget":{"region":{"startLine":"53"},"uri":"org\/owasp\/webgoat\/lessons\/JavaScriptValidation.java"}}],"ruleId":"de.upb.gpa.findbugs.261","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::JavaScriptValidation","analysisTarget":{"region":{"startLine":"51"},"uri":"org\/owasp\/webgoat\/lessons\/JavaScriptValidation.java"}}],"ruleId":"de.upb.gpa.findbugs.262","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::LessonAdapter::<init>","analysisTarget":{"region":{"startLine":"65"},"uri":"org\/owasp\/webgoat\/lessons\/LessonAdapter.java"}}],"ruleId":"de.upb.gpa.findbugs.263","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::LessonAdapter::<init>","analysisTarget":{"region":{"startLine":"168"},"uri":"org\/owasp\/webgoat\/lessons\/LessonAdapter.java"}}],"ruleId":"de.upb.gpa.findbugs.264","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::LessonAdapter::createContent","analysisTarget":{"region":{"startLine":"65"},"uri":"org\/owasp\/webgoat\/lessons\/LessonAdapter.java"}}],"ruleId":"de.upb.gpa.findbugs.265","message":"Bad practice - Method may fail to close stream"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::LessonAdapter::getInstructions","analysisTarget":{"region":{"startLine":"168"},"uri":"org\/owasp\/webgoat\/lessons\/LessonAdapter.java"}}],"ruleId":"de.upb.gpa.findbugs.266","message":"Bad practice - Method may fail to close stream"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::LessonAdapter::getInstructions","analysisTarget":{"region":{"startLine":"168"},"uri":"org\/owasp\/webgoat\/lessons\/LessonAdapter.java"}}],"ruleId":"de.upb.gpa.findbugs.267","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::LogSpoofing::valueOf","analysisTarget":{"region":{"startLine":"63"},"uri":"org\/owasp\/webgoat\/lessons\/LogSpoofing.java"}}],"ruleId":"de.upb.gpa.findbugs.268","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::LogSpoofing::createContent","analysisTarget":{"region":{"startLine":"68"},"uri":"org\/owasp\/webgoat\/lessons\/LogSpoofing.java"}}],"ruleId":"de.upb.gpa.findbugs.269","message":"Performance - Method invokes inefficient new String(String) constructor"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::LogSpoofing","analysisTarget":{"region":{"startLine":"55"},"uri":"org\/owasp\/webgoat\/lessons\/LogSpoofing.java"}}],"ruleId":"de.upb.gpa.findbugs.270","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::LogSpoofing::createContent","analysisTarget":{"region":{"startLine":"68"},"uri":"org\/owasp\/webgoat\/lessons\/LogSpoofing.java"}}],"ruleId":"de.upb.gpa.findbugs.271","message":"Correctness - Repeated conditional tests"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MaliciousFileExecution::valueOf","analysisTarget":{"region":{"startLine":"62"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.272","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MaliciousFileExecution","analysisTarget":{"region":{"startLine":"59"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.273","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::createContent","analysisTarget":{"region":{"startLine":"118"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.274","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createContent","analysisTarget":{"region":{"startLine":"118"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.275","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::restartLesson","analysisTarget":{"region":{"startLine":"277"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.276","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MaliciousFileExecution::createContent","analysisTarget":{"region":{"startLine":"118"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.277","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MaliciousFileExecution::handleRequest","analysisTarget":{"region":{"startLine":"401"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.278","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MaliciousFileExecution::restartLesson","analysisTarget":{"region":{"startLine":"277"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.279","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MaliciousFileExecution::handleRequest","analysisTarget":{"region":{"startLine":"401"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.280","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MaliciousFileExecution::delete","analysisTarget":{"region":{"startLine":"80"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.281","message":"Bad practice - Method ignores exceptional return value"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MaliciousFileExecution::mkdir","analysisTarget":{"region":{"startLine":"80"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.282","message":"Bad practice - Method ignores exceptional return value"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MaliciousFileExecution::delete","analysisTarget":{"region":{"startLine":"277"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.283","message":"Bad practice - Method ignores exceptional return value"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MaliciousFileExecution::createContent","analysisTarget":{"region":{"startLine":"118"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.284","message":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MaliciousFileExecution::handleRequest","analysisTarget":{"region":{"startLine":"401"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.285","message":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MaliciousFileExecution::restartLesson","analysisTarget":{"region":{"startLine":"277"},"uri":"org\/owasp\/webgoat\/lessons\/MaliciousFileExecution.java"}}],"ruleId":"de.upb.gpa.findbugs.286","message":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin1::valueOf","analysisTarget":{"region":{"startLine":"829"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.287","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin1","analysisTarget":{"region":{"startLine":"1"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.288","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::correctLogin","analysisTarget":{"region":{"startLine":"713"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.289","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::correctLogin","analysisTarget":{"region":{"startLine":"713"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.290","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::correctTan","analysisTarget":{"region":{"startLine":"663"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.291","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::correctTan","analysisTarget":{"region":{"startLine":"663"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.292","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getTanPosition","analysisTarget":{"region":{"startLine":"564"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.293","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getTanPosition","analysisTarget":{"region":{"startLine":"564"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.294","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::resetTans","analysisTarget":{"region":{"startLine":"527"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.295","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::updateTan","analysisTarget":{"region":{"startLine":"487"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.296","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getUser","analysisTarget":{"region":{"startLine":"619"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.297","message":"Experimental - Method may fail to clean up stream or resource on checked exception"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin1::correctLogin","analysisTarget":{"region":{"startLine":"713"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.298","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin1::correctTan","analysisTarget":{"region":{"startLine":"663"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.299","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin1::getTanPosition","analysisTarget":{"region":{"startLine":"564"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.300","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin1::getUser","analysisTarget":{"region":{"startLine":"619"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.301","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin1::resetTans","analysisTarget":{"region":{"startLine":"527"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.302","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin1::updateTan","analysisTarget":{"region":{"startLine":"487"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin1.java"}}],"ruleId":"de.upb.gpa.findbugs.303","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin2::valueOf","analysisTarget":{"region":{"startLine":"798"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.304","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin2","analysisTarget":{"region":{"startLine":"58"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.305","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::correctLogin","analysisTarget":{"region":{"startLine":"721"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.306","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::correctLogin","analysisTarget":{"region":{"startLine":"721"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.307","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getTan","analysisTarget":{"region":{"startLine":"658"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.308","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getTan","analysisTarget":{"region":{"startLine":"658"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.309","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getTanPosition","analysisTarget":{"region":{"startLine":"607"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.310","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getTanPosition","analysisTarget":{"region":{"startLine":"607"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.311","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::resetTans","analysisTarget":{"region":{"startLine":"570"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.312","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::updateTan","analysisTarget":{"region":{"startLine":"490"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.313","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getUser","analysisTarget":{"region":{"startLine":"530"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.314","message":"Experimental - Method may fail to clean up stream or resource on checked exception"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin2::correctLogin","analysisTarget":{"region":{"startLine":"721"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.315","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin2::getTan","analysisTarget":{"region":{"startLine":"658"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.316","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin2::getTanPosition","analysisTarget":{"region":{"startLine":"607"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.317","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin2::getUser","analysisTarget":{"region":{"startLine":"530"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.318","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin2::resetTans","analysisTarget":{"region":{"startLine":"570"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.319","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::MultiLevelLogin2::updateTan","analysisTarget":{"region":{"startLine":"490"},"uri":"org\/owasp\/webgoat\/lessons\/MultiLevelLogin2.java"}}],"ruleId":"de.upb.gpa.findbugs.320","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::NewLesson::valueOf","analysisTarget":{"region":{"startLine":"66"},"uri":"org\/owasp\/webgoat\/lessons\/NewLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.321","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::NewLesson","analysisTarget":{"region":{"startLine":"39"},"uri":"org\/owasp\/webgoat\/lessons\/NewLesson.java"}}],"ruleId":"de.upb.gpa.findbugs.322","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::OffByOne::valueOf","analysisTarget":{"region":{"startLine":"149"},"uri":"org\/owasp\/webgoat\/lessons\/OffByOne.java"}}],"ruleId":"de.upb.gpa.findbugs.323","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::OffByOne","analysisTarget":{"region":{"startLine":"52"},"uri":"org\/owasp\/webgoat\/lessons\/OffByOne.java"}}],"ruleId":"de.upb.gpa.findbugs.324","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::PasswordStrength::valueOf","analysisTarget":{"region":{"startLine":"186"},"uri":"org\/owasp\/webgoat\/lessons\/PasswordStrength.java"}}],"ruleId":"de.upb.gpa.findbugs.325","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::PasswordStrength","analysisTarget":{"region":{"startLine":"53"},"uri":"org\/owasp\/webgoat\/lessons\/PasswordStrength.java"}}],"ruleId":"de.upb.gpa.findbugs.326","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::PathBasedAccessControl::<init>","analysisTarget":{"region":{"startLine":"66"},"uri":"org\/owasp\/webgoat\/lessons\/PathBasedAccessControl.java"}}],"ruleId":"de.upb.gpa.findbugs.327","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::PathBasedAccessControl::valueOf","analysisTarget":{"region":{"startLine":"253"},"uri":"org\/owasp\/webgoat\/lessons\/PathBasedAccessControl.java"}}],"ruleId":"de.upb.gpa.findbugs.328","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::PathBasedAccessControl","analysisTarget":{"region":{"startLine":"52"},"uri":"org\/owasp\/webgoat\/lessons\/PathBasedAccessControl.java"}}],"ruleId":"de.upb.gpa.findbugs.329","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::PathBasedAccessControl::createContent","analysisTarget":{"region":{"startLine":"66"},"uri":"org\/owasp\/webgoat\/lessons\/PathBasedAccessControl.java"}}],"ruleId":"de.upb.gpa.findbugs.330","message":"Style - Possible null pointer dereference due to return value of called method"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Phishing::valueOf","analysisTarget":{"region":{"startLine":"270"},"uri":"org\/owasp\/webgoat\/lessons\/Phishing.java"}}],"ruleId":"de.upb.gpa.findbugs.331","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::Phishing","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/Phishing.java"}}],"ruleId":"de.upb.gpa.findbugs.332","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ReflectedXSS::valueOf","analysisTarget":{"region":{"startLine":"240"},"uri":"org\/owasp\/webgoat\/lessons\/ReflectedXSS.java"}}],"ruleId":"de.upb.gpa.findbugs.333","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ReflectedXSS","analysisTarget":{"region":{"startLine":"56"},"uri":"org\/owasp\/webgoat\/lessons\/ReflectedXSS.java"}}],"ruleId":"de.upb.gpa.findbugs.334","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RemoteAdminFlaw","analysisTarget":{"region":{"startLine":"42"},"uri":"org\/owasp\/webgoat\/lessons\/RemoteAdminFlaw.java"}}],"ruleId":"de.upb.gpa.findbugs.335","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::deleteEmployeeProfile","analysisTarget":{"region":{"startLine":"97"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/DeleteProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.336","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::deleteEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"121"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/DeleteProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.337","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::DeleteProfile::deleteEmployeeProfile","analysisTarget":{"region":{"startLine":"97"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/DeleteProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.338","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::DeleteProfile::deleteEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"121"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/DeleteProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.339","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile","analysisTarget":{"region":{"startLine":"75"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.340","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile","analysisTarget":{"region":{"startLine":"75"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.341","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"123"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.342","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"123"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.343","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::EditProfile::getEmployeeProfile","analysisTarget":{"region":{"startLine":"75"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.344","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::EditProfile::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"123"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/EditProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.345","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::RoleBasedAccessControl::<init>","analysisTarget":{"region":{"startLine":"186"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/RoleBasedAccessControl.java"}}],"ruleId":"de.upb.gpa.findbugs.346","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::RoleBasedAccessControl::valueOf","analysisTarget":{"region":{"startLine":"55"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/RoleBasedAccessControl.java"}}],"ruleId":"de.upb.gpa.findbugs.347","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::RoleBasedAccessControl","analysisTarget":{"region":{"startLine":"53"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/RoleBasedAccessControl.java"}}],"ruleId":"de.upb.gpa.findbugs.348","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::RoleBasedAccessControl::handleRequest","analysisTarget":{"region":{"startLine":"206"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/RoleBasedAccessControl.java"}}],"ruleId":"de.upb.gpa.findbugs.349","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::RoleBasedAccessControl::handleRequest_BACKUP","analysisTarget":{"region":{"startLine":"325"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/RoleBasedAccessControl.java"}}],"ruleId":"de.upb.gpa.findbugs.350","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::changeEmployeeProfile","analysisTarget":{"region":{"startLine":"124"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.351","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::changeEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"166"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.352","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createEmployeeProfile","analysisTarget":{"region":{"startLine":"225"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.353","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getNextUID","analysisTarget":{"region":{"startLine":"204"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.354","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getNextUID","analysisTarget":{"region":{"startLine":"204"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.355","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::UpdateProfile::changeEmployeeProfile","analysisTarget":{"region":{"startLine":"124"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.356","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::UpdateProfile::changeEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"166"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.357","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::UpdateProfile::createEmployeeProfile","analysisTarget":{"region":{"startLine":"225"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.358","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::UpdateProfile::getNextUID","analysisTarget":{"region":{"startLine":"204"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/UpdateProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.359","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile","analysisTarget":{"region":{"startLine":"104"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.360","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile","analysisTarget":{"region":{"startLine":"104"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.361","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"150"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.362","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"150"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.363","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::ViewProfile::getEmployeeProfile","analysisTarget":{"region":{"startLine":"104"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.364","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::RoleBasedAccessControl::ViewProfile::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"150"},"uri":"org\/owasp\/webgoat\/lessons\/RoleBasedAccessControl\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.365","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getAllEmployees","analysisTarget":{"region":{"startLine":"78"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/ListStaff.java"}}],"ruleId":"de.upb.gpa.findbugs.366","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getAllEmployees","analysisTarget":{"region":{"startLine":"78"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/ListStaff.java"}}],"ruleId":"de.upb.gpa.findbugs.367","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getAllEmployees_BACKUP","analysisTarget":{"region":{"startLine":"119"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/ListStaff.java"}}],"ruleId":"de.upb.gpa.findbugs.368","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getAllEmployees_BACKUP","analysisTarget":{"region":{"startLine":"119"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/ListStaff.java"}}],"ruleId":"de.upb.gpa.findbugs.369","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SQLInjection::ListStaff::getAllEmployees","analysisTarget":{"region":{"startLine":"78"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/ListStaff.java"}}],"ruleId":"de.upb.gpa.findbugs.370","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SQLInjection::ListStaff::getAllEmployees_BACKUP","analysisTarget":{"region":{"startLine":"119"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/ListStaff.java"}}],"ruleId":"de.upb.gpa.findbugs.371","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getAllEmployees","analysisTarget":{"region":{"startLine":"191"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.372","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getAllEmployees","analysisTarget":{"region":{"startLine":"191"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.373","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::login","analysisTarget":{"region":{"startLine":"121"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.374","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::login","analysisTarget":{"region":{"startLine":"121"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.375","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::login_BACKUP","analysisTarget":{"region":{"startLine":"156"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.376","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::login_BACKUP","analysisTarget":{"region":{"startLine":"156"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.377","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SQLInjection::Login::getAllEmployees","analysisTarget":{"region":{"startLine":"191"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.378","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SQLInjection::Login::login","analysisTarget":{"region":{"startLine":"121"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.379","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SQLInjection::Login::login_BACKUP","analysisTarget":{"region":{"startLine":"156"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.380","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SQLInjection::Login::login","analysisTarget":{"region":{"startLine":"121"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.381","message":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SQLInjection::Login::login_BACKUP","analysisTarget":{"region":{"startLine":"156"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/Login.java"}}],"ruleId":"de.upb.gpa.findbugs.382","message":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SQLInjection::SQLInjection::<init>","analysisTarget":{"region":{"startLine":"257"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/SQLInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.383","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SQLInjection::SQLInjection::valueOf","analysisTarget":{"region":{"startLine":"55"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/SQLInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.384","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SQLInjection::SQLInjection","analysisTarget":{"region":{"startLine":"53"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/SQLInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.385","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile","analysisTarget":{"region":{"startLine":"95"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.386","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile","analysisTarget":{"region":{"startLine":"95"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.387","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"146"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.388","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"146"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.389","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SQLInjection::ViewProfile::getEmployeeProfile","analysisTarget":{"region":{"startLine":"95"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.390","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SQLInjection::ViewProfile::getEmployeeProfile_BACKUP","analysisTarget":{"region":{"startLine":"146"},"uri":"org\/owasp\/webgoat\/lessons\/SQLInjection\/ViewProfile.java"}}],"ruleId":"de.upb.gpa.findbugs.391","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SameOriginPolicyProtection::valueOf","analysisTarget":{"region":{"startLine":"22"},"uri":"org\/owasp\/webgoat\/lessons\/SameOriginPolicyProtection.java"}}],"ruleId":"de.upb.gpa.findbugs.392","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SameOriginPolicyProtection","analysisTarget":{"region":{"startLine":"20"},"uri":"org\/owasp\/webgoat\/lessons\/SameOriginPolicyProtection.java"}}],"ruleId":"de.upb.gpa.findbugs.393","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SessionFixation","analysisTarget":{"region":{"startLine":"1"},"uri":"org\/owasp\/webgoat\/lessons\/SessionFixation.java"}}],"ruleId":"de.upb.gpa.findbugs.394","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::correctLogin","analysisTarget":{"region":{"startLine":"458"},"uri":"org\/owasp\/webgoat\/lessons\/SessionFixation.java"}}],"ruleId":"de.upb.gpa.findbugs.395","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::correctLogin","analysisTarget":{"region":{"startLine":"458"},"uri":"org\/owasp\/webgoat\/lessons\/SessionFixation.java"}}],"ruleId":"de.upb.gpa.findbugs.396","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getUser","analysisTarget":{"region":{"startLine":"632"},"uri":"org\/owasp\/webgoat\/lessons\/SessionFixation.java"}}],"ruleId":"de.upb.gpa.findbugs.397","message":"Experimental - Method may fail to clean up stream or resource on checked exception"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SessionFixation::correctLogin","analysisTarget":{"region":{"startLine":"458"},"uri":"org\/owasp\/webgoat\/lessons\/SessionFixation.java"}}],"ruleId":"de.upb.gpa.findbugs.398","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SessionFixation::getUser","analysisTarget":{"region":{"startLine":"632"},"uri":"org\/owasp\/webgoat\/lessons\/SessionFixation.java"}}],"ruleId":"de.upb.gpa.findbugs.399","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SessionFixation","analysisTarget":{"region":{"startLine":"66"},"uri":"org\/owasp\/webgoat\/lessons\/SessionFixation.java"}}],"ruleId":"de.upb.gpa.findbugs.400","message":"Performance - Unread field: should this field be static?"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SessionFixation","analysisTarget":{"region":{"startLine":"64"},"uri":"org\/owasp\/webgoat\/lessons\/SessionFixation.java"}}],"ruleId":"de.upb.gpa.findbugs.401","message":"Performance - Unread field: should this field be static?"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SessionFixation","analysisTarget":{"region":{"startLine":"65"},"uri":"org\/owasp\/webgoat\/lessons\/SessionFixation.java"}}],"ruleId":"de.upb.gpa.findbugs.402","message":"Performance - Unread field: should this field be static?"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SessionFixation","analysisTarget":{"region":{"startLine":"63"},"uri":"org\/owasp\/webgoat\/lessons\/SessionFixation.java"}}],"ruleId":"de.upb.gpa.findbugs.403","message":"Performance - Unread field: should this field be static?"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SilentTransactions::<init>","analysisTarget":{"region":{"startLine":"70"},"uri":"org\/owasp\/webgoat\/lessons\/SilentTransactions.java"}}],"ruleId":"de.upb.gpa.findbugs.404","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SilentTransactions::valueOf","analysisTarget":{"region":{"startLine":"59"},"uri":"org\/owasp\/webgoat\/lessons\/SilentTransactions.java"}}],"ruleId":"de.upb.gpa.findbugs.405","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SilentTransactions","analysisTarget":{"region":{"startLine":"56"},"uri":"org\/owasp\/webgoat\/lessons\/SilentTransactions.java"}}],"ruleId":"de.upb.gpa.findbugs.406","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SoapRequest::valueOf","analysisTarget":{"region":{"startLine":"153"},"uri":"org\/owasp\/webgoat\/lessons\/SoapRequest.java"}}],"ruleId":"de.upb.gpa.findbugs.407","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SoapRequest","analysisTarget":{"region":{"startLine":"62"},"uri":"org\/owasp\/webgoat\/lessons\/SoapRequest.java"}}],"ruleId":"de.upb.gpa.findbugs.408","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getResults","analysisTarget":{"region":{"startLine":"405"},"uri":"org\/owasp\/webgoat\/lessons\/SoapRequest.java"}}],"ruleId":"de.upb.gpa.findbugs.409","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getResults","analysisTarget":{"region":{"startLine":"405"},"uri":"org\/owasp\/webgoat\/lessons\/SoapRequest.java"}}],"ruleId":"de.upb.gpa.findbugs.410","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SoapRequest::getResults","analysisTarget":{"region":{"startLine":"405"},"uri":"org\/owasp\/webgoat\/lessons\/SoapRequest.java"}}],"ruleId":"de.upb.gpa.findbugs.411","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SoapRequest::replaceAll","analysisTarget":{"region":{"startLine":"110"},"uri":"org\/owasp\/webgoat\/lessons\/SoapRequest.java"}}],"ruleId":"de.upb.gpa.findbugs.412","message":"Correctness - Method ignores return value"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SoapRequest::getCreditCard","analysisTarget":{"region":{"startLine":"423"},"uri":"org\/owasp\/webgoat\/lessons\/SoapRequest.java"}}],"ruleId":"de.upb.gpa.findbugs.413","message":"Style - Write to static field from instance method"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SoapRequest::getFirstName","analysisTarget":{"region":{"startLine":"440"},"uri":"org\/owasp\/webgoat\/lessons\/SoapRequest.java"}}],"ruleId":"de.upb.gpa.findbugs.414","message":"Style - Write to static field from instance method"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SoapRequest::getLastName","analysisTarget":{"region":{"startLine":"455"},"uri":"org\/owasp\/webgoat\/lessons\/SoapRequest.java"}}],"ruleId":"de.upb.gpa.findbugs.415","message":"Style - Write to static field from instance method"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SoapRequest::getLoginCount","analysisTarget":{"region":{"startLine":"470"},"uri":"org\/owasp\/webgoat\/lessons\/SoapRequest.java"}}],"ruleId":"de.upb.gpa.findbugs.416","message":"Style - Write to static field from instance method"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SoapRequest::setWebgoatContext","analysisTarget":{"region":{"startLine":"94"},"uri":"org\/owasp\/webgoat\/lessons\/SoapRequest.java"}}],"ruleId":"de.upb.gpa.findbugs.417","message":"Style - Write to static field from instance method"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlAddData::valueOf","analysisTarget":{"region":{"startLine":"58"},"uri":"org\/owasp\/webgoat\/lessons\/SqlAddData.java"}}],"ruleId":"de.upb.gpa.findbugs.418","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlAddData","analysisTarget":{"region":{"startLine":"56"},"uri":"org\/owasp\/webgoat\/lessons\/SqlAddData.java"}}],"ruleId":"de.upb.gpa.findbugs.419","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::createContent","analysisTarget":{"region":{"startLine":"73"},"uri":"org\/owasp\/webgoat\/lessons\/SqlAddData.java"}}],"ruleId":"de.upb.gpa.findbugs.420","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createContent","analysisTarget":{"region":{"startLine":"73"},"uri":"org\/owasp\/webgoat\/lessons\/SqlAddData.java"}}],"ruleId":"de.upb.gpa.findbugs.421","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlAddData::createContent","analysisTarget":{"region":{"startLine":"73"},"uri":"org\/owasp\/webgoat\/lessons\/SqlAddData.java"}}],"ruleId":"de.upb.gpa.findbugs.422","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlAddData::createContent","analysisTarget":{"region":{"startLine":"73"},"uri":"org\/owasp\/webgoat\/lessons\/SqlAddData.java"}}],"ruleId":"de.upb.gpa.findbugs.423","message":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlModifyData::valueOf","analysisTarget":{"region":{"startLine":"58"},"uri":"org\/owasp\/webgoat\/lessons\/SqlModifyData.java"}}],"ruleId":"de.upb.gpa.findbugs.424","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlModifyData","analysisTarget":{"region":{"startLine":"56"},"uri":"org\/owasp\/webgoat\/lessons\/SqlModifyData.java"}}],"ruleId":"de.upb.gpa.findbugs.425","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::createContent","analysisTarget":{"region":{"startLine":"76"},"uri":"org\/owasp\/webgoat\/lessons\/SqlModifyData.java"}}],"ruleId":"de.upb.gpa.findbugs.426","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createContent","analysisTarget":{"region":{"startLine":"76"},"uri":"org\/owasp\/webgoat\/lessons\/SqlModifyData.java"}}],"ruleId":"de.upb.gpa.findbugs.427","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlModifyData::createContent","analysisTarget":{"region":{"startLine":"76"},"uri":"org\/owasp\/webgoat\/lessons\/SqlModifyData.java"}}],"ruleId":"de.upb.gpa.findbugs.428","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlModifyData::createContent","analysisTarget":{"region":{"startLine":"76"},"uri":"org\/owasp\/webgoat\/lessons\/SqlModifyData.java"}}],"ruleId":"de.upb.gpa.findbugs.429","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlModifyData::createContent","analysisTarget":{"region":{"startLine":"76"},"uri":"org\/owasp\/webgoat\/lessons\/SqlModifyData.java"}}],"ruleId":"de.upb.gpa.findbugs.430","message":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlNumericInjection::valueOf","analysisTarget":{"region":{"startLine":"320"},"uri":"org\/owasp\/webgoat\/lessons\/SqlNumericInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.431","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlNumericInjection","analysisTarget":{"region":{"startLine":"58"},"uri":"org\/owasp\/webgoat\/lessons\/SqlNumericInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.432","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getStations","analysisTarget":{"region":{"startLine":"254"},"uri":"org\/owasp\/webgoat\/lessons\/SqlNumericInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.433","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getStations","analysisTarget":{"region":{"startLine":"254"},"uri":"org\/owasp\/webgoat\/lessons\/SqlNumericInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.434","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::injectableQuery","analysisTarget":{"region":{"startLine":"89"},"uri":"org\/owasp\/webgoat\/lessons\/SqlNumericInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.435","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::injectableQuery","analysisTarget":{"region":{"startLine":"89"},"uri":"org\/owasp\/webgoat\/lessons\/SqlNumericInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.436","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::parameterizedQuery","analysisTarget":{"region":{"startLine":"159"},"uri":"org\/owasp\/webgoat\/lessons\/SqlNumericInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.437","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::parameterizedQuery","analysisTarget":{"region":{"startLine":"159"},"uri":"org\/owasp\/webgoat\/lessons\/SqlNumericInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.438","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlNumericInjection::getStations","analysisTarget":{"region":{"startLine":"254"},"uri":"org\/owasp\/webgoat\/lessons\/SqlNumericInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.439","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlNumericInjection::injectableQuery","analysisTarget":{"region":{"startLine":"89"},"uri":"org\/owasp\/webgoat\/lessons\/SqlNumericInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.440","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlNumericInjection::parameterizedQuery","analysisTarget":{"region":{"startLine":"159"},"uri":"org\/owasp\/webgoat\/lessons\/SqlNumericInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.441","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlNumericInjection::makeStationList","analysisTarget":{"region":{"startLine":"225"},"uri":"org\/owasp\/webgoat\/lessons\/SqlNumericInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.442","message":"Performance - Inefficient use of keySet iterator instead of entrySet iterator"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlStringInjection::valueOf","analysisTarget":{"region":{"startLine":"58"},"uri":"org\/owasp\/webgoat\/lessons\/SqlStringInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.443","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlStringInjection","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/SqlStringInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.444","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::injectableQuery","analysisTarget":{"region":{"startLine":"86"},"uri":"org\/owasp\/webgoat\/lessons\/SqlStringInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.445","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::injectableQuery","analysisTarget":{"region":{"startLine":"86"},"uri":"org\/owasp\/webgoat\/lessons\/SqlStringInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.446","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::parameterizedQuery","analysisTarget":{"region":{"startLine":"142"},"uri":"org\/owasp\/webgoat\/lessons\/SqlStringInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.447","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::parameterizedQuery","analysisTarget":{"region":{"startLine":"142"},"uri":"org\/owasp\/webgoat\/lessons\/SqlStringInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.448","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlStringInjection::injectableQuery","analysisTarget":{"region":{"startLine":"86"},"uri":"org\/owasp\/webgoat\/lessons\/SqlStringInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.449","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlStringInjection::parameterizedQuery","analysisTarget":{"region":{"startLine":"142"},"uri":"org\/owasp\/webgoat\/lessons\/SqlStringInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.450","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::SqlStringInjection::injectableQuery","analysisTarget":{"region":{"startLine":"86"},"uri":"org\/owasp\/webgoat\/lessons\/SqlStringInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.451","message":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::StoredXss::valueOf","analysisTarget":{"region":{"startLine":"61"},"uri":"org\/owasp\/webgoat\/lessons\/StoredXss.java"}}],"ruleId":"de.upb.gpa.findbugs.452","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::StoredXss","analysisTarget":{"region":{"startLine":"59"},"uri":"org\/owasp\/webgoat\/lessons\/StoredXss.java"}}],"ruleId":"de.upb.gpa.findbugs.453","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::addMessage","analysisTarget":{"region":{"startLine":"96"},"uri":"org\/owasp\/webgoat\/lessons\/StoredXss.java"}}],"ruleId":"de.upb.gpa.findbugs.454","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::makeCurrent","analysisTarget":{"region":{"startLine":"199"},"uri":"org\/owasp\/webgoat\/lessons\/StoredXss.java"}}],"ruleId":"de.upb.gpa.findbugs.455","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::makeCurrent","analysisTarget":{"region":{"startLine":"199"},"uri":"org\/owasp\/webgoat\/lessons\/StoredXss.java"}}],"ruleId":"de.upb.gpa.findbugs.456","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::makeList","analysisTarget":{"region":{"startLine":"316"},"uri":"org\/owasp\/webgoat\/lessons\/StoredXss.java"}}],"ruleId":"de.upb.gpa.findbugs.457","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::makeList","analysisTarget":{"region":{"startLine":"316"},"uri":"org\/owasp\/webgoat\/lessons\/StoredXss.java"}}],"ruleId":"de.upb.gpa.findbugs.458","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::StoredXss::addMessage","analysisTarget":{"region":{"startLine":"96"},"uri":"org\/owasp\/webgoat\/lessons\/StoredXss.java"}}],"ruleId":"de.upb.gpa.findbugs.459","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::StoredXss::makeCurrent","analysisTarget":{"region":{"startLine":"199"},"uri":"org\/owasp\/webgoat\/lessons\/StoredXss.java"}}],"ruleId":"de.upb.gpa.findbugs.460","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::StoredXss::makeList","analysisTarget":{"region":{"startLine":"316"},"uri":"org\/owasp\/webgoat\/lessons\/StoredXss.java"}}],"ruleId":"de.upb.gpa.findbugs.461","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ThreadSafetyProblem::valueOf","analysisTarget":{"region":{"startLine":"52"},"uri":"org\/owasp\/webgoat\/lessons\/ThreadSafetyProblem.java"}}],"ruleId":"de.upb.gpa.findbugs.462","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ThreadSafetyProblem::createContent","analysisTarget":{"region":{"startLine":"72"},"uri":"org\/owasp\/webgoat\/lessons\/ThreadSafetyProblem.java"}}],"ruleId":"de.upb.gpa.findbugs.463","message":"Performance - Method invokes inefficient new String(String) constructor"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ThreadSafetyProblem","analysisTarget":{"region":{"startLine":"50"},"uri":"org\/owasp\/webgoat\/lessons\/ThreadSafetyProblem.java"}}],"ruleId":"de.upb.gpa.findbugs.464","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::createContent","analysisTarget":{"region":{"startLine":"72"},"uri":"org\/owasp\/webgoat\/lessons\/ThreadSafetyProblem.java"}}],"ruleId":"de.upb.gpa.findbugs.465","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createContent","analysisTarget":{"region":{"startLine":"72"},"uri":"org\/owasp\/webgoat\/lessons\/ThreadSafetyProblem.java"}}],"ruleId":"de.upb.gpa.findbugs.466","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::ThreadSafetyProblem::createContent","analysisTarget":{"region":{"startLine":"72"},"uri":"org\/owasp\/webgoat\/lessons\/ThreadSafetyProblem.java"}}],"ruleId":"de.upb.gpa.findbugs.467","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::TomcatSetup::valueOf","analysisTarget":{"region":{"startLine":"66"},"uri":"org\/owasp\/webgoat\/lessons\/TomcatSetup.java"}}],"ruleId":"de.upb.gpa.findbugs.468","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::TomcatSetup","analysisTarget":{"region":{"startLine":"40"},"uri":"org\/owasp\/webgoat\/lessons\/TomcatSetup.java"}}],"ruleId":"de.upb.gpa.findbugs.469","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::TraceXSS","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/TraceXSS.java"}}],"ruleId":"de.upb.gpa.findbugs.470","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::UncheckedEmail::valueOf","analysisTarget":{"region":{"startLine":"414"},"uri":"org\/owasp\/webgoat\/lessons\/UncheckedEmail.java"}}],"ruleId":"de.upb.gpa.findbugs.471","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::UncheckedEmail","analysisTarget":{"region":{"startLine":"68"},"uri":"org\/owasp\/webgoat\/lessons\/UncheckedEmail.java"}}],"ruleId":"de.upb.gpa.findbugs.472","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::UncheckedEmail::formatMail","analysisTarget":{"region":{"startLine":"152"},"uri":"org\/owasp\/webgoat\/lessons\/UncheckedEmail.java"}}],"ruleId":"de.upb.gpa.findbugs.473","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::UncheckedEmail","analysisTarget":{"region":{"startLine":"72"},"uri":"org\/owasp\/webgoat\/lessons\/UncheckedEmail.java"}}],"ruleId":"de.upb.gpa.findbugs.474","message":"Performance - Unread field: should this field be static?"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::UncheckedEmail","analysisTarget":{"region":{"startLine":"70"},"uri":"org\/owasp\/webgoat\/lessons\/UncheckedEmail.java"}}],"ruleId":"de.upb.gpa.findbugs.475","message":"Performance - Unread field: should this field be static?"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::UsefulTools::valueOf","analysisTarget":{"region":{"startLine":"67"},"uri":"org\/owasp\/webgoat\/lessons\/UsefulTools.java"}}],"ruleId":"de.upb.gpa.findbugs.476","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::UsefulTools","analysisTarget":{"region":{"startLine":"40"},"uri":"org\/owasp\/webgoat\/lessons\/UsefulTools.java"}}],"ruleId":"de.upb.gpa.findbugs.477","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WSDLScanning::valueOf","analysisTarget":{"region":{"startLine":"74"},"uri":"org\/owasp\/webgoat\/lessons\/WSDLScanning.java"}}],"ruleId":"de.upb.gpa.findbugs.478","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WSDLScanning::valueOf","analysisTarget":{"region":{"startLine":"171"},"uri":"org\/owasp\/webgoat\/lessons\/WSDLScanning.java"}}],"ruleId":"de.upb.gpa.findbugs.479","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WSDLScanning","analysisTarget":{"region":{"startLine":"71"},"uri":"org\/owasp\/webgoat\/lessons\/WSDLScanning.java"}}],"ruleId":"de.upb.gpa.findbugs.480","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getResults","analysisTarget":{"region":{"startLine":"264"},"uri":"org\/owasp\/webgoat\/lessons\/WSDLScanning.java"}}],"ruleId":"de.upb.gpa.findbugs.481","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getResults","analysisTarget":{"region":{"startLine":"264"},"uri":"org\/owasp\/webgoat\/lessons\/WSDLScanning.java"}}],"ruleId":"de.upb.gpa.findbugs.482","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WSDLScanning::getResults","analysisTarget":{"region":{"startLine":"264"},"uri":"org\/owasp\/webgoat\/lessons\/WSDLScanning.java"}}],"ruleId":"de.upb.gpa.findbugs.483","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WSDLScanning::createContent","analysisTarget":{"region":{"startLine":"171"},"uri":"org\/owasp\/webgoat\/lessons\/WSDLScanning.java"}}],"ruleId":"de.upb.gpa.findbugs.484","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WSDLScanning::getCreditCard","analysisTarget":{"region":{"startLine":"282"},"uri":"org\/owasp\/webgoat\/lessons\/WSDLScanning.java"}}],"ruleId":"de.upb.gpa.findbugs.485","message":"Style - Write to static field from instance method"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WSDLScanning::setWebgoatContext","analysisTarget":{"region":{"startLine":"101"},"uri":"org\/owasp\/webgoat\/lessons\/WSDLScanning.java"}}],"ruleId":"de.upb.gpa.findbugs.486","message":"Style - Write to static field from instance method"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WeakAuthenticationCookie::valueOf","analysisTarget":{"region":{"startLine":"56"},"uri":"org\/owasp\/webgoat\/lessons\/WeakAuthenticationCookie.java"}}],"ruleId":"de.upb.gpa.findbugs.487","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WeakAuthenticationCookie::checkParams","analysisTarget":{"region":{"startLine":"126"},"uri":"org\/owasp\/webgoat\/lessons\/WeakAuthenticationCookie.java"}}],"ruleId":"de.upb.gpa.findbugs.488","message":"Bad practice - Comparison of String objects using == or !="},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WeakAuthenticationCookie","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/WeakAuthenticationCookie.java"}}],"ruleId":"de.upb.gpa.findbugs.489","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WeakSessionID::valueOf","analysisTarget":{"region":{"startLine":"56"},"uri":"org\/owasp\/webgoat\/lessons\/WeakSessionID.java"}}],"ruleId":"de.upb.gpa.findbugs.490","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WeakSessionID::encode","analysisTarget":{"region":{"startLine":"108"},"uri":"org\/owasp\/webgoat\/lessons\/WeakSessionID.java"}}],"ruleId":"de.upb.gpa.findbugs.491","message":"Performance - Method invokes inefficient new String(String) constructor"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WeakSessionID","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/WeakSessionID.java"}}],"ruleId":"de.upb.gpa.findbugs.492","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WeakSessionID","analysisTarget":{"region":{"startLine":"79"},"uri":"org\/owasp\/webgoat\/lessons\/WeakSessionID.java"}}],"ruleId":"de.upb.gpa.findbugs.493","message":"Malicious code - Field should be package protected"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WeakSessionID","analysisTarget":{"region":{"startLine":"77"},"uri":"org\/owasp\/webgoat\/lessons\/WeakSessionID.java"}}],"ruleId":"de.upb.gpa.findbugs.494","message":"Malicious code - Field should be package protected"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WeakSessionID","analysisTarget":{"region":{"startLine":"75"},"uri":"org\/owasp\/webgoat\/lessons\/WeakSessionID.java"}}],"ruleId":"de.upb.gpa.findbugs.495","message":"Malicious code - Field isn't final but should be"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WsSAXInjection","analysisTarget":{"region":{"startLine":"62"},"uri":"org\/owasp\/webgoat\/lessons\/WsSAXInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.496","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WsSAXInjection","analysisTarget":{"region":{"startLine":"80"},"uri":"org\/owasp\/webgoat\/lessons\/WsSAXInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.497","message":"Performance - Unused field"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WsSqlInjection","analysisTarget":{"region":{"startLine":"61"},"uri":"org\/owasp\/webgoat\/lessons\/WsSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.498","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getResults","analysisTarget":{"region":{"startLine":"227"},"uri":"org\/owasp\/webgoat\/lessons\/WsSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.499","message":"Experimental - Method may fail to clean up stream or resource on checked exception"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WsSqlInjection::getResults","analysisTarget":{"region":{"startLine":"227"},"uri":"org\/owasp\/webgoat\/lessons\/WsSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.500","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WsSqlInjection::getCreditCard","analysisTarget":{"region":{"startLine":"246"},"uri":"org\/owasp\/webgoat\/lessons\/WsSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.501","message":"Style - Write to static field from instance method"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::WsSqlInjection::setWebgoatContext","analysisTarget":{"region":{"startLine":"91"},"uri":"org\/owasp\/webgoat\/lessons\/WsSqlInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.502","message":"Style - Write to static field from instance method"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::XMLInjection::<init>","analysisTarget":{"region":{"startLine":"101"},"uri":"org\/owasp\/webgoat\/lessons\/XMLInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.503","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::XMLInjection::valueOf","analysisTarget":{"region":{"startLine":"57"},"uri":"org\/owasp\/webgoat\/lessons\/XMLInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.504","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::XMLInjection::getRawParameter","analysisTarget":{"region":{"startLine":"133"},"uri":"org\/owasp\/webgoat\/lessons\/XMLInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.505","message":"Bad practice - Comparison of String objects using == or !="},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::XMLInjection","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/XMLInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.506","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::XMLInjection","analysisTarget":{"region":{"startLine":"61"},"uri":"org\/owasp\/webgoat\/lessons\/XMLInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.507","message":"Malicious code - Field isn't final but should be"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::XPATHInjection::valueOf","analysisTarget":{"region":{"startLine":"73"},"uri":"org\/owasp\/webgoat\/lessons\/XPATHInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.508","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::XPATHInjection","analysisTarget":{"region":{"startLine":"70"},"uri":"org\/owasp\/webgoat\/lessons\/XPATHInjection.java"}}],"ruleId":"de.upb.gpa.findbugs.509","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::admin::AdminScreen","analysisTarget":{"region":{"startLine":"45"},"uri":"org\/owasp\/webgoat\/lessons\/admin\/AdminScreen.java"}}],"ruleId":"de.upb.gpa.findbugs.510","message":"Style - Unread public\/protected field"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::admin::ProductsAdminScreen","analysisTarget":{"region":{"startLine":"46"},"uri":"org\/owasp\/webgoat\/lessons\/admin\/ProductsAdminScreen.java"}}],"ruleId":"de.upb.gpa.findbugs.511","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createContent","analysisTarget":{"region":{"startLine":"60"},"uri":"org\/owasp\/webgoat\/lessons\/admin\/ProductsAdminScreen.java"}}],"ruleId":"de.upb.gpa.findbugs.512","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::admin::ProductsAdminScreen::createContent","analysisTarget":{"region":{"startLine":"60"},"uri":"org\/owasp\/webgoat\/lessons\/admin\/ProductsAdminScreen.java"}}],"ruleId":"de.upb.gpa.findbugs.513","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::admin::RefreshDBScreen","analysisTarget":{"region":{"startLine":"46"},"uri":"org\/owasp\/webgoat\/lessons\/admin\/RefreshDBScreen.java"}}],"ruleId":"de.upb.gpa.findbugs.514","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::admin::ReportCardScreen","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/admin\/ReportCardScreen.java"}}],"ruleId":"de.upb.gpa.findbugs.515","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::admin::SummaryReportCardScreen","analysisTarget":{"region":{"startLine":"55"},"uri":"org\/owasp\/webgoat\/lessons\/admin\/SummaryReportCardScreen.java"}}],"ruleId":"de.upb.gpa.findbugs.516","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::admin::UserAdminScreen","analysisTarget":{"region":{"startLine":"46"},"uri":"org\/owasp\/webgoat\/lessons\/admin\/UserAdminScreen.java"}}],"ruleId":"de.upb.gpa.findbugs.517","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createContent","analysisTarget":{"region":{"startLine":"60"},"uri":"org\/owasp\/webgoat\/lessons\/admin\/UserAdminScreen.java"}}],"ruleId":"de.upb.gpa.findbugs.518","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::admin::UserAdminScreen::createContent","analysisTarget":{"region":{"startLine":"60"},"uri":"org\/owasp\/webgoat\/lessons\/admin\/UserAdminScreen.java"}}],"ruleId":"de.upb.gpa.findbugs.519","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::admin::ViewDatabase","analysisTarget":{"region":{"startLine":"48"},"uri":"org\/owasp\/webgoat\/lessons\/admin\/ViewDatabase.java"}}],"ruleId":"de.upb.gpa.findbugs.520","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::createContent","analysisTarget":{"region":{"startLine":"62"},"uri":"org\/owasp\/webgoat\/lessons\/admin\/ViewDatabase.java"}}],"ruleId":"de.upb.gpa.findbugs.521","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createContent","analysisTarget":{"region":{"startLine":"62"},"uri":"org\/owasp\/webgoat\/lessons\/admin\/ViewDatabase.java"}}],"ruleId":"de.upb.gpa.findbugs.522","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::admin::ViewDatabase::createContent","analysisTarget":{"region":{"startLine":"62"},"uri":"org\/owasp\/webgoat\/lessons\/admin\/ViewDatabase.java"}}],"ruleId":"de.upb.gpa.findbugs.523","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::doDeleteEmployeeProfile","analysisTarget":{"region":{"startLine":"25"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/DeleteProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.524","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::DeleteProfile_i::doDeleteEmployeeProfile","analysisTarget":{"region":{"startLine":"25"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/DeleteProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.525","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile","analysisTarget":{"region":{"startLine":"42"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/EditProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.526","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile","analysisTarget":{"region":{"startLine":"42"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/EditProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.527","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::EditProfile_i::getEmployeeProfile","analysisTarget":{"region":{"startLine":"42"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/EditProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.528","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::RoleBasedAccessControl_i","analysisTarget":{"region":{"startLine":"53"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/RoleBasedAccessControl_i.java"}}],"ruleId":"de.upb.gpa.findbugs.529","message":"Bad practice - Class inherits equals() and uses Object.hashCode()"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::RoleBasedAccessControl_i::handleRequest","analysisTarget":{"region":{"startLine":"59"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/RoleBasedAccessControl_i.java"}}],"ruleId":"de.upb.gpa.findbugs.530","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::changeEmployeeProfile","analysisTarget":{"region":{"startLine":"41"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/UpdateProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.531","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createEmployeeProfile","analysisTarget":{"region":{"startLine":"88"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/UpdateProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.532","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::UpdateProfile_i::changeEmployeeProfile","analysisTarget":{"region":{"startLine":"41"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/UpdateProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.533","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::UpdateProfile_i::createEmployeeProfile","analysisTarget":{"region":{"startLine":"88"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/UpdateProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.534","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile","analysisTarget":{"region":{"startLine":"60"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/ViewProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.535","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile","analysisTarget":{"region":{"startLine":"60"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/ViewProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.536","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::instructor::RoleBasedAccessControl::ViewProfile_i::getEmployeeProfile","analysisTarget":{"region":{"startLine":"60"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/RoleBasedAccessControl\/ViewProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.537","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::login","analysisTarget":{"region":{"startLine":"43"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/SQLInjection\/Login_i.java"}}],"ruleId":"de.upb.gpa.findbugs.538","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::login","analysisTarget":{"region":{"startLine":"43"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/SQLInjection\/Login_i.java"}}],"ruleId":"de.upb.gpa.findbugs.539","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::instructor::SQLInjection::Login_i::login","analysisTarget":{"region":{"startLine":"43"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/SQLInjection\/Login_i.java"}}],"ruleId":"de.upb.gpa.findbugs.540","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::ResultSet::getEmployeeProfile","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/SQLInjection\/ViewProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.541","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::getEmployeeProfile","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/SQLInjection\/ViewProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.542","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::lessons::instructor::SQLInjection::ViewProfile_i::getEmployeeProfile","analysisTarget":{"region":{"startLine":"54"},"uri":"org\/owasp\/webgoat\/lessons\/instructor\/SQLInjection\/ViewProfile_i.java"}}],"ruleId":"de.upb.gpa.findbugs.543","message":"Bad practice - Method may fail to close database resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::Authorization::valueOf","analysisTarget":{"region":{"startLine":"51"},"uri":"org\/owasp\/webgoat\/session\/Authorization.java"}}],"ruleId":"de.upb.gpa.findbugs.544","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::Authorization::valueOf","analysisTarget":{"region":{"startLine":"46"},"uri":"org\/owasp\/webgoat\/session\/Authorization.java"}}],"ruleId":"de.upb.gpa.findbugs.545","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::Course::getLanguageFromFileName","analysisTarget":{"region":{"startLine":"378"},"uri":"org\/owasp\/webgoat\/session\/Course.java"}}],"ruleId":"de.upb.gpa.findbugs.546","message":"Performance - Method invokes inefficient new String(String) constructor"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::Course::loadLessons","analysisTarget":{"region":{"startLine":"343"},"uri":"org\/owasp\/webgoat\/session\/Course.java"}}],"ruleId":"de.upb.gpa.findbugs.547","message":"Style - Exception is caught when Exception is not thrown"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::Course::getWebgoatI18N","analysisTarget":{"region":{"startLine":"391"},"uri":"org\/owasp\/webgoat\/session\/Course.java"}}],"ruleId":"de.upb.gpa.findbugs.548","message":"Style - Return value of method without side effect is ignored"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createAuthTable","analysisTarget":{"region":{"startLine":"706"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.549","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createBlindSQLLessonTable","analysisTarget":{"region":{"startLine":"306"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.550","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createEmployeeTable","analysisTarget":{"region":{"startLine":"558"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.551","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createLoginTable","analysisTarget":{"region":{"startLine":"278"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.552","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createMFEImagesTable","analysisTarget":{"region":{"startLine":"87"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.553","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createMessageTable","analysisTarget":{"region":{"startLine":"53"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.554","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createModifyWithSQLLessonTable","analysisTarget":{"region":{"startLine":"353"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.555","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createOwnershipTable","analysisTarget":{"region":{"startLine":"813"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.556","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createProductTable","analysisTarget":{"region":{"startLine":"127"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.557","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createRolesTable","analysisTarget":{"region":{"startLine":"655"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.558","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createTanTable","analysisTarget":{"region":{"startLine":"496"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.559","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createTanUserDataTable","analysisTarget":{"region":{"startLine":"453"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.560","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createTransactionTable","analysisTarget":{"region":{"startLine":"957"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.561","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createUserAdminTable","analysisTarget":{"region":{"startLine":"175"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.562","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createUserDataTable","analysisTarget":{"region":{"startLine":"222"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.563","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"java::sql::Statement::createWeatherDataTable","analysisTarget":{"region":{"startLine":"406"},"uri":"org\/owasp\/webgoat\/session\/CreateDB.java"}}],"ruleId":"de.upb.gpa.findbugs.564","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::DatabaseUtilities::getHsqldbConnection","analysisTarget":{"region":{"startLine":"111"},"uri":"org\/owasp\/webgoat\/session\/DatabaseUtilities.java"}}],"ruleId":"de.upb.gpa.findbugs.565","message":"Security - Empty database password"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::ECSFactory::makeInput","analysisTarget":{"region":{"startLine":"235"},"uri":"org\/owasp\/webgoat\/session\/ECSFactory.java"}}],"ruleId":"de.upb.gpa.findbugs.566","message":"Performance - Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::ECSFactory::makeInput","analysisTarget":{"region":{"startLine":"215"},"uri":"org\/owasp\/webgoat\/session\/ECSFactory.java"}}],"ruleId":"de.upb.gpa.findbugs.567","message":"Performance - Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::ECSFactory::makeLink","analysisTarget":{"region":{"startLine":"356"},"uri":"org\/owasp\/webgoat\/session\/ECSFactory.java"}}],"ruleId":"de.upb.gpa.findbugs.568","message":"Performance - Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::ECSFactory::makeOption","analysisTarget":{"region":{"startLine":"432"},"uri":"org\/owasp\/webgoat\/session\/ECSFactory.java"}}],"ruleId":"de.upb.gpa.findbugs.569","message":"Performance - Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::ECSFactory::toString","analysisTarget":{"region":{"startLine":"215"},"uri":"org\/owasp\/webgoat\/session\/ECSFactory.java"}}],"ruleId":"de.upb.gpa.findbugs.570","message":"Performance - Method allocates a boxed primitive just to call toString"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::ECSFactory::toString","analysisTarget":{"region":{"startLine":"356"},"uri":"org\/owasp\/webgoat\/session\/ECSFactory.java"}}],"ruleId":"de.upb.gpa.findbugs.571","message":"Performance - Method allocates a boxed primitive just to call toString"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::ECSFactory::toString","analysisTarget":{"region":{"startLine":"432"},"uri":"org\/owasp\/webgoat\/session\/ECSFactory.java"}}],"ruleId":"de.upb.gpa.findbugs.572","message":"Performance - Method allocates a boxed primitive just to call toString"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::ErrorScreen::toString","analysisTarget":{"region":{"startLine":"248"},"uri":"org\/owasp\/webgoat\/session\/ErrorScreen.java"}}],"ruleId":"de.upb.gpa.findbugs.573","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::ErrorScreen::<init>","analysisTarget":{"region":{"startLine":"248"},"uri":"org\/owasp\/webgoat\/session\/ErrorScreen.java"}}],"ruleId":"de.upb.gpa.findbugs.574","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::LessonTracker::getTrackerFile","analysisTarget":{"region":{"startLine":"195"},"uri":"org\/owasp\/webgoat\/session\/LessonTracker.java"}}],"ruleId":"de.upb.gpa.findbugs.575","message":"Style - Redundant nullcheck of value known to be non-null"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::LessonTracker","analysisTarget":{"region":{"startLine":"59"},"uri":"org\/owasp\/webgoat\/session\/LessonTracker.java"}}],"ruleId":"de.upb.gpa.findbugs.576","message":"Performance - Unread field"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::ParameterParser::getBooleanParameter","analysisTarget":{"region":{"startLine":"101"},"uri":"org\/owasp\/webgoat\/session\/ParameterParser.java"}}],"ruleId":"de.upb.gpa.findbugs.577","message":"Performance - Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::ParameterParser::getBooleanSubParameter","analysisTarget":{"region":{"startLine":"140"},"uri":"org\/owasp\/webgoat\/session\/ParameterParser.java"}}],"ruleId":"de.upb.gpa.findbugs.578","message":"Performance - Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::WebSession::<init>","analysisTarget":{"region":{"startLine":"836"},"uri":"org\/owasp\/webgoat\/session\/WebSession.java"}}],"ruleId":"de.upb.gpa.findbugs.579","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::WebSession::update","analysisTarget":{"region":{"startLine":"836"},"uri":"org\/owasp\/webgoat\/session\/WebSession.java"}}],"ruleId":"de.upb.gpa.findbugs.580","message":"Performance - Method invokes inefficient new String(String) constructor"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::WebSession::getCurrentLink","analysisTarget":{"region":{"startLine":"395"},"uri":"org\/owasp\/webgoat\/session\/WebSession.java"}}],"ruleId":"de.upb.gpa.findbugs.581","message":"Performance - Method concatenates strings using + in a loop"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::WebgoatContext::<init>","analysisTarget":{"region":{"startLine":"87"},"uri":"org\/owasp\/webgoat\/session\/WebgoatContext.java"}}],"ruleId":"de.upb.gpa.findbugs.582","message":"Performance - Method invokes inefficient new String(String) constructor"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::WebgoatProperties::main","analysisTarget":{"region":{"startLine":"111"},"uri":"org\/owasp\/webgoat\/session\/WebgoatProperties.java"}}],"ruleId":"de.upb.gpa.findbugs.583","message":"Style - Code contains a hard coded reference to an absolute pathname"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::session::WebgoatProperties::main","analysisTarget":{"region":{"startLine":"111"},"uri":"org\/owasp\/webgoat\/session\/WebgoatProperties.java"}}],"ruleId":"de.upb.gpa.findbugs.584","message":"Correctness - Possible null pointer dereference in method on exception path"},{"locations":[{"fullyQualifiedLogicalName":"java::io::InputStream::<init>","analysisTarget":{"region":{"startLine":"44"},"uri":"org\/owasp\/webgoat\/session\/WebgoatProperties.java"}}],"ruleId":"de.upb.gpa.findbugs.585","message":"Experimental - Method may fail to clean up stream or resource"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::util::Exec::toString","analysisTarget":{"region":{"startLine":"278"},"uri":"org\/owasp\/webgoat\/util\/Exec.java"}}],"ruleId":"de.upb.gpa.findbugs.586","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::util::Exec::getBytes","analysisTarget":{"region":{"startLine":"278"},"uri":"org\/owasp\/webgoat\/util\/Exec.java"}}],"ruleId":"de.upb.gpa.findbugs.587","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::util::Exec::toString","analysisTarget":{"region":{"startLine":"96"},"uri":"org\/owasp\/webgoat\/util\/Exec.java"}}],"ruleId":"de.upb.gpa.findbugs.588","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::util::Exec::getBytes","analysisTarget":{"region":{"startLine":"96"},"uri":"org\/owasp\/webgoat\/util\/Exec.java"}}],"ruleId":"de.upb.gpa.findbugs.589","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::util::Exec::execOptions","analysisTarget":{"region":{"startLine":"278"},"uri":"org\/owasp\/webgoat\/util\/Exec.java"}}],"ruleId":"de.upb.gpa.findbugs.590","message":"Correctness - Nullcheck of value previously dereferenced"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::util::Exec::execOptions","analysisTarget":{"region":{"startLine":"96"},"uri":"org\/owasp\/webgoat\/util\/Exec.java"}}],"ruleId":"de.upb.gpa.findbugs.591","message":"Correctness - Nullcheck of value previously dereferenced"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::util::HtmlEncoder::valueOf","analysisTarget":{"region":{"startLine":"38"},"uri":"org\/owasp\/webgoat\/util\/HtmlEncoder.java"}}],"ruleId":"de.upb.gpa.findbugs.592","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::util::HtmlEncoder::valueOf","analysisTarget":{"region":{"startLine":"182"},"uri":"org\/owasp\/webgoat\/util\/HtmlEncoder.java"}}],"ruleId":"de.upb.gpa.findbugs.593","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::util::HtmlEncoder::valueOf","analysisTarget":{"region":{"startLine":"142"},"uri":"org\/owasp\/webgoat\/util\/HtmlEncoder.java"}}],"ruleId":"de.upb.gpa.findbugs.594","message":"Performance - Method invokes inefficient Number constructor; use static valueOf instead"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::util::Interceptor::<init>","analysisTarget":{"region":{"startLine":"74"},"uri":"org\/owasp\/webgoat\/util\/Interceptor.java"}}],"ruleId":"de.upb.gpa.findbugs.595","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::util::Interceptor::<init>","analysisTarget":{"region":{"startLine":"74"},"uri":"org\/owasp\/webgoat\/util\/Interceptor.java"}}],"ruleId":"de.upb.gpa.findbugs.596","message":"I18n - Reliance on default encoding"},{"locations":[{"fullyQualifiedLogicalName":"org::owasp::webgoat::util::WebGoatI18N::<init>","analysisTarget":{"region":{"startLine":"15"},"uri":"org\/owasp\/webgoat\/util\/WebGoatI18N.java"}}],"ruleId":"de.upb.gpa.findbugs.597","message":"Style - Write to static field from instance method"}],"tool":{"name":"FindBugs","semanticVersion":"3.0.1"}}]}