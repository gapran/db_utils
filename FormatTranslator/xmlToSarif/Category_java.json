{"de.upb.gpa.Checkstyle.214":{"startLine":"164","shortMessage":"Class 'Category' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Category' final or making the method 'equals' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Category' looks like designed for extension , but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Category' final or making the method 'equals' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.215":{"startLine":"169","shortMessage":"Class 'Category' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Category' final or making the method 'toString' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Category' looks like designed for extension , but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Category' final or making the method 'toString' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.212":{"startLine":"156","shortMessage":"Inner assignments should be avoided.","longMessage":"Inner assignments should be avoided."},"de.upb.gpa.Checkstyle.213":{"startLine":"159","shortMessage":"Class 'Category' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Category' final or making the method 'getName' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Category' looks like designed for extension , but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Category' final or making the method 'getName' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.49":{"startLine":"154","shortMessage":"'ranking' hides a field.","longMessage":"'ranking' hides a field."},"de.upb.gpa.Checkstyle.210":{"startLine":"149","shortMessage":"Class 'Category' looks like designed for extension (can be subclassed), but the method 'getRanking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Category' final or making the method 'getRanking' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Category' looks like designed for extension , but the method 'getRanking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Category' final or making the method 'getRanking' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.211":{"startLine":"154","shortMessage":"Class 'Category' looks like designed for extension (can be subclassed), but the method 'setRanking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Category' final or making the method 'setRanking' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Category' looks like designed for extension , but the method 'setRanking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Category' final or making the method 'setRanking' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.findbugs.DM_NUMBER_CTOR":{"startLine":"42","shortMessage":"Performance - Method invokes inefficient Number constructor; use static valueOf instead","longMessage":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte."},"de.upb.gpa.findbugs.HE_EQUALS_USE_HASHCODE":{"startLine":"166","shortMessage":"Bad practice - Class defines equals() and uses Object.hashCode()","longMessage":"This class overrides equals(Object), but does not override hashCode(), and inherits the implementation of hashCode() from java.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes.If you don't think instances of this class will ever be inserted into a HashMap\/HashTable,the recommended hashCode implementation to use is:public int hashCode() { assert false : \"hashCode not designed\"; return 42; \/\/ any arbitrary constant will do}"},"de.upb.gpa.Checkstyle.12":{"startLine":"170","shortMessage":"'{' at column 2 should be on the previous line.","longMessage":"'{' at column 2 should be on the previous line."},"de.upb.gpa.Checkstyle.56":{"startLine":"164","shortMessage":"Parameter obj should be final.","longMessage":"Parameter obj should be final."},"de.upb.gpa.Checkstyle.13":{"startLine":"142","shortMessage":"'{' at column 3 should be on the previous line.","longMessage":"'{' at column 3 should be on the previous line."},"de.upb.gpa.Checkstyle.57":{"startLine":"164","shortMessage":"Definition of 'equals()' without corresponding definition of 'hashCode()'.","longMessage":"Definition of 'equals' without corresponding definition of 'hashCode'."},"de.upb.gpa.Checkstyle.209":{"startLine":"137","shortMessage":"Class 'Category' looks like designed for extension (can be subclassed), but the method 'compareTo' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Category' final or making the method 'compareTo' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Category' looks like designed for extension , but the method 'compareTo' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Category' final or making the method 'compareTo' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.207":{"startLine":"131","shortMessage":"Parameter category should be final.","longMessage":"Parameter category should be final."},"de.upb.gpa.Checkstyle.208":{"startLine":"131","shortMessage":"'category' hides a field.","longMessage":"'category' hides a field."},"de.upb.gpa.Checkstyle.205":{"startLine":"115","shortMessage":"Parameter c should be final.","longMessage":"Parameter c should be final."},"de.upb.gpa.Checkstyle.206":{"startLine":"120","shortMessage":"Parameter name should be final.","longMessage":"Parameter name should be final."},"de.upb.gpa.Checkstyle.203":{"startLine":"1","shortMessage":"File does not end with a newline.","longMessage":"File does not end with a newline."},"de.upb.gpa.Checkstyle.204":{"startLine":"84","shortMessage":"Name 'categories' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.","longMessage":"Name 'categories' must match pattern '^[A-Z][A-Z0-9]**$'."},"de.upb.gpa.Checkstyle.2":{"startLine":"166","shortMessage":"Line is longer than 80 characters (found 97).","longMessage":"Line is longer than 80 characters ."},"de.upb.gpa.Checkstyle.4":{"startLine":"37","shortMessage":"Unknown tag 'created'.","longMessage":"Unknown tag 'created'."},"de.upb.gpa.Checkstyle.3":{"startLine":"73","shortMessage":"Line has trailing spaces.","longMessage":"Line has trailing spaces."},"de.upb.gpa.Checkstyle.6":{"startLine":"42","shortMessage":"File contains tab characters (this is the first instance).","longMessage":"File contains tab characters ."},"de.upb.gpa.Checkstyle.5":{"startLine":"40","shortMessage":"'{' at column 1 should be on the previous line.","longMessage":"'{' at column 1 should be on the previous line."},"de.upb.gpa.Checkstyle.8":{"startLine":"82","shortMessage":"'static' modifier out of order with the JLS suggestions.","longMessage":"'static' modifier out of order with the JLS suggestions."},"de.upb.gpa.Checkstyle.9":{"startLine":"169","shortMessage":"Missing a Javadoc comment.","longMessage":"Missing a Javadoc comment."},"de.upb.gpa.Checkstyle.26":{"startLine":"126","shortMessage":"'if' construct must use '{}'s.","longMessage":"'if' construct must use '{}'s."},"de.upb.gpa.Checkstyle.48":{"startLine":"154","shortMessage":"Parameter ranking should be final.","longMessage":"Parameter ranking should be final."}}