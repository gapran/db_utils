{"de.upb.gpa.Checkstyle.779":{"startLine":"186","shortMessage":"Expected @param tag for 'to'.","longMessage":"Expected @param tag for 'to'."},"de.upb.gpa.Checkstyle.777":{"startLine":"148","shortMessage":"Parameter sentMessage should be final.","longMessage":"Parameter sentMessage should be final."},"de.upb.gpa.Checkstyle.117":{"startLine":"257","shortMessage":"'3' is a magic number.","longMessage":"'3' is a magic number."},"de.upb.gpa.Checkstyle.778":{"startLine":"186","shortMessage":"Parameter to should be final.","longMessage":"Parameter to should be final."},"de.upb.gpa.Checkstyle.775":{"startLine":"72","shortMessage":"Name 'YOUR_REAL_GMAIL_ID' must match pattern '^[a-z][a-zA-Z0-9]*$'.","longMessage":"Name 'YOUR_REAL_GMAIL_ID' must match pattern '^[a-z][a-zA-Z0-9]*$'."},"de.upb.gpa.Checkstyle.776":{"startLine":"83","shortMessage":"Name 'emailFromAddress' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.","longMessage":"Name 'emailFromAddress' must match pattern '^[A-Z][A-Z0-9]**$'."},"de.upb.gpa.Checkstyle.116":{"startLine":"274","shortMessage":"'5' is a magic number.","longMessage":"'5' is a magic number."},"de.upb.gpa.Checkstyle.774":{"startLine":"70","shortMessage":"Name 'YOUR_REAL_GMAIL_PASSWORD' must match pattern '^[a-z][a-zA-Z0-9]*$'.","longMessage":"Name 'YOUR_REAL_GMAIL_PASSWORD' must match pattern '^[a-z][a-zA-Z0-9]*$'."},"de.upb.gpa.Checkstyle.27":{"startLine":"122","shortMessage":"'}' at column 5 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if\/else-if\/else, do\/while or try\/catch\/finally).","longMessage":"'}' at column 5 should be on the same line as the next part of a multi-block statement ."},"de.upb.gpa.Checkstyle.130":{"startLine":"274","shortMessage":"'40' is a magic number.","longMessage":"'40' is a magic number."},"de.upb.gpa.findbugs.DM_NUMBER_CTOR":{"startLine":"414","shortMessage":"Performance - Method invokes inefficient Number constructor; use static valueOf instead","longMessage":"Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster. Values between -128 and 127 are guaranteed to have corresponding cached instances and using valueOf is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same. Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the valueOf() method when creating instances of Long, Integer, Short, Character, and Byte."},"de.upb.gpa.Checkstyle.12":{"startLine":"427","shortMessage":"'{' at column 2 should be on the previous line.","longMessage":"'{' at column 2 should be on the previous line."},"de.upb.gpa.Checkstyle.34":{"startLine":"330","shortMessage":"Parameter message should be final.","longMessage":"Parameter message should be final."},"de.upb.gpa.Checkstyle.35":{"startLine":"406","shortMessage":"Parameter s should be final.","longMessage":"Parameter s should be final."},"de.upb.gpa.Checkstyle.13":{"startLine":"345","shortMessage":"'{' at column 3 should be on the previous line.","longMessage":"'{' at column 3 should be on the previous line."},"de.upb.gpa.Checkstyle.14":{"startLine":"348","shortMessage":"'{' at column 4 should be on the previous line.","longMessage":"'{' at column 4 should be on the previous line."},"de.upb.gpa.Checkstyle.15":{"startLine":"124","shortMessage":"'{' at column 5 should be on the previous line.","longMessage":"'{' at column 5 should be on the previous line."},"de.upb.gpa.Checkstyle.609":{"startLine":"286","shortMessage":"Expected @param tag for 'ec'.","longMessage":"Expected @param tag for 'ec'."},"de.upb.gpa.findbugs.HE_INHERITS_EQUALS_USE_HASHCODE":{"startLine":"68","shortMessage":"Bad practice - Class inherits equals() and uses Object.hashCode()","longMessage":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException."},"de.upb.gpa.Checkstyle.2":{"startLine":"410","shortMessage":"Line is longer than 80 characters (found 93).","longMessage":"Line is longer than 80 characters ."},"de.upb.gpa.Checkstyle.146":{"startLine":"286","shortMessage":"Parameter ec should be final.","longMessage":"Parameter ec should be final."},"de.upb.gpa.Checkstyle.784":{"startLine":"330","shortMessage":"Parameter from should be final.","longMessage":"Parameter from should be final."},"de.upb.gpa.Checkstyle.785":{"startLine":"416","shortMessage":"Class 'UncheckedEmail' looks like designed for extension (can be subclassed), but the method 'getDefaultRanking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UncheckedEmail' final or making the method 'getDefaultRanking' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'UncheckedEmail' looks like designed for extension , but the method 'getDefaultRanking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UncheckedEmail' final or making the method 'getDefaultRanking' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.4":{"startLine":"65","shortMessage":"Unknown tag 'created'.","longMessage":"Unknown tag 'created'."},"de.upb.gpa.Checkstyle.782":{"startLine":"220","shortMessage":"Expected @param tag for 'message'.","longMessage":"Expected @param tag for 'message'."},"de.upb.gpa.Checkstyle.3":{"startLine":"423","shortMessage":"Line has trailing spaces.","longMessage":"Line has trailing spaces."},"de.upb.gpa.Checkstyle.783":{"startLine":"330","shortMessage":"Parameter recipients should be final.","longMessage":"Parameter recipients should be final."},"de.upb.gpa.Checkstyle.6":{"startLine":"70","shortMessage":"File contains tab characters (this is the first instance).","longMessage":"File contains tab characters ."},"de.upb.gpa.Checkstyle.780":{"startLine":"330","shortMessage":"Parameter subject should be final.","longMessage":"Parameter subject should be final."},"de.upb.gpa.Checkstyle.5":{"startLine":"69","shortMessage":"'{' at column 1 should be on the previous line.","longMessage":"'{' at column 1 should be on the previous line."},"de.upb.gpa.Checkstyle.781":{"startLine":"220","shortMessage":"Expected @param tag for 'subject'.","longMessage":"Expected @param tag for 'subject'."},"de.upb.gpa.Checkstyle.8":{"startLine":"414","shortMessage":"'static' modifier out of order with the JLS suggestions.","longMessage":"'static' modifier out of order with the JLS suggestions."},"de.upb.gpa.Checkstyle.7":{"startLine":"421","shortMessage":"First sentence should end with a period.","longMessage":"First sentence should end with a period."},"de.upb.gpa.findbugs.SS_SHOULD_BE_STATIC":{"startLine":"70","shortMessage":"Performance - Unread field: should this field be static?","longMessage":"This class contains an instance final field that is initialized to a compile-time static value. Consider making the field static."},"de.upb.gpa.Checkstyle.9":{"startLine":"416","shortMessage":"Missing a Javadoc comment.","longMessage":"Missing a Javadoc comment."},"de.upb.gpa.Checkstyle.65":{"startLine":"406","shortMessage":"Expected @param tag for 's'.","longMessage":"Expected @param tag for 's'."},"de.upb.gpa.findbugs.REC_CATCH_EXCEPTION":{"startLine":"152","shortMessage":"Style - Exception is caught when Exception is not thrown","longMessage":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}"}}