{"de.upb.gpa.Checkstyle.218":{"startLine":"495","shortMessage":"Empty statement.","longMessage":"Empty statement."},"de.upb.gpa.Checkstyle.219":{"startLine":"496","shortMessage":"Avoid nested blocks.","longMessage":"Avoid nested blocks."},"de.upb.gpa.Checkstyle.117":{"startLine":"637","shortMessage":"'3' is a magic number.","longMessage":"'3' is a magic number."},"de.upb.gpa.Checkstyle.216":{"startLine":"215","shortMessage":"'user' hides a field.","longMessage":"'user' hides a field."},"de.upb.gpa.Checkstyle.118":{"startLine":"638","shortMessage":"'4' is a magic number.","longMessage":"'4' is a magic number."},"de.upb.gpa.Checkstyle.217":{"startLine":"424","shortMessage":"Class 'Challenge2Screen' looks like designed for extension (can be subclassed), but the method 'getDefaultCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Challenge2Screen' final or making the method 'getDefaultCategory' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Challenge2Screen' looks like designed for extension , but the method 'getDefaultCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Challenge2Screen' final or making the method 'getDefaultCategory' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.116":{"startLine":"680","shortMessage":"'5' is a magic number.","longMessage":"'5' is a magic number."},"de.upb.gpa.findbugs.OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE":{"startLine":"408","shortMessage":"Experimental - Method may fail to clean up stream or resource on checked exception","longMessage":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique."},"de.upb.gpa.findbugs.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE":{"startLine":"194","shortMessage":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement","longMessage":"The method invokes the execute or addBatch method on an SQL statement with a String that seemsto be dynamically generated. Consider usinga prepared statement instead. It is more efficient and less vulnerable toSQL injection attacks."},"de.upb.gpa.Checkstyle.111":{"startLine":"652","shortMessage":"'{' is followed by whitespace.","longMessage":"'{' is followed by whitespace."},"de.upb.gpa.findbugs.DM_DEFAULT_ENCODING":{"startLine":"723","shortMessage":"I18n - Reliance on default encoding","longMessage":"Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly."},"de.upb.gpa.Checkstyle.175":{"startLine":"256","shortMessage":"'13' is a magic number.","longMessage":"'13' is a magic number."},"de.upb.gpa.Checkstyle.29":{"startLine":"649","shortMessage":"'}' at column 3 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if\/else-if\/else, do\/while or try\/catch\/finally).","longMessage":"'}' at column 3 should be on the same line as the next part of a multi-block statement ."},"de.upb.gpa.Checkstyle.12":{"startLine":"792","shortMessage":"'{' at column 2 should be on the previous line.","longMessage":"'{' at column 2 should be on the previous line."},"de.upb.gpa.Checkstyle.34":{"startLine":"719","shortMessage":"Parameter message should be final.","longMessage":"Parameter message should be final."},"de.upb.gpa.Checkstyle.35":{"startLine":"791","shortMessage":"Parameter s should be final.","longMessage":"Parameter s should be final."},"de.upb.gpa.Checkstyle.13":{"startLine":"796","shortMessage":"'{' at column 3 should be on the previous line.","longMessage":"'{' at column 3 should be on the previous line."},"de.upb.gpa.Checkstyle.14":{"startLine":"681","shortMessage":"'{' at column 4 should be on the previous line.","longMessage":"'{' at column 4 should be on the previous line."},"de.upb.gpa.Checkstyle.36":{"startLine":"666","shortMessage":"'}' at column 4 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if\/else-if\/else, do\/while or try\/catch\/finally).","longMessage":"'}' at column 4 should be on the same line as the next part of a multi-block statement ."},"de.upb.gpa.Checkstyle.15":{"startLine":"334","shortMessage":"'{' at column 5 should be on the previous line.","longMessage":"'{' at column 5 should be on the previous line."},"de.upb.gpa.findbugs.HE_INHERITS_EQUALS_USE_HASHCODE":{"startLine":"74","shortMessage":"Bad practice - Class inherits equals() and uses Object.hashCode()","longMessage":"This class inherits equals(Object) from an abstract superclass, and hashCode() fromjava.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).&nbsp; Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes. If you don't want to define a hashCode method, and\/or don't believe the object will ever be put into a HashMap\/Hashtable, define the hashCode() method to throw UnsupportedOperationException."},"de.upb.gpa.Checkstyle.227":{"startLine":"797","shortMessage":"'{' at column 60 should have line break after.","longMessage":"'{' at column 60 should have line break after."},"de.upb.gpa.Checkstyle.225":{"startLine":"732","shortMessage":"Class 'Challenge2Screen' looks like designed for extension (can be subclassed), but the method 'buildCart' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Challenge2Screen' final or making the method 'buildCart' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Challenge2Screen' looks like designed for extension , but the method 'buildCart' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Challenge2Screen' final or making the method 'buildCart' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.226":{"startLine":"779","shortMessage":"Class 'Challenge2Screen' looks like designed for extension (can be subclassed), but the method 'canHaveClues' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Challenge2Screen' final or making the method 'canHaveClues' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Challenge2Screen' looks like designed for extension , but the method 'canHaveClues' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Challenge2Screen' final or making the method 'canHaveClues' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.2":{"startLine":"797","shortMessage":"Line is longer than 80 characters (found 115).","longMessage":"Line is longer than 80 characters ."},"de.upb.gpa.Checkstyle.223":{"startLine":"615","shortMessage":"Unused @param tag for 'text'.","longMessage":"Unused @param tag for 'text'."},"de.upb.gpa.findbugs.OBL_UNSATISFIED_OBLIGATION":{"startLine":"194","shortMessage":"Experimental - Method may fail to clean up stream or resource","longMessage":"This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. In general, if a method opens a stream or other resource, the method should use a try\/finally block to ensure that the stream or resource is cleaned up before the method returns. This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different (and hopefully better) static analysis technique. We are interested is getting feedback about the usefulness of this bug pattern. For sending feedback, check: contributing guideline malinglist In particular, the false-positive suppression heuristics for this bug pattern have not been extensively tuned, so reports about false positives are helpful to us. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a description of the analysis technique."},"de.upb.gpa.Checkstyle.224":{"startLine":"706","shortMessage":"Class 'Challenge2Screen' looks like designed for extension (can be subclassed), but the method 'makeHints' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Challenge2Screen' final or making the method 'makeHints' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Challenge2Screen' looks like designed for extension , but the method 'makeHints' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Challenge2Screen' final or making the method 'makeHints' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.4":{"startLine":"72","shortMessage":"Unknown tag 'created'.","longMessage":"Unknown tag 'created'."},"de.upb.gpa.Checkstyle.221":{"startLine":"572","shortMessage":"'130' is a magic number.","longMessage":"'130' is a magic number."},"de.upb.gpa.Checkstyle.3":{"startLine":"786","shortMessage":"Line has trailing spaces.","longMessage":"Line has trailing spaces."},"de.upb.gpa.Checkstyle.222":{"startLine":"592","shortMessage":"'1234' is a magic number.","longMessage":"'1234' is a magic number."},"de.upb.gpa.Checkstyle.6":{"startLine":"76","shortMessage":"File contains tab characters (this is the first instance).","longMessage":"File contains tab characters ."},"de.upb.gpa.Checkstyle.5":{"startLine":"75","shortMessage":"'{' at column 1 should be on the previous line.","longMessage":"'{' at column 1 should be on the previous line."},"de.upb.gpa.Checkstyle.220":{"startLine":"505","shortMessage":"Class 'Challenge2Screen' looks like designed for extension (can be subclassed), but the method 'makeLogin' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Challenge2Screen' final or making the method 'makeLogin' static\/final\/abstract\/empty, or adding allowed annotation for the method.","longMessage":"Class 'Challenge2Screen' looks like designed for extension , but the method 'makeLogin' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Challenge2Screen' final or making the method 'makeLogin' static\/final\/abstract\/empty, or adding allowed annotation for the method."},"de.upb.gpa.Checkstyle.8":{"startLine":"119","shortMessage":"'static' modifier out of order with the JLS suggestions.","longMessage":"'static' modifier out of order with the JLS suggestions."},"de.upb.gpa.Checkstyle.7":{"startLine":"784","shortMessage":"First sentence should end with a period.","longMessage":"First sentence should end with a period."},"de.upb.gpa.Checkstyle.9":{"startLine":"779","shortMessage":"Missing a Javadoc comment.","longMessage":"Missing a Javadoc comment."},"de.upb.gpa.Checkstyle.65":{"startLine":"619","shortMessage":"Expected @param tag for 's'.","longMessage":"Expected @param tag for 's'."},"de.upb.gpa.findbugs.REC_CATCH_EXCEPTION":{"startLine":"194","shortMessage":"Style - Exception is caught when Exception is not thrown","longMessage":"This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs. A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:try { ...} catch (RuntimeException e) { throw e;} catch (Exception e) { ... deal with all non-runtime exceptions ...}"},"de.upb.gpa.Checkstyle.45":{"startLine":"213","shortMessage":"',' is not followed by whitespace.","longMessage":"',' is not followed by whitespace."},"de.upb.gpa.Checkstyle.26":{"startLine":"494","shortMessage":"'if' construct must use '{}'s.","longMessage":"'if' construct must use '{}'s."},"de.upb.gpa.findbugs.ODR_OPEN_DATABASE_RESOURCE":{"startLine":"194","shortMessage":"Bad practice - Method may fail to close database resource","longMessage":"The method creates a database resource (such as a database connectionor row set), does not assign it to anyfields, pass it to other methods, or return it, and does not appear to closethe object on all paths out of the method.&nbsp; Failure toclose database resources on all paths out of a method mayresult in poor performance, and could cause the application tohave problems communicating with the database."}}